"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = __importDefault(require("crypto"));
var fs_1 = __importDefault(require("fs"));
var os_1 = __importDefault(require("os"));
var npmEnvDependencyPrefix = 'npm_package_dependencies_';
var npmSdkEnvDependencyPrefix = npmEnvDependencyPrefix + '_';
var sdkModulePrefix = 'sap_cloud_sdk';
var randomSaltNpmrcPrefix = '@sap:random_salt';
/**
 * Collects insensitive data for SAP Web Analytics.
 * For detailed information, check the following blog post: https://blogs.sap.com/2018/10/23/usage-analytics-s4sdk/
 * @returns An object that includes information on project development environment
 * @hidden
 */
function getAnalyticsData() {
    var nodeVersion = getNodeVersion();
    var npmVersion = getNpmVersion();
    var operatingSystemInfo = getOperatingSystemInfo();
    var cloudSdkModules = getSapCloudSdkDependencies();
    var thirdPartyDependencies = getThirdPartyDependency();
    var withTypeScript = usesTypeScript();
    return { nodeVersion: nodeVersion, npmVersion: npmVersion, operatingSystemInfo: operatingSystemInfo, cloudSdkModules: cloudSdkModules, thirdPartyDependencies: thirdPartyDependencies, withTypeScript: withTypeScript };
}
exports.getAnalyticsData = getAnalyticsData;
/**
 * Getter of the project identifier.
 * @param useSalt A flag specifies whether to use random salt, while generating project identifier
 * @returns The project identifier
 * @hidden
 */
function getProjectIdentifier(useSalt) {
    if (useSalt === void 0) { useSalt = true; }
    var projectName = useSalt ? getPackageName() + getRandomSalt() : getPackageName();
    return hash(projectName);
}
exports.getProjectIdentifier = getProjectIdentifier;
/**
 * Retrieves the project's random salt.
 * If the project has no existing random salt, a new salt is generated and stored in .npmrc file.
 * @returns Project's random salt
 */
function getRandomSalt() {
    if ('npm_config__sap_random_salt' in process.env) {
        return process.env.npm_config__sap_random_salt;
    }
    console.warn('No random salt has been found. A new one will be generated.');
    // Store a random salt in .npmrc file
    var path = process.cwd() + '/.npmrc';
    var npmrc = fs_1.default.existsSync(path) ? fs_1.default.readFileSync(path, { encoding: 'utf8' }) : '';
    if (!npmrc.endsWith('\n') && npmrc !== '') {
        npmrc += '\n';
    }
    var existingRandomSalt = getRandomSaltIfExistsInNpmrc(npmrc);
    // If a random salt exists in .npmrc but has not been loaded in process environment.
    if (existingRandomSalt) {
        return existingRandomSalt;
    }
    var newRandomSalt = hash(Math.random().toString(16));
    npmrc += randomSaltNpmrcPrefix + "=" + newRandomSalt + "\n";
    fs_1.default.writeFileSync(path, npmrc, { encoding: 'utf8' });
    return newRandomSalt;
}
function getRandomSaltIfExistsInNpmrc(npmrc) {
    if (npmrc) {
        var lines = npmrc.split('\n');
        var withRandomSalt = lines.filter(function (line) { return line.startsWith(randomSaltNpmrcPrefix); });
        if (withRandomSalt.length) {
            return withRandomSalt[0].split('=')[1];
        }
    }
    return '';
}
function usesTypeScript() {
    return 'npm_package_devDependencies_typescript' in process.env;
}
function getSapCloudSdkDependencies() {
    var dependencies = getAllDependencies();
    return Object.keys(dependencies)
        .filter(function (dependency) { return dependency.startsWith(sdkModulePrefix); })
        .reduce(function (prev, curr) {
        prev[curr] = dependencies[curr];
        return prev;
    }, {});
}
function getAllDependencies() {
    return Object.keys(process.env)
        .filter(function (env) { return env.startsWith(npmEnvDependencyPrefix); })
        .reduce(function (prev, curr) {
        prev[sanitizeDependencyName(curr)] = sanitizeVersionFormat(process.env[curr]);
        return prev;
    }, {});
}
function getPackageName() {
    return process.env.npm_package_name;
}
function getNpmVersion() {
    var userAgent = process.env.npm_config_user_agent;
    // npm_config_user_agent has "npm/x.x.x node/x.x.x operatingSystemName architecture" format
    var npmInfo = userAgent.split(' ')[0];
    return sanitizeVersionFormat(npmInfo.slice(4));
}
function getNodeVersion() {
    var userAgent = process.env.npm_config_user_agent;
    var nodeInfo = userAgent.split(' ')[1];
    return sanitizeVersionFormat(nodeInfo.slice(5));
}
function sanitizeVersionFormat(version) {
    return version.startsWith('v') || version.startsWith('^') ? version.slice(1) : version;
}
function sanitizeDependencyName(name) {
    return name.startsWith(npmSdkEnvDependencyPrefix) ? name.slice(npmSdkEnvDependencyPrefix.length) : name.slice(npmEnvDependencyPrefix.length);
}
function getOperatingSystemInfo() {
    return { name: os_1.default.platform(), version: os_1.default.release(), architecture: os_1.default.arch() };
}
function getThirdPartyDependency() {
    var dependencies = getAllDependencies();
    return Object.keys(dependencies)
        .filter(function (dependency) { return !dependency.startsWith(sdkModulePrefix); })
        .reduce(function (prev, curr) {
        prev[curr] = dependencies[curr];
        return prev;
    }, {});
}
function hash(value) {
    return crypto_1.default
        .createHash('sha256')
        .update(value)
        .digest('hex');
}
//# sourceMappingURL=analytics-data.js.map