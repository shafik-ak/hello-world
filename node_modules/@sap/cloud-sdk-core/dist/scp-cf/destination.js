"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var rambda_1 = require("rambda");
/**
 * Takes an existing or a parsed destination and returns an SDK compatible destination object.
 *
 * @param destination A JSON object returned by the destination service.
 * @returns An SDK compatible destination object.
 */
function sanitizeDestination(destination) {
    return rambda_1.pipe(setDefaultAuthenticationFallback, parseAuthTokens, parseCertificates, setTrustAll, setOriginalProperties)(destination);
}
exports.sanitizeDestination = sanitizeDestination;
/**
 * Takes a JSON object returned by any of the calls to the destination service and returns an SDK compatible destination object.
 *
 * @param destinationJson A JSON object returned by the destination service.
 * @returns An SDK compatible destination object.
 */
function parseDestination(destinationJson) {
    var destinationConfig = Object.keys(destinationJson).includes('destinationConfiguration')
        ? destinationJson.destinationConfiguration
        : destinationJson;
    var destination = {
        originalProperties: destinationJson,
        authTokens: destinationJson['authTokens'] || [],
        certificates: destinationJson['certificates'] || []
    };
    Object.entries(destinationConfig).map(function (_a) {
        var originalKey = _a[0], value = _a[1];
        if (originalKey in configMapping) {
            destination[configMapping[originalKey]] = value;
        }
    });
    return sanitizeDestination(destination);
}
exports.parseDestination = parseDestination;
function setOriginalProperties(destination) {
    var originalProperties = destination.originalProperties ? destination.originalProperties : destination;
    return rambda_1.assoc('originalProperties', originalProperties, destination);
}
function setDefaultAuthenticationFallback(destination) {
    if (destination.authentication) {
        return destination;
    }
    return rambda_1.assoc('authentication', getAuthenticationType(destination), destination);
}
function parseCertificate(certificate) {
    return {
        name: certificate.Name,
        content: certificate.Content,
        type: certificate.Type
    };
}
function parseCertificates(destination) {
    var certificates = destination.certificates ? destination.certificates.map(parseCertificate) : [];
    return rambda_1.assoc('certificates', certificates, destination);
}
function parseAuthToken(authToken) {
    return {
        type: authToken.type,
        value: authToken.value,
        expiresIn: authToken.expires_in,
        error: 'error' in authToken ? authToken.error : null
    };
}
function parseAuthTokens(destination) {
    var authTokens = destination.authTokens ? destination.authTokens.map(parseAuthToken) : [];
    return rambda_1.assoc('authTokens', authTokens, destination);
}
function setTrustAll(destination) {
    return rambda_1.assoc('isTrustingAllCertificates', parseTrustAll(destination.isTrustingAllCertificates), destination);
}
function parseTrustAll(isTrustingAllCertificates) {
    if (!isTrustingAllCertificates) {
        return false;
    }
    else if (typeof isTrustingAllCertificates === 'boolean') {
        return isTrustingAllCertificates;
    }
    else {
        return isTrustingAllCertificates.toLowerCase() === 'true';
    }
}
function getAuthenticationType(destinationConfig) {
    if (destinationConfig.authentication) {
        return destinationConfig.authentication;
    }
    if (destinationConfig.username && destinationConfig.password) {
        return 'BasicAuthentication';
    }
    return 'NoAuthentication';
}
var configMapping = {
    URL: 'url',
    Name: 'name',
    User: 'username',
    Password: 'password',
    ProxyType: 'proxyType',
    'sap-client': 'sapClient',
    Authentication: 'authentication',
    TrustAll: 'isTrustingAllCertificates',
    tokenServiceURL: 'tokenServiceUrl',
    clientId: 'clientId',
    clientSecret: 'clientSecret',
    tokenServiceUser: 'tokenServiceUser',
    tokenServicePassword: 'tokenServicePassword',
    CloudConnectorLocationId: 'cloudConnectorLocationId',
    certificates: 'certificates',
    KeyStoreLocation: 'keyStoreName',
    KeyStorePassword: 'keyStorePassword'
};
//# sourceMappingURL=destination.js.map