const { addToQueue } = require('./queue')
const { invalidFunctionArgumentError } = require('../utils/errors')

const cds = require('../cds')
const { ensureNoDraftsSuffix } = require('../utils/draftUtils')

const _slugify = name => name.replace(/::/g, '__').replace(/\./g, '_')

const quotingStyles = {
  // assumption that the delimiter is "
  quoted: name => `"${name}"`,
  plain: name => _slugify(name)
}

const fnChain = Symbol.for('sap.cds.fnChain')

class BaseStatement {
  constructor (dml) {
    this[dml] = {}

    this[fnChain] = dml

    // If true it means that the statement is created within a block
    if (addToQueue(this)) {
      // Capture a promise chain synchronous, so it can be executed later on
      this._promised = []

      this.catch = reject => {
        this._promised.push({
          type: 'catch',
          fn: reject
        })

        return this
      }

      this.then = resolve => {
        this._promised.push({
          type: 'then',
          fn: resolve
        })

        return this
      }
    }
  }

  static _isEntity (value, fnName) {
    if (value) {
      // OLD CSN -> value.source
      const entity =
        (value.query &&
          value.query.target &&
          value.query.target.name &&
          ensureNoDraftsSuffix(value.query.target.name)) ||
        value.source ||
        value.name ||
        value

      if (typeof entity === 'string') {
        return entity
      }
    }

    throw invalidFunctionArgumentError(fnName, value)
  }

  static _quoteElement (element) {
    return quotingStyles[cds.env.sql_mapping](element)
  }

  get _isQuery () {
    return true
  }
}

module.exports = BaseStatement
