const {
  getUpdateDraftAdminCQN,
  removeDraftUUID,
  ensureDraftsSuffix,
  ensureNoDraftsSuffix,
  addColumnAlias
} = require('../utils/draftUtils')
const { extractKeyConditions } = require('../utils/draftWhereUtils')
const {
  messages: { DB_CONNECTION_MISSING }
} = require('../utils/constants')
const utilsColumns = require('../utils/columns')

const DRAFT_COLUMNS = [
  {
    ref: ['IsActiveEntity'],
    cast: { type: 'cds.Boolean' }
  },
  {
    ref: ['HasActiveEntity'],
    cast: { type: 'cds.Boolean' }
  },
  {
    ref: ['HasDraftEntity'],
    cast: { type: 'cds.Boolean' }
  },
  { ref: ['DraftAdministrativeData_DraftUUID'] }
]

const _getSelectCQN = (model, { query, statements, target: { name } }) => {
  const draftName = ensureDraftsSuffix(name)

  return statements.SELECT.from(draftName)
    .columns([
      ...addColumnAlias(
        utilsColumns(model.definitions[ensureNoDraftsSuffix(name)], false, true).map(obj => obj.name),
        draftName
      ),
      ...DRAFT_COLUMNS,
      {
        ref: ['DRAFT.DraftAdministrativeData', 'InProcessByUser']
      }
    ])
    .join('DRAFT.DraftAdministrativeData')
    .on({ ref: [draftName, 'DraftAdministrativeData_DraftUUID'] }, '=', {
      ref: ['DRAFT.DraftAdministrativeData', 'DraftUUID']
    })
    .where(extractKeyConditions(query.UPDATE.where).keyList)
}

const _getUpdateDraftCQN = ({ query, statements, target: { name } }) => {
  const set = {}
  for (const entry of Object.keys(query.UPDATE.data)) {
    set[entry] = query.UPDATE.data[entry].val
  }
  if (set.IsActiveEntity) set.IsActiveEntity = false

  return statements
    .UPDATE(ensureDraftsSuffix(name))
    .set(set)
    .where(extractKeyConditions(query.UPDATE.where).keyList)
}

const _deleteDraftAdminProperties = oldData => {
  for (const toBeDeletedProperty of [
    'DraftIsCreatedByMe',
    'DraftIsProcessedByMe',
    'InProcessByUser',
    'LastChangeDateTime',
    'LastChangedByUser',
    'CreatedByUser',
    'CreationDateTime',
    'DraftUUID'
  ]) {
    delete oldData[toBeDeletedProperty]
  }
}

/**
 * Generic Handler for PATCH requests in the context of draft.
 * In case of success it returns the updated entry.
 * If the entry to be updated does not exist, it rejects with error to return a 404.
 * If a draft is already in process of another user it rejects with 403.
 *
 * @param context - operation object, that provides error, continuation and other functions as well as information
 * regarding the current operation.
 * @alias module:handlers.onUpdate
 */
const onPatchDraft = ({ model } = {}) => async context => {
  if (context.data.IsActiveEntity === 'true') {
    context.reject(400)
    return
  }

  if (!context.run) {
    context.log.warn(DB_CONNECTION_MISSING)
    return context.query.UPDATE.data
  }

  const result = await context.run(_getSelectCQN(model, context))

  // Potential timeout scenario supported
  if (result[0].InProcessByUser && result[0].InProcessByUser !== context.user.id) {
    context.reject(403)
    return
  }

  _deleteDraftAdminProperties(result[0])
  context._oldData = result[0]

  const updateDraftCQN = _getUpdateDraftCQN(context)
  const updateDraftAdminCQN = getUpdateDraftAdminCQN(context, context._oldData.DraftAdministrativeData_DraftUUID)

  const setData = Object.keys(context.query.UPDATE.data).reduce((res, curr) => {
    res[curr] = curr === 'IsActiveEntity' ? false : context.query.UPDATE.data[curr].val
    return res
  }, {})

  const returnedData = removeDraftUUID(
    context.query.UPDATE.data ? Object.assign({}, context._oldData, setData) : Object.assign({}, context._oldData)
  )

  await Promise.all([context.run(updateDraftCQN), context.run(updateDraftAdminCQN)])

  return returnedData
}

module.exports = onPatchDraft
