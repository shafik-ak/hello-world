const {
  Components: { DATA_CREATE_HANDLER }
} = require('@sap/odata-server')
const OdataContext = require('../utils/OdataContext')
const setSapMessageHeader = require('../utils/sap-message-header')
const { toODataResult } = require('../utils/event')
const { validateResourcePath } = require('../utils/request')
const generateUUID = require('@sap/cds-foss')('uuid/v4')

/**
 * The handler that will be registered with odata-v4.
 * @param {Service} service
 * @param {Object} options
 * @return {Function}
 */
const create = (service, options) => {
  return (req, res, next) => {
    // End here if length is greater then allowed
    validateResourcePath(req, options, service.model)

    const context = new OdataContext(DATA_CREATE_HANDLER, service, req, res)

    let etag
    if (req.getConcurrentResource() !== null) {
      etag = Object.values(context.target.elements).find(element => {
        return element['@odata.etag']
      }).name
      context.data[etag] = generateUUID()
    }

    service
      .processEvent(context)
      .then(result => {
        if (etag) {
          if (req.isConditional()) {
            req.validateEtag(result[etag])
          }
          result['*@odata.etag'] = result[etag]
        }

        setSapMessageHeader(res, context._.infos)
        context.emit('succeeded')
        context.emit('done')
        next(null, toODataResult(result))
      })
      .catch(err => {
        setSapMessageHeader(res, context._.infos)
        context.emit('failed', err)
        context.emit('done')
        next(err)
      })
  }
}

module.exports = create
