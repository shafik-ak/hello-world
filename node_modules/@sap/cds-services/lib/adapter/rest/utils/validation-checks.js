const { processDeep } = require('../../../util/dataProcessUtils')
const { checkKeys, checkStatic, CDS_TYPE_CHECKS } = require('../../../util/assert')
const { combineErrors } = require('../../../util/errors')
const cds = require('../../../cds')
const getError = require('../../../util/getError')

const validationChecks = (event, data, target) => {
  const checkResult = []

  let validateFn

  if (event === 'UPDATE' && Array.isArray(data)) {
    validateFn = (entry, entity) => {
      checkResult.push(...checkKeys(entity, entry))
      checkResult.push(...checkStatic(entity, entry, true))
    }
  } else {
    validateFn = (entry, entity) => {
      checkResult.push(...checkStatic(entity, entry, true))
    }
  }

  processDeep(validateFn, data, target, false, true)

  const error = combineErrors(checkResult)
  if (error) error.statusCode = 400

  return error
}

const _enrichErrorDetails = (isPrimitive, error) => {
  const element = error.element ? ` '${error.element}' ` : ' '
  const typeDetails = isPrimitive ? '.' : ` according to type definition '${error.type}'.`
  return `Value '${error.value}' of element${element}is invalid${typeDetails}`
}

const _buildErrorMessage = (context, operation, type, typeErrors) => {
  return `Failed to validate return value of type '${type}' for custom ${operation.kind} '${
    context.event
  }': ${typeErrors.join(' ')}`
}

const _getTypeError = (context, operation, type, errorDetails) => {
  return getError(
    500,
    _buildErrorMessage(
      context,
      operation,
      type,
      errorDetails.map(error => _enrichErrorDetails(cds.builtin.types[type], error))
    )
  )
}

const _buildTypeErrorObject = (type, value) => {
  return { type: type, value: value }
}

const _checkArray = (type, check, data) => {
  return data.filter(value => !check(value)).map(value => _buildTypeErrorObject(type, value))
}

const _checkSingle = (type, check, data) => {
  if (!check(data)) {
    return [_buildTypeErrorObject(type, data)]
  }
  return []
}

/**
 * Validate the return type values of custom operations (actions and functions) for primitive or complex values as
 * single values or arrays.
 *
 * @param {Service} service
 * @param {Context} context
 * @param {Operation} operation
 * @param {Object} data
 * @throws Will throw an error with error code 500 if the validation fails. Contains a detailed error message of the
 * type and name of the custom operation, the invalid values, their names and their expected types.
 * @returns {boolean} Returns true if return type validation has passed.
 */
const validateReturnType = (service, context, operation, data) => {
  // Get type for single return value or array
  const type = operation.returns.type ? operation.returns.type : operation.returns.items.type

  // Return type contains primitives
  if (cds.builtin.types[type]) {
    const check = CDS_TYPE_CHECKS[type]

    if (operation.returns.type) {
      const singleCheck = _checkSingle(type, check, data)
      if (singleCheck.length !== 0) {
        throw _getTypeError(context, operation, type, singleCheck)
      }
    } else {
      const arrayCheck = _checkArray(type, check, data)
      if (arrayCheck.length !== 0) {
        throw _getTypeError(context, operation, type, arrayCheck)
      }
    }
    return true
  }

  // Determine entity from bound or unbound action/function
  const entity = context.target ? context.target : service.model.definitions[type]

  const complexCheck = checkStatic(entity, data, true)
  if (complexCheck.length !== 0) {
    throw _getTypeError(context, operation, type, complexCheck)
  }

  return true
}

module.exports = { validationChecks, validateReturnType }
