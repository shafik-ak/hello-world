const getStatements = require('../utils/getStatements')
const getUserAndAttr = require('../utils/getUserAndAttr')
const DelayedEmitter = require('./DelayedEmitter')
const MODEL = Symbol.for('sap.cds.model')
const { convertDateTime } = require('../../services/utils/handlerUtils')

class BaseContext extends DelayedEmitter {
  constructor (service, isDelayed = false) {
    super(isDelayed)
    this.statements = getStatements(service)

    // Supporting legacy data services, where the connect does not include a model definition.
    Object.defineProperty(this, MODEL, { value: service.model })
  }

  setHttpMethod (method) {
    this.method = method
  }

  setUserAndAttr (service) {
    const { user, attr } = getUserAndAttr(this._, service)
    this.user = user
    this.attr = attr
  }

  postPreparation (incomingRequest) {
    if (this.target) {
      convertDateTime(this.data, this.target.elements)
    }

    if (incomingRequest.performanceMeasurement) {
      this.performanceMeasurement = incomingRequest.performanceMeasurement
    }

    if (incomingRequest.dynatrace) {
      this.dynatrace = incomingRequest.dynatrace
    }
  }

  fillKeyValues (keyValues, data) {
    for (const key of Object.keys(keyValues)) {
      data[key] = keyValues[key]
    }
  }

  _getDateFromQueryOptions (str, toValue) {
    const match = str.match(/^date'(.+)'$/)
    return new Date(match[1])
  }

  _dateString (date) {
    return (
      date
        .toISOString()
        .slice(0, 19)
        .replace('T', ' ') + 'Z'
    )
  }

  _temporalValues (_, queryOptions) {
    if (
      !queryOptions ||
      (!queryOptions['sap-valid-at'] && !queryOptions['sap-valid-to'] && !queryOptions['sap-valid-from'])
    ) {
      const date = new Date()
      _['VALID-FROM'] = this._dateString(date)
      date.setTime(date.getTime() + 1000)
      _['VALID-TO'] = this._dateString(date)
    } else if (queryOptions['sap-valid-at']) {
      const date = this._getDateFromQueryOptions(queryOptions['sap-valid-at'])
      _['VALID-FROM'] = this._dateString(date)
      date.setTime(date.getTime() + 1000)
      _['VALID-TO'] = this._dateString(date)
    } else if (queryOptions['sap-valid-from']) {
      _['VALID-FROM'] = this._dateString(this._getDateFromQueryOptions(queryOptions['sap-valid-from']))

      let toDate
      if (queryOptions['sap-valid-to']) {
        toDate = this._getDateFromQueryOptions(queryOptions['sap-valid-to'])
      }

      _['VALID-TO'] = this._dateString(toDate || new Date('9999-01-01T00:00:00Z'))
    }
  }
}

module.exports = BaseContext
