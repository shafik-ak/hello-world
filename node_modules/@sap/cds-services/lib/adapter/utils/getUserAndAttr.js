const negotiateLocale = require('../../adapter/utils/locale')
const _valOf = user => {
  return () => {
    return user.id
  }
}

const _is = (user, attr) => {
  return role => {
    if (role === 'any') {
      return true
    }

    const scopes = attr.scopes || []

    if (role === 'authenticated-user' || role === 'identified-user') {
      return scopes.includes('openid')
    }

    if (role === 'system-user') {
      return attr.grantType === 'client_credentials' || attr.grantType === 'client_x509'
    }

    for (const scope of scopes) {
      if (role === scope || `${attr.xsappname}.${role}` === scope) {
        return true
      }
    }

    return false
  }
}

const _has = user => {
  return roles => {
    return roles.some(role => user.is(role))
  }
}

const _getUserAndAuth = _req => {
  const user = _req && _req.user ? _req.user : { id: 'anonymous' }
  const attr = {
    scopes: []
  }

  return {
    user,
    attr
  }
}

const _extendUser = (userAndAuth, _, request, service) => {
  if (request && request.authInfo) {
    userAndAuth.attr = request.authInfo
  }
  userAndAuth.user.valueOf = _valOf(userAndAuth.user)
  userAndAuth.user.toString = _valOf(userAndAuth.user)
  userAndAuth.user.is = _is(userAndAuth.user, userAndAuth.attr)
  userAndAuth.user.has = _has(userAndAuth.user)
  userAndAuth.user.locale = negotiateLocale(_, service.options.defaultLocale)
}

const getUserAndAttr = (_, service) => {
  const request =
    _.req.getBatchContext && _.req.getBatchContext()
      ? _.req
        .getBatchContext()
        .getRequest()
        .getIncomingRequest()
      : _.req

  const userAndAuth = _getUserAndAuth(request)
  _extendUser(userAndAuth, _, request, service)
  return userAndAuth
}

module.exports = getUserAndAttr
