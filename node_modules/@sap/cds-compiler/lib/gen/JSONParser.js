// Generated from JSON.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');


  function getLoc(ctx,ret) {
    if(ctx.start) {
      ret.start = {
        offset:ctx.start.start,
        start: ctx.start.start,
        stop: ctx.start.stop,
        line: ctx.start.line,
        column: ctx.start.column + 1
      }
    }
    if(ctx.stop) {
      ret.stop = {
        offset: ctx.stop.stop+1,
        start: ctx.stop.start,
        stop: ctx.stop.stop,
        line: ctx.stop.line,
        column: ctx.stop.column + 1 + (ctx.stop.stop - ctx.stop.start) // end of last token
      }
    }
  } // getLoc

  function unquoteNumber(s) {
    return JSON.parse(s); // unquote
  }

  function unquoteString(s) {
    if(s.startsWith("'") && s.endsWith("'")) {
       let ss = s.substring(1,s.length-1);
       ss = ss.replace(/\\/g, '\\\\')
       ss = ss.replace(/\"/g, '\\"')
       s = '"' + ss + '"';
    }
    if(!s.startsWith('"') && !s.endsWith('"') && !isCharNumber(s[0])) { // plain string
      s = '"' + s + '"';
    }
    return JSON.parse(s); // unquote

    function isCharNumber(c) {
      return c >= '0' && c <= '9';
    }
  }


var grammarFileName = "JSON.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0010N\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0003\u0002\u0003\u0002",
    "\u0005\u0002\u000f\n\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0007\u0003\u0015\n\u0003\f\u0003\u000e\u0003\u0018\u000b\u0003",
    "\u0003\u0003\u0005\u0003\u001b\n\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0005\u0003!\n\u0003\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0007\u00052\n\u0005\f\u0005\u000e\u00055\u000b\u0005\u0003\u0005",
    "\u0005\u00058\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005>\n\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006L\n\u0006\u0003\u0006\u0002\u0002",
    "\u0007\u0002\u0004\u0006\b\n\u0002\u0002\u0002U\u0002\u000e\u0003\u0002",
    "\u0002\u0002\u0004 \u0003\u0002\u0002\u0002\u0006\"\u0003\u0002\u0002",
    "\u0002\b=\u0003\u0002\u0002\u0002\nK\u0003\u0002\u0002\u0002\f\u000f",
    "\u0005\u0004\u0003\u0002\r\u000f\u0005\b\u0005\u0002\u000e\f\u0003\u0002",
    "\u0002\u0002\u000e\r\u0003\u0002\u0002\u0002\u000f\u0003\u0003\u0002",
    "\u0002\u0002\u0010\u0011\u0007\u0003\u0002\u0002\u0011\u0016\u0005\u0006",
    "\u0004\u0002\u0012\u0013\u0007\u0004\u0002\u0002\u0013\u0015\u0005\u0006",
    "\u0004\u0002\u0014\u0012\u0003\u0002\u0002\u0002\u0015\u0018\u0003\u0002",
    "\u0002\u0002\u0016\u0014\u0003\u0002\u0002\u0002\u0016\u0017\u0003\u0002",
    "\u0002\u0002\u0017\u001a\u0003\u0002\u0002\u0002\u0018\u0016\u0003\u0002",
    "\u0002\u0002\u0019\u001b\u0007\u0004\u0002\u0002\u001a\u0019\u0003\u0002",
    "\u0002\u0002\u001a\u001b\u0003\u0002\u0002\u0002\u001b\u001c\u0003\u0002",
    "\u0002\u0002\u001c\u001d\u0007\u0005\u0002\u0002\u001d!\u0003\u0002",
    "\u0002\u0002\u001e\u001f\u0007\u0003\u0002\u0002\u001f!\u0007\u0005",
    "\u0002\u0002 \u0010\u0003\u0002\u0002\u0002 \u001e\u0003\u0002\u0002",
    "\u0002!\u0005\u0003\u0002\u0002\u0002\"#\u0007\f\u0002\u0002#$\b\u0004",
    "\u0001\u0002$%\u0007\u0006\u0002\u0002%&\u0005\n\u0006\u0002&\'\b\u0004",
    "\u0001\u0002\'\u0007\u0003\u0002\u0002\u0002()\u0007\u0007\u0002\u0002",
    ")*\b\u0005\u0001\u0002*+\u0005\n\u0006\u0002+3\b\u0005\u0001\u0002,",
    "-\u0007\u0004\u0002\u0002-.\b\u0005\u0001\u0002./\u0005\n\u0006\u0002",
    "/0\b\u0005\u0001\u000202\u0003\u0002\u0002\u00021,\u0003\u0002\u0002",
    "\u000225\u0003\u0002\u0002\u000231\u0003\u0002\u0002\u000234\u0003\u0002",
    "\u0002\u000247\u0003\u0002\u0002\u000253\u0003\u0002\u0002\u000268\u0007",
    "\u0004\u0002\u000276\u0003\u0002\u0002\u000278\u0003\u0002\u0002\u0002",
    "89\u0003\u0002\u0002\u00029:\u0007\b\u0002\u0002:>\u0003\u0002\u0002",
    "\u0002;<\u0007\u0007\u0002\u0002<>\u0007\b\u0002\u0002=(\u0003\u0002",
    "\u0002\u0002=;\u0003\u0002\u0002\u0002>\t\u0003\u0002\u0002\u0002?@",
    "\u0007\r\u0002\u0002@L\b\u0006\u0001\u0002AB\u0007\f\u0002\u0002BL\b",
    "\u0006\u0001\u0002CL\u0005\u0004\u0003\u0002DL\u0005\b\u0005\u0002E",
    "F\u0007\t\u0002\u0002FL\b\u0006\u0001\u0002GH\u0007\n\u0002\u0002HL",
    "\b\u0006\u0001\u0002IJ\u0007\u000b\u0002\u0002JL\b\u0006\u0001\u0002",
    "K?\u0003\u0002\u0002\u0002KA\u0003\u0002\u0002\u0002KC\u0003\u0002\u0002",
    "\u0002KD\u0003\u0002\u0002\u0002KE\u0003\u0002\u0002\u0002KG\u0003\u0002",
    "\u0002\u0002KI\u0003\u0002\u0002\u0002L\u000b\u0003\u0002\u0002\u0002",
    "\n\u000e\u0016\u001a 37=K"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'{'", "','", "'}'", "':'", "'['", "']'", "'true'", 
                     "'false'", "'null'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, "STRING", "NUMBER", "WHITESPACE", "MULTI_LINE_COMMENT", 
                      "SINGLE_LINE_COMMENT" ];

var ruleNames =  [ "json", "obj", "pair", "array", "value" ];

function JSONParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

JSONParser.prototype = Object.create(antlr4.Parser.prototype);
JSONParser.prototype.constructor = JSONParser;

Object.defineProperty(JSONParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

JSONParser.EOF = antlr4.Token.EOF;
JSONParser.T__0 = 1;
JSONParser.T__1 = 2;
JSONParser.T__2 = 3;
JSONParser.T__3 = 4;
JSONParser.T__4 = 5;
JSONParser.T__5 = 6;
JSONParser.T__6 = 7;
JSONParser.T__7 = 8;
JSONParser.T__8 = 9;
JSONParser.STRING = 10;
JSONParser.NUMBER = 11;
JSONParser.WHITESPACE = 12;
JSONParser.MULTI_LINE_COMMENT = 13;
JSONParser.SINGLE_LINE_COMMENT = 14;

JSONParser.RULE_json = 0;
JSONParser.RULE_obj = 1;
JSONParser.RULE_pair = 2;
JSONParser.RULE_array = 3;
JSONParser.RULE_value = 4;

function JsonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSONParser.RULE_json;
    this.ret = {}
    return this;
}

JsonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JsonContext.prototype.constructor = JsonContext;

JsonContext.prototype.obj = function() {
    return this.getTypedRuleContext(ObjContext,0);
};

JsonContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};




JSONParser.JsonContext = JsonContext;

JSONParser.prototype.json = function() {

    var localctx = new JsonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, JSONParser.RULE_json);
    try {
        this.state = 12;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSONParser.T__0:
            this.enterOuterAlt(localctx, 1);
            this.state = 10;
            this.obj(localctx.ret);
            break;
        case JSONParser.T__4:
            this.enterOuterAlt(localctx, 2);
            this.state = 11;
            this.array(localctx.ret);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjContext(parser, parent, invokingState, ret) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSONParser.RULE_obj;
    this.ret = null
    this.ret = ret || null;
    return this;
}

ObjContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjContext.prototype.constructor = ObjContext;

ObjContext.prototype.pair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PairContext);
    } else {
        return this.getTypedRuleContext(PairContext,i);
    }
};




JSONParser.ObjContext = ObjContext;

JSONParser.prototype.obj = function(ret) {

    var localctx = new ObjContext(this, this._ctx, this.state, ret);
    this.enterRule(localctx, 2, JSONParser.RULE_obj);
    localctx.ret.type="object"; localctx.ret.value=Object.create(null); getLoc(localctx,localctx.ret) 
    var _la = 0; // Token type
    try {
        this.state = 30;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 14;
            this.match(JSONParser.T__0);
            this.state = 15;
            this.pair(localctx.ret.value);
            this.state = 20;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 16;
                    this.match(JSONParser.T__1);
                    this.state = 17;
                    this.pair(localctx.ret.value); 
                }
                this.state = 22;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
            }

            this.state = 24;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JSONParser.T__1) {
                this.state = 23;
                this.match(JSONParser.T__1);
            }

            this.state = 26;
            this.match(JSONParser.T__2);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 28;
            this.match(JSONParser.T__0);
            this.state = 29;
            this.match(JSONParser.T__2);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        getLoc(localctx,localctx.ret)
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PairContext(parser, parent, invokingState, ret) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSONParser.RULE_pair;
    this.ret = null
    this.val = {}
    this._STRING = null; // Token
    this.ret = ret || null;
    return this;
}

PairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PairContext.prototype.constructor = PairContext;

PairContext.prototype.STRING = function() {
    return this.getToken(JSONParser.STRING, 0);
};

PairContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};




JSONParser.PairContext = PairContext;

JSONParser.prototype.pair = function(ret) {

    var localctx = new PairContext(this, this._ctx, this.state, ret);
    this.enterRule(localctx, 4, JSONParser.RULE_pair);
    getLoc(localctx,localctx.val)
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 32;
        localctx._STRING = this.match(JSONParser.STRING);

        this.state = 34;
        this.match(JSONParser.T__3);
        this.state = 35;
        this.value(localctx.val);
        localctx.ret[unquoteString((localctx._STRING===null ? null : localctx._STRING.text))]=localctx.val
        this._ctx.stop = this._input.LT(-1);
        getLoc(localctx,localctx.val)
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayContext(parser, parent, invokingState, ret) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSONParser.RULE_array;
    this.ret = null
    this.val = null
    this.ret = ret || null;
    return this;
}

ArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayContext.prototype.constructor = ArrayContext;

ArrayContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};




JSONParser.ArrayContext = ArrayContext;

JSONParser.prototype.array = function(ret) {

    var localctx = new ArrayContext(this, this._ctx, this.state, ret);
    this.enterRule(localctx, 6, JSONParser.RULE_array);
    localctx.ret.type="array"; localctx.ret.value={}; getLoc(localctx,localctx.ret); let ID=0;
    var _la = 0; // Token type
    try {
        this.state = 59;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 38;
            this.match(JSONParser.T__4);
            localctx.val={}
            this.state = 40;
            this.value(localctx.val);
            localctx.ret.value[ID++]=localctx.val
            this.state = 49;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 42;
                    this.match(JSONParser.T__1);
                    localctx.val={}
                    this.state = 44;
                    this.value(localctx.val);
                    localctx.ret.value[ID++]=localctx.val 
                }
                this.state = 51;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
            }

            this.state = 53;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===JSONParser.T__1) {
                this.state = 52;
                this.match(JSONParser.T__1);
            }

            this.state = 55;
            this.match(JSONParser.T__5);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 57;
            this.match(JSONParser.T__4);
            this.state = 58;
            this.match(JSONParser.T__5);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        getLoc(localctx,localctx.ret)
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueContext(parser, parent, invokingState, ret) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = JSONParser.RULE_value;
    this.ret = null
    this._NUMBER = null; // Token
    this._STRING = null; // Token
    this.ret = ret || null;
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.NUMBER = function() {
    return this.getToken(JSONParser.NUMBER, 0);
};

ValueContext.prototype.STRING = function() {
    return this.getToken(JSONParser.STRING, 0);
};

ValueContext.prototype.obj = function() {
    return this.getTypedRuleContext(ObjContext,0);
};

ValueContext.prototype.array = function() {
    return this.getTypedRuleContext(ArrayContext,0);
};




JSONParser.ValueContext = ValueContext;

JSONParser.prototype.value = function(ret) {

    var localctx = new ValueContext(this, this._ctx, this.state, ret);
    this.enterRule(localctx, 8, JSONParser.RULE_value);
    getLoc(localctx,localctx.ret)
    try {
        this.state = 73;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case JSONParser.NUMBER:
            this.enterOuterAlt(localctx, 1);
            this.state = 61;
            localctx._NUMBER = this.match(JSONParser.NUMBER);
            localctx.ret.type="number"; localctx.ret.value=unquoteNumber((localctx._NUMBER===null ? null : localctx._NUMBER.text)); 
            break;
        case JSONParser.STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 63;
            localctx._STRING = this.match(JSONParser.STRING);
            localctx.ret.type="string"; localctx.ret.value=unquoteString((localctx._STRING===null ? null : localctx._STRING.text)); 
            break;
        case JSONParser.T__0:
            this.enterOuterAlt(localctx, 3);
            this.state = 65;
            this.obj(localctx.ret);
            break;
        case JSONParser.T__4:
            this.enterOuterAlt(localctx, 4);
            this.state = 66;
            this.array(localctx.ret);
            break;
        case JSONParser.T__6:
            this.enterOuterAlt(localctx, 5);
            this.state = 67;
            this.match(JSONParser.T__6);
            localctx.ret.type="boolean"; localctx.ret.value=true;
            break;
        case JSONParser.T__7:
            this.enterOuterAlt(localctx, 6);
            this.state = 69;
            this.match(JSONParser.T__7);
            localctx.ret.type="boolean"; localctx.ret.value=false;
            break;
        case JSONParser.T__8:
            this.enterOuterAlt(localctx, 7);
            this.state = 71;
            this.match(JSONParser.T__8);
            localctx.ret.type="null"; localctx.ret.value=null;
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        getLoc(localctx,localctx.ret)
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.JSONParser = JSONParser;
