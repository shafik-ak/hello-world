const { createOptionProcessor } = require('./base/optionProcessorHelper');

// This option processor is used both by the command line parser (to translate cmd line options
// into an options object) and by the API functions (to verify options)
let optionProcessor = createOptionProcessor();

// General options
// FIXME: Since they mainly affect the compiler, they could also live near main.compile
optionProcessor
  .option('-h, --help')
  .option('-v, --version')
  .option('-w, --warning <level>', ['0', '1', '2'])
  .option('    --show-message-id')
  .option('    --show-message-context')
  .option('    --color <mode>', ['auto', 'always', 'never'])
  .option('-o, --out <dir>')
  .option('    --lint-mode')
  .option('    --fuzzy-csn-error')
  .option('    --trace-parser')
  .option('    --trace-parser-amb')
  .option('    --trace-fs')
  .option('-E, --enrich-csn')
  .option('-R, --raw-output <name>')
  .option('    --internal-msg')
  .option('    --beta-mode')
  .option('    --old-transformers')
  .option('    --new-csn')
  .option('    --old-csn')
  .option('    --std-json-parser')
  .option('    --long-autoexposed')
  .option('    --hana-flavor')
  .option('    --parse-only')
  .option('    --test-mode')
  .option('--precision <prec>')
  .option('--scale <scale>')
  .option('--length <length>')
  .help(`
  Usage: cdsc <command> [options] <file...>

  Compile a CDS model given from input <file...>s and generate results according to <command>.
  Input files may be CDS source files (.cds), CSN model files (.json) or pre-processed ODATA
  annotation XML files (.xml). Output depends on <command>, see below. If no command is given,
  "toCsn" is used by default.

  Use "cdsc <command> --help" to get more detailed help for each command.

  General options
   -h, --help               Show this help text
   -v, --version            Display version number and exit
   -w, --warning <level>    Show messages up to <level>
                              0: Error
                              1: Warnings
                              2: (default) Info
                              3: Debug
       --show-message-id    Show message ID in error, warning and info messages
       --show-message-context  Print messages as human readable text similar to Rust's compiler
                               (with code excerpt)
       --color <mode>       Use colors for warnings. Modes are:
                              auto: (default) Detect color support of the tty.
                              always:
                              never:
   -o, --out <dir>          Place generated files in directory <dir>, default is "-" for <stdout>
       --lint-mode          Generate nothing, just produce messages if any (for use by editors)
       --fuzzy-csn-error    Report free-style CSN properties as errors
       --                   Indicate the end of options (helpful if source names start with "-")

  Type options
       --precision <prec>   Default precision for 'cds.Decimal'
       --scale <scale>      Default scale for 'cds.Decimal'
       --length <length>    Default 'length' for 'cds.String'

  Diagnostic options
       --trace-parser       Trace parser
       --trace-parser-amb   Trace parser ambiguities
       --trace-fs           Trace file system access caused by "using from"

  Internal options (for testing only, may be changed/removed at any time)
   -E, --enrich-csn         Show non-enumerable CSN properties and locations of references
   -R, --raw-output <name>  Write XSN for definition "name" and error output to <stdout>,
                            with name = "+", write complete XSN, long!
       --internal-msg       Write raw messages with call stack to <stdout>/<stderr>
       --beta-mode          Enable unsupported, incomplete (beta) features
       --old-transformers   Use the old transformers that work on XSN instead of CSN
       --new-csn            Produce CSN version 1.0 format (default)
       --old-csn            Produce CSN version 0.1 format (deprecated, overrides --new-csn)
       --std-json-parser    Use standard JSON parser for CSN parsing
       --hana-flavor        Compile with backward compatibility for HANA CDS (incomplete)
       --parse-only         Stop compilation after parsing and write result to <stdout>
       --test-mode          Produce extra-stable output for automated tests (normalize filenames
                            in errors, sort properties in CSN, omit version in CSN)

  Backward compatibility options (deprecated, do not use)
       --long-autoexposed   Produce long names (with underscores) for autoexposed entities

  Commands
    H, toHana [options] <file...>     Generate HANA CDS source files
    O, toOdata [options] <file...>    Generate ODATA metadata and annotations
    C, toCdl <file...>                Generate CDS source files
    S, toSwagger [options] <file...>  Generate Swagger (OpenAPI) JSON
    Q, toSql [options] <file...>      Generate SQL DDL statements
       toCsn [options] <file...>      (default) Generate original model as CSN
       toRename [options] <file...>   (internal) Generate SQL DDL rename statements
`);

// ----------- toHana -----------
optionProcessor.command('H, toHana')
  .option('-h, --help')
  .option('-n, --names <style>', ['plain', 'quoted', 'hdbcds'])
  .option('-a, --associations <proc>', ['assocs', 'joins'])
  .option('-s, --src')
  .option('-c, --csn')
  .help(`
  Usage: cdsc toHana [options] <file...>

  Generate HANA CDS source files, or CSN.

  Options
   -h, --help                 Show this help text
   -n, --names <style>        Naming style for generated entity and element names:
                                plain  : (default) Produce HANA entity and element names in
                                         uppercase and flattened with underscores. Do not generate
                                         structured types.
                                quoted : Produce HANA entity and element names in original case as
                                         in CDL. Keep nested contexts (resulting in entity names
                                         with dots), but flatten element names with underscores.
                                         Generate structured types, too.
                                hdbcds : Produce HANA entity end element names as HANA CDS would
                                         generate them from the same CDS source (like "quoted", but
                                         using element names with dots).
   -a, --associations <proc>  Processing of associations:
                                assocs : (default) Keep associations in HANA CDS as far as possible
                                joins  : Transform associations to joins
   -s, --src                  (default) Generate HANA CDS source files "<artifact>.hdbcds"
   -c, --csn                  Generate "hana_csn.json" with HANA-preprocessed model
`);

optionProcessor.command('O, toOdata')
  .option('-h, --help')
  .option('-v, --version <version>', ['v2', 'v4'])
  .option('-x, --xml')
  .option('-j, --json')
  .option('    --separate')
  .option('    --combined')
  .option('-c, --csn')
  .option('-f, --odata-format <format>', ['flat', 'structured'])
  .option('-n, --names <style>', ['plain', 'quoted', 'hdbcds'])
  .help(`
  Usage: cdsc toOdata [options] <file...>

  Generate ODATA metadata and annotations, or CSN.

  Options
   -h, --help               Show this help text
   -v, --version <version>  ODATA version
                              v2: ODATA V2
                              v4: (default) ODATA V4
   -x, --xml                (default) Generate XML output (separate or combined)
   -j, --json               Generate JSON output as "<svc>.json" (not available for v2)
       --separate           Generate "<svc>_metadata.xml" and "<svc>_annotations.xml"
       --combined           (default) Generate "<svc>.xml"
   -c, --csn                Generate "odata_csn.json" with ODATA-preprocessed model
   -f, --odata-format <format>  Set the format of the identifier rendering
                                (ignored by '--old-transformers')
                                  flat       : (default) Flat type and property names
                                  structured : (V4 only) Render structured metadata
   -n, --names <style>      Annotate artifacts and elements with "@cds.persistence.name", which is
                            the corresponding database name (see "--names" for "toHana or "toSql")
                              plain   : (default) Names in uppercase and flattened with underscores
                              quoted  : Names in original case as in CDL. Entity names with dots,
                                        but element names flattened with underscores
                              hdbcds  : Names as HANA CDS would generate them from the same CDS
                                        source (like "quoted", but using element names with dots)
`);

optionProcessor.command('C, toCdl')
  .option('-h, --help')
  .help(`
  Usage: cdsc toCdl [options] <file...>

  Generate CDS source files "<artifact>.cds".

  Options
   -h, --help      Show this help text
`);

optionProcessor.command('S, toSwagger')
  .option('-h, --help')
  .option('-j, --json')
  .option('-c, --csn')
  .help(`
  Usage: cdsc toSwagger [options] <file...>

  Generate Swagger (OpenAPI) JSON, or CSN

  Options
   -h, --help  Show this help text
   -j, --json  (default) Generate OpenAPI JSON output for each service as "<svc>_swagger.json
   -c, --csn   Generate "swagger_csn.json" with Swagger-preprocessed model
`);

optionProcessor.command('Q, toSql')
  .option('-h, --help')
  .option('-n, --names <style>', ['plain', 'quoted', 'hdbcds'])
  .option('-a, --associations <proc>', ['assocs', 'joins'])
  .option('-d, --dialect <dialect>', ['hana', 'sqlite'])
  .option('-u, --user <user>')
  .option('-l, --locale <locale>')
  .option('-s, --src <style>', ['sql', 'hdi'])
  .option('-c, --csn')
.help(`
  Usage: cdsc toSql [options] <file...>

  Generate SQL DDL statements to create tables and views, or CSN

  Options
   -h, --help                 Show this help text
   -n, --names <style>        Naming style for generated entity and element names:
                                plain  : (default) Produce SQL table and view names in
                                         flattened with underscores format (no quotes required)
                                quoted : Produce SQL table and view names in original case as in
                                         CDL (with dots), but flatten element names with
                                         underscores (requires quotes). Can only be used in
                                         combination with "hana" dialect.
                                hdbcds : Produce SQL table, view and column names as HANA CDS would
                                         generate them from the same CDS source (like "quoted", but
                                         using element names with dots). Can only be used in
                                         combination with "hana" dialect.
   -a, --associations <proc>  Processing of associations:
                                assocs : Keep associations as far as possible. Note that some
                                         associations (e.g. those defined in a mixin and used in
                                         the same view) must always be replaced by joins because of
                                         SQL limitations, and that "assocs" should only be used
                                         with "hana" dialect.
                                joins  : (default) Transform associations to joins
   -d, --dialect <dialect>    SQL dialect to be generated:
                                hana   : SQL with HANA specific language features
                                sqlite : (default) Common SQL for sqlite
   -u, --user <user>          Value for the "$user" variable in "sqlite" dialect
   -l, --locale <locale>      Value for the "$user.locale" variable in "sqlite" dialect
   -s, --src <style>          Generate SQL source files as <artifact>.<suffix>
                                sql    : (default) <suffix> is "sql"
                                hdi    : HANA Deployment Infrastructure source files, <suffix> is
                                         the HDI plugin name. Can only be used in combination with
                                         "hana" dialect.
   -c, --csn                  Generate "sql_csn.json" with SQL-preprocessed model
`);

optionProcessor.command('toRename')
  .option('-h, --help')
  .option('-n, --names <style>', ['quoted', 'hdbcds'])
  .help(`
  Usage: cdsc toRename [options] <file...>

  (internal, subject to change): Generate SQL stored procedure containing DDL statements to
  "storedProcedure.sql" that allows to rename existing tables and their columns so that they
  match the result of "toHana" or "toSql" with the "--names plain" option.

  Options
   -h, --help           Display this help text
   -n, --names <style>  Assume existing tables were generated with "--names <style>":
                          quoted   : Assume existing SQL tables and views were named in original
                                     case as in CDL (with dots), but column names were flattened
                                     with underscores (e.g. resulting from "toHana --names quoted")
                          hdbcds   : (default) Assume existing SQL tables, views and columns were
                                     generated by HANA CDS from the same CDS source (or resulting
                                     from "toHana --names hdbcds")
`);

optionProcessor.command('toCsn')
  .option('-h, --help')
  .option('-f, --flavor <flavor>', ['client', 'gensrc'])
  .option('-a, --associations <proc>', ['assocs', 'joins'])
  .help(`
  Usage: cdsc toCsn [options] <file...>

  Generate original model as CSN to "csn.json"

  Options
   -h, --help             Show this help text
   -f, --flavor <flavor>  Generate CSN in one of two flavors:
                            client  : (default) Standard CSN consumable by clients and backends
                            gensrc  : CSN specifically for use as a source, e.g. for
                                      combination with additional "extend" or "annotate"
                                      statements, but not suitable for consumption by clients or
                                      backends
  -a, --associations <proc>  Processing of associations:
                            assocs : (default) Keep associations in HANA CDS as far as possible
                            joins  : Transform associations to joins
`);

module.exports = {
  optionProcessor
};
