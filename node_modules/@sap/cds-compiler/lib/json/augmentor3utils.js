function newUtils(model) {
  return {
    WILO_FULL: 0, // location of the first to the last token

    WILO_FIRST: 1, // location of the first token

    WILO_LAST: 2, // location of the first token

    setLocation: function(node, path, which=this.WILO_FULL) {
      if(node === undefined)
        return;
      if(node.location) // prevent double augmentation
        throw Error("Double augmentation: " + path.join("/"));
      let location = this.newLocation(path, which);
      if(location !== undefined)
        node.location = location;
    },

    newLocation: function (path, which=this.WILO_FULL) {
      let L = this._newLocation(path,which)
      this.setAugmented(L)
      return L;
    },

    _newFakeLocation() {
      return {
        filename: "<stdin>.csn",
        start: {line:1, column:1},
        $weak: true
      }
    },

    _newLocation: function (path, which=this.WILO_FULL) {

      function point(offset, line, column) {
        return {offset, line, column};
      }

      let locations = model.locations;
      if(locations===undefined)
        return this._newFakeLocation();
      if(path===undefined)
        throw Error("no path");
      let loc = locations.getPathLocation(path);
      if(which === this.WILO_FULL) {
        return {
          filename: locations.filename,
          start: point(loc.start.start, loc.start.line, loc.start.column),
          end: point(loc.stop.stop+1, loc.stop.line, loc.stop.column)
        }
      }
      if(which === this.WILO_FIRST) {
        return {
          filename: locations.filename,
          start: point(loc.start.start, loc.start.line, loc.start.column),
          end: point(loc.start.stop+1, loc.start.line, loc.start.column+(loc.start.stop-loc.start.start))
        }
      }
      if(which === this.WILO_LAST) {
        return {
          filename: locations.filename,
          start: point(loc.stop.start, loc.stop.line, loc.stop.column),
          end: point(loc.stop.stop+1, loc.stop.line, loc.stop.column+(loc.stop.stop-loc.stop.start))
        }
      }
      throw Error("newLocation: wrong modifier: "+which);
    },

    isAugmented: function (node) {
      if(!node)
        return false;
      return node.augmented===true;
    },

    unsetAugmented: function (node) {
      if(!(delete node.augmented))
        throw Error("unsetAugmented failed");
    },

    setAugmented: function (node) {
      if(node===undefined)
        return;
      // hidden property "augmented" which prevents recursive augmentation
      if(node===null)
        return;
      if(node.augmented!==undefined)
        throw Error("Internal property 'augmented' already exists");
      Object.defineProperty(node, "augmented", {
        enumerable: false,
        writable: false,
        configurable: true,
        value: true
      });
    },
    getLastElement: function (a) {
      return a[a.length-1];
    }
  }
} // newUtils

module.exports = newUtils;