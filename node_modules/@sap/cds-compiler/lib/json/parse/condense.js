/**
 * Transforms an augmented object with location structure to real object without locations.
 */

function toBasic(n) {
  if(n.type === 'object') return Object.create(null);
  if(n.type === 'array') return [];
  return n.value; // primitive
}

function toBasicNotNull(n) {
  if(n.type === 'object') return {};
  if(n.type === 'array') return [];
  return n.value; // primitive
}

function getValue(o) {
  return o.value;
}

/**
 * Strips the augmentation information out of the object structure.
 * @param augmentedObject is the object to process
 * @param options - provides processing options like:
 *  - notNull - create objects with a prototype instead of dictionaries
 * @returns real object structure without locations
*/
function condense(augmentedObject, options={}) {
  let W = require("../walker.js")
  return W.walkAndBuild(augmentedObject, getValue, options.notNull ? toBasicNotNull : toBasic);
}

module.exports = condense;
