/**
 * This module is used to perform validation a CSN model.
 * It exposts a validation function which accepts two parameters:
 *  1. csn - model to validate;
 *  2. options - optional parameter which provides parameters
 * As result it returns an array of errors which is empty if successful.
 */

const Messages = require("../../base/messages.js");

class InvalidCSN extends Error {
  constructor(msg, location, severity = 'Error') {
    super(msg);
    this.location = location;
    this.severity = severity;
  }
  toString() {
    return Messages.messageString(this);
  }
}

function newValidator(csn, options) {
  let newCsn=require("../csnVersion").isNewCSN(csn,options);
  if(newCsn) {
    let csnValidator = require("../../gen/csn")
    let ctx =  require("./context")(options)
    csnValidator(csn,ctx)
    ctx.messages.forEach(M => {
      let location = csn.locations.getPathLocation(M.path);
      let errorLocation = {
        filename: location.filename,
        start: location.start,
        end: location.stop
      };
      if(M.info)
        csn.messages.push(new InvalidCSN("Invalid CSN: "+M.message, errorLocation, "Info"));
      else
        csn.messages.push(new InvalidCSN("Invalid CSN: "+M.message, errorLocation));
    })
  }
}

function validateCSN(csn, options) {
  newValidator(csn,options);
  return csn.messages;
}

module.exports = validateCSN;