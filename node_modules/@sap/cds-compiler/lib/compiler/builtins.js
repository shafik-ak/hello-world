// The builtin artifacts of CDS

'use strict';

const { forEachInDict } = require('../base/dictionaries');

const core = {
  String: { parameters: [ 'length' ] },
  LargeString: {},
  Binary: { parameters: [ 'length' ] },
  LargeBinary: {},
  Decimal: { parameters: [ 'precision', 'scale' ] },
  DecimalFloat: {},
  Integer64: {},
  Integer: {},
  Double: {},
  Date: {},
  Time: {},
  DateTime: {},
  Timestamp: {},
  Boolean: {},
  UUID: {},
  Association: { internal: true },
  Composition: { internal: true },
};

const coreHana = {
  // ALPHANUM: { parameters: [ 'length' ] },
  SMALLINT: {},
  TINYINT: {},
  SMALLDECIMAL: {},
  REAL: {},
  CHAR: { parameters: [ 'length' ] },
  NCHAR: { parameters: [ 'length' ] },
  VARCHAR: { parameters: [ 'length' ] },
  CLOB: {},
  BINARY: { parameters: [ 'length' ] },
  // TODO: probably remove default for ST_POINT, ST_GEOMETRY (to be done in backend);
  ST_POINT: { parameters: [ { name: 'srid', literal: 'number', val: 0 } ] },
  ST_GEOMETRY: { parameters: [ { name: 'srid', literal: 'number', val: 0 } ] },
};

// const hana = {
//   BinaryFloat: {},
//   LocalDate: {},
//   LocalTime: {},
//   UTCDateTime: {},
//   UTCTimestamp: {},
//   WithStructuredPrivilegeCheck: { kind: 'annotation' },
//   hana: { kind: 'context' },
// };

const magicVariables = {        // in SQL-92
  CURRENT_DATE: {},
  CURRENT_TIME: {},
  CURRENT_TIMESTAMP: {},
  CURRENT_USER: {},
  SESSION_USER: {},
  SYSTEM_USER: {},  // not in HANA
  // SQL-92: USER - intentionally omitted (useful element name), most DB have USER()
  // SQL-92: VALUE - intentionally omitted (useful element name), which DB supports this?
  $user: {
    elements: { id: {}, locale: {} },
    $autoElement: 'id',
  },                  // CDS-specific, not part of SQL
  $at: {
    elements: { from: {}, to: {} },
  },
  $now: {},                   // Dito
};

// see lib/render/renderUtil.js for DB-specific magic vars, specified in CAP Cds via function

function initBuiltins( model ) {
  setMagicVariables( magicVariables );
  // namespace:"cds" stores the builtins ---
  const cds = createNamespace( 'cds', 'reserved' );
  // setProp( model.definitions, 'cds', cds );
  model.definitions.cds = cds; // not setProp - oData - TODO: still needed?
  model.$builtins = env( core, 'cds.', cds );
  model.$builtins.cds = cds;
  // namespace:"cds.hana" stores HANA-specific builtins ---
  const hana = createNamespace( 'cds.hana', 'reserved' );
  setProp( model.definitions, 'cds.hana', hana );
  model.$builtins.hana = hana;
  cds.artifacts.hana = hana;
  env( coreHana, 'cds.hana.', hana );
  // namespace:"localized" stores localized convenience views ---
  const localized = createNamespace( 'localized', true );
  model.definitions.localized = localized;
  model.$internal = { $frontend: '$internal' };
  return;

  function createNamespace( name, builtin ) {
    return {
      kind: 'namespace',
      name: { absolute: name, location: createDummyLocation() },
      blocks: [],
      artifacts: Object.create(null),
      builtin,
      location: createDummyLocation(),
    };
    // buitlin namespaces don't have a cds file, so no location available
    function createDummyLocation() {
      return {
        filename: '<built-in>',
        start: { offset: 0, line: 1, column: 1 },
        end: { offset: 0, line: 1, column: 1 },
      };
    }
  }

  function env( builtins, prefix, parent ) {
    const artifacts = Object.create(null);
    for (const name of Object.keys( builtins )) {
      const absolute = prefix + name;
      const art = {
        kind: 'type', builtin: true, name: { absolute }, type: { path: [ { id: absolute } ] },
      };
      setProp( art.type, '_artifact', art );
      if (parent)
        parent.artifacts[name] = art;
      setProp( art, '_finalType', art );
      setProp( art, '_deps', [] );
      Object.assign( art, builtins[name] );
      if (!art.internal)
        artifacts[name] = art;
      setProp( model.definitions, absolute, art );
    }
    return artifacts;
  }

  function setMagicVariables( builtins ) {
    const artifacts = Object.create(null);
    for (const name in builtins) {
      const magic = builtins[name];
      // TODO: rename to $builtinFunction
      const art = { kind: 'builtin', name: { id: name, element: name } };
      artifacts[name] = art;
      if (magic.elements)
        art.elements = forEachInDict( magic.elements, (e, n) => magicElement( e, n, art ));
      if (magic.$autoElement)
        art.$autoElement = magic.$autoElement;
      // setProp( art, '_finalType', art );
    }
    model.$magicVariables = { kind: '$magicVariables', artifacts };
  }

  function magicElement( spec, name, parent ) {
    const magic = {
      kind: 'builtin',
      name: { id: name, element: `${ parent.name.element }.${ name }` },
    };
    setProp( magic, '_parent', parent );
    // setProp( magic, '_finalType', magic );
    return magic;
  }
}

// Like `obj.prop = value`, but not contained in JSON / CSN
function setProp( obj, prop, value ) {
  Object.defineProperty( obj, prop, { value, configurable: true, writable: true } );
  return value;
}

module.exports = initBuiltins;
