'use strict';

/* eslint no-console:off */

const TableReporter = require('./tableReporter');
const JsonReporter = require('./jsonReporter');
const { createOptionProcessor } = require('../lib/base/optionProcessorHelper');

let optionProcessor = createOptionProcessor();

optionProcessor
  .option('-h, --help')
  .option('-t, --type <outputType>', ['table', 'json'])
  .option('-f  --filter <regex>')
  .option('    --test-only')
  .option('-l, --list')
  .option('    --system-info')
  .option('    --git-info')
  .help(`Usage: ./benchmarks.js [options]

Run benchmarks of cds-compiler. This is used to keep track of regressions over time.

Options
 -h, --help               Show this help text
 -t, --type <outputType>  Output type of benchmark results. Possible values are:;
                           table (default): as a human readable table
                           json:            as a JSON object
 -f, --filter <regex>     Filter the benchmarks to run. <regex> is a JavaScript regex,
                          e.g. 'parse.*'. Benchmarks are filtered by their identifier.
     --test-only          Run each benchmarks only once to test whether they all work.
 -l, --list               List all available benchmarks and don't run them.
     --system-info        Also output information about the user's system.
                          (only used for json output)
     --git-info           Also output information about the cds-compiler repository.
                          (only used for json output)
`);

let cli = optionProcessor.processCmdLine(process.argv);
cli.options.benchmarkReporter = (cli.options.type === 'json') ? JsonReporter : TableReporter;

if (cli.options.help) {
  console.log(optionProcessor.helpText);
  process.exit(0);
}

if (cli.unknownOptions.length || cli.errors.length > 1) {
  const out = process.stderr;
  cli.unknownOptions.forEach(msg => out.write(`benchmarks: ERROR: ${msg}\n`));
  // Currently "optionProcessorHelper" requires a file argument. We skip that warning.
  for(let i = 0; i < cli.errors.length - 1; i++) {
    out.write(`benchmarks: ERROR: ${cli.errors[i]}\n`);
  }
  cli.cmdErrors.forEach(msg => out.write(`benchmarks: ERROR: ${msg}\n`));
  out.write(`Print help using: ./benchmarks.js --help\n`);
  process.exit(1);
}

module.exports = cli;
