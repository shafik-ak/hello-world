const {
  ql: { DELETE, INSERT, SELECT, UPDATE }
} = require('../cds')

const _getCQN = (service, event, entity, columns) => {
  switch (event) {
    case 'READ':
      // Columns can also be defined
      return SELECT.from(entity, Array.isArray(columns) ? columns : undefined, service.model)
    case 'CREATE':
      return INSERT.into(entity)
    case 'UPDATE':
      return UPDATE(entity)
    case 'DELETE':
      return DELETE.from(entity)
  }
}

const _promisify = (service, event, entity, key) => {
  const cqn = _getCQN(service, event, entity, key)

  if (typeof key === 'object' && !Array.isArray(key) && cqn.where) {
    cqn.where(key)
  }

  cqn.then = (resolve, reject) => {
    return service
      .run(cqn)
      .then(resolve)
      .catch(reject)
  }
  cqn.catch = reject => {
    return service.run(cqn).catch(reject)
  }

  return cqn
}

const _create = (service, entity, data) => {
  return _promisify(service, 'CREATE', entity).entries(data)
}

const create = function (entity) {
  return _promisify(this, 'CREATE', entity)
}

const read = function (entity, key) {
  return _promisify(this, 'READ', entity, key)
}

const update = function (entity, key) {
  return _promisify(this, 'UPDATE', entity, key)
}

const deleteMethod = function (entity, key) {
  return _promisify(this, 'DELETE', entity, key)
}

const insert = function (data) {
  let _entity

  const insert = {
    into: entity => {
      _entity = entity

      return insert
    },
    then: (resolve, reject) => {
      return _create(this, _entity, data)
        .then(resolve, reject)
        .catch(reject)
    },
    catch: reject => {
      return _create(this, _entity, data).catch(reject)
    }
  }

  return insert
}

module.exports = {
  create,
  read,
  update,
  insert,
  delete: deleteMethod
}
