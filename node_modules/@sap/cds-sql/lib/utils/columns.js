const DRAFT_COLUMNS = [
  'IsActiveEntity',
  'HasActiveEntity',
  'HasDraftEntity',
  'DraftAdministrativeData_DraftUUID',
  'SiblingEntity',
  'DraftAdministrativeData'
]

const _isDraftEnabled = entity => {
  return Boolean(entity['@Common.DraftNode.PreparationAction'] || entity['@Common.DraftRoot.PreparationAction'])
}

const _filterAssociationAndComposition = (entity, columnName) => {
  return entity.elements[columnName].is2one !== true && entity.elements[columnName].is2many !== true
}
const _filterDraft = (entity, columnName) => {
  return DRAFT_COLUMNS.includes(columnName) !== true && _filterAssociationAndComposition(entity, columnName)
}

const _mapNameToValue = (entity, array) => array.map(key => entity.elements[key])

/**
 * This method gets all columns for an entity.
 * It includes the generated foreign keys from managed associations, structured elements and complex and custom types.
 * As well, it provides the annotations starting with '@' for each column.
 *
 * @param entity - the csn entity
 * @returns {Array} - array of columns
 */
const getColumns = entity => {
  const columnNames = Object.keys(entity.elements)

  if (_isDraftEnabled(entity)) {
    return _mapNameToValue(entity, columnNames.filter(key => _filterDraft(entity, key)))
  }

  return _mapNameToValue(entity, columnNames.filter(key => _filterAssociationAndComposition(entity, key)))
}

module.exports = getColumns
