const _backLinkCustom = (entityKey, targetKey, element, entityKeys) => {
  const backlink = {
    entityKey: entityKey.startsWith(`${element.name}.`) ? entityKey.replace(`${element.name}.`, '') : entityKey,
    targetKey: targetKey.startsWith(`${element.name}.`) ? targetKey.replace(`${element.name}.`, '') : targetKey,
    skip: true
  }

  if (element.parent.elements[backlink.targetKey] && element._target.elements[backlink.entityKey]) {
    return backlink
  } else if (element.parent.elements[backlink.entityKey] && element._target.elements[backlink.targetKey]) {
    return { entityKey: backlink.targetKey, targetKey: backlink.entityKey }
  }

  return backlink
}

const _backlinkForCustomOn = (element, entityKeys) => {
  if (!element.on) {
    return
  }
  const { entityKey, targetKey } = _onElements(element)
  return _backLinkCustom(entityKey, targetKey, element, entityKeys)
}

const _backlinkForCustomOnCond = (element, entityKeys) => {
  if (!element.onCond) {
    return
  }
  const { entityKey, targetKey } = _onCondElements(element)
  return _backLinkCustom(entityKey, targetKey, element, entityKeys)
}

const _backlinkName = (onCondElement1, onCondElement2) => {
  return onCondElement1 === '$self' ? onCondElement2 : onCondElement1
}

const _backLinkNameFromOn = element => {
  const onCondElement1 = element.on[0].ref.length === 2 ? element.on[0].ref[1] : element.on[0].ref[0]
  const onCondElement2 = element.on[2].ref.length === 2 ? element.on[2].ref[1] : element.on[2].ref[0]

  return _backlinkName(onCondElement1, onCondElement2)
}

const _cleanupOnCondElement = (element, onCondElement) => {
  return onCondElement.startsWith(`${element.name}.`) ? onCondElement.replace(`${element.name}.`, '') : onCondElement
}

const _onElements = element => {
  const entityKey = element.on[2].ref.join('.')
  const targetKey = element.on[0].ref.join('.')

  return { entityKey, targetKey }
}

const _onCondElements = element => {
  const entityKey = element.onCond.args[1]['=']
  const targetKey = element.onCond.args[0]['=']

  return { entityKey, targetKey }
}

const getOnCondElements = element => {
  if (element.on) {
    return _onElements(element)
  } else if (element.onCond && element.onCond.op === '=') {
    return _onCondElements(element)
  }
}

const _backLinkNameFromOnCond = element => {
  const onCondElement1 = _cleanupOnCondElement(element, element.onCond.args[0]['='])
  const onCondElement2 = _cleanupOnCondElement(element, element.onCond.args[1]['='])

  return _backlinkName(onCondElement1, onCondElement2)
}

const _isSelfManagedOn = on => {
  if (on.length > 2) {
    return on[0].ref[0] === '$self' || on[2].ref[0] === '$self'
  }

  return false
}

const _isSelfManagedOnCond = onCond => {
  if (onCond.args.length > 1) {
    return onCond.args[0]['='] === '$self' || onCond.args[1]['='] === '$self'
  }

  return false
}

const isSelfManaged = onCond => {
  if (onCond.on) {
    return _isSelfManagedOn(onCond.on)
  } else if (onCond.onCond) {
    // should not be null/undefined
    return _isSelfManagedOnCond(onCond.onCond)
  }
}

const _buildBacklinks = (prefix, entityKeys) => {
  const backLinks = []
  for (const entityKey of entityKeys) {
    if (entityKey === 'IsActiveEntity') {
      continue
    }
    backLinks.push({ entityKey: `${prefix}_${entityKey}`, targetKey: entityKey })
  }

  return backLinks
}

const _onBacklinks = (element, entityKeys) => {
  if (_isSelfManagedOn(element.on)) {
    const prefix = _backLinkNameFromOn(element)

    const customBacklink = _backlinkForCustomOn(element._target.elements[prefix], entityKeys)
    if (customBacklink) {
      return [{ entityKey: customBacklink.targetKey, targetKey: customBacklink.entityKey, skip: customBacklink.skip }]
    }

    return _buildBacklinks(prefix, entityKeys)
  } else {
    return [_backlinkForCustomOn(element, entityKeys)]
  }
}

const _onCondBacklinks = (element, entityKeys) => {
  if (_isSelfManagedOnCond(element.onCond)) {
    const prefix = _backLinkNameFromOnCond(element)

    const customBacklink = _backlinkForCustomOnCond(element._target.elements[prefix], entityKeys)
    if (customBacklink) {
      return [{ entityKey: customBacklink.targetKey, targetKey: customBacklink.entityKey, skip: customBacklink.skip }]
    }

    return _buildBacklinks(prefix, entityKeys)
  } else {
    return [_backlinkForCustomOnCond(element, entityKeys)]
  }
}

const getBackLinks = (element, entityKeys) => {
  if (element.on) {
    return _onBacklinks(element, entityKeys)
  } else if (element.onCond && element.onCond.op === '=') {
    return _onCondBacklinks(element, entityKeys)
  }

  return _buildBacklinks(element.name, entityKeys)
}

module.exports = {
  getBackLinks,
  isSelfManaged,
  getOnCondElements
}
