const { inspect } = require('util')
const cds = require ('../cds'), {extend} = cds

class Query {

    in (_context) { return this.set ({_context}) }

    constructor() {
        const _cmd = this.constructor.name
        this.set ({ _cmd, _cqn: this[_cmd] ={} })
    }
    add (properties) { extend (this._cqn) .with (properties); return this }
    set (properties) { extend (this) .with (properties); return this }

    target (_target) {
        const name = _target._entityName || _target.name || _target
        if (!name.split)  this._invalid({_target, expected:'a string, {name}, or {entityName}' })
        const ref = name.split('.')
        this.set ({ ref, _target })
        return {ref}
    }

    byKey (ID) {
        if (!ID)  return this
        if (typeof ID !== 'object') ID={ID}
        return this.where (ID)
    }

    // eslint-disable-next-line no-unused-vars
    where (...predicates) {

    }

    then (r,e) {
        const srv = !this._target._service ? cds.db : cds.connect.to (this._target._service)
        const tx = !this._context ? srv : srv.transaction (this._context)
        return tx.run (this) .then (r,e)
    }

    [inspect.custom]() {
        return inspect ({[this._cmd]:this._cqn}, {depth:11,colors:true})
    }

    _predicate4 (o) {
        const predicates = []
        for (let each in o) {
            predicates.push ('and', {ref:each.split('.')}, '=', {val:o[each]})
        }
        return predicates.slice(1)
    }

    _invalid (arg) {
        for (let first in arg) {
            let msg = `Invalid value for argument '${first}'`
            if ('index' in arg)  msg += ' at index '+ arg.index
            if ('expected' in arg)  msg += '.\nExpected '+ arg.expected +', but received'
            msg += ': '+ inspect (
                'index' in arg ? [ arg[first][arg.index] ] : arg[first]
            )
            throw new Error (msg)
        }
    }

    valueOf (prefix = this._cmd) { return `${prefix} ${slugify(this.ref)} ` }
}

const plain = ref => ref.join('_')
const quoted = ref => `"${ref.join('.')}"`
const slugify = { plain, quoted }[cds.env.sql_mapping] || plain

extend (Query.prototype) .with ({_isQuery:true})
module.exports = Query
