const path = require('path')
const BuildTaskHandler = require('./buildTaskHandler')
const { BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY } = require('./constants')

class BuildTaskHandlerOData extends BuildTaskHandler {
    constructor(name, task, buildOptions) {
        super(name, task, buildOptions)
        this._result = {
            dest: task.dest,
            csn: {},
            edmx: new Map(),
            languages: new Set(),
            services: new Set()
        }
    }

    async _compileCsn(model, csnDest) {
        // csn for service providers
        const csn = this.cds.compile.for.odata(model)
        this._result.csn = csn

        if (!this.hasBuildOption(BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY)) {
            await this.write(csn).to(path.join(csnDest, 'csn.json'))
        }
    }

    async _compileEdmx(model, edmxDest) {
        const promises = []
        const locales = this.cds.localize(model, this.task.options.lang || ['all'])

        if (locales) {
            for (let [localizedModel, {
                lang
            }] of locales) {
                this._result.languages.add(lang)
                let edmxModels = this.cds.compile.to.edmx(localizedModel, {
                    service: 'all'
                })
                if (edmxModels) {
                    for (let [edmx, {
                        name
                    }] of edmxModels) {
                        const nameWithLocale = name + (lang ? '_' + lang + '.xml' : '.xml')
                        this._result.edmx.set(nameWithLocale, edmx)
                        this._result.services.add(name)

                        if (!this.hasBuildOption(BUILD_OPTION_OUTPUT_MODE, OUTPUT_MODE_RESULT_ONLY)) {
                            promises.push(this.write(edmx).to(path.join(edmxDest, nameWithLocale)))
                        }
                    }
                }
            }
        }
        return Promise.all(promises)
    }
}
module.exports = BuildTaskHandlerOData
