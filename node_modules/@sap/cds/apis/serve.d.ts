import { Service, ServiceImpl } from "./services"
import { csn } from "./specs/CSN"
import { LinkedDefinition } from "./reflect"
declare namespace express { interface app{} }

// export const Service : _Service

interface _fluent {
	from (model : string | csn) : this
	to (protocol: string) : this
	at (path: string) : this
	in (app: express.app) : this
	with (impl: ServiceImpl | string) : this
	// (req,res) : void
}

export = _cds; type _cds = {

	/**
	 * Constructs service providers from respective service definitions
	 * @see [capire](https://github.wdf.sap.corp/pages/cap/node.js/api#cds-serve)
	 */
	serve (service : string) : _fluent & Promise<{ [name:string]: Service }>

	/**
	 * Dictionary of all services constructed and/or connected.
	 */
	services : { [name:string]: Service }

	/**
	 * Shortcut to base class for all service definitions from linked models.
	 * Plus accessors to impl functions and constructed providers.
	 */
	service : LinkedDefinition & {
		/**
		 * Dummy wrapper for service implementation functions.
		 * Use that in modules to get IntelliSense.
		 */
		impl (impl: ServiceImpl) : typeof impl
		impl <T> (srv:T, impl: ( this: T, srv: (T) ) => any) : typeof impl
		/**
		 * Array of all services constructed.
		 */
		providers : Service
	}

}
