const generator = require('@sap/generator-cds');
const cds = require('../lib/cds');

module.exports = Object.assign (_init, {
    options: generator.init.options,
    flags: generator.init.flags,
    help: generator.init.help.replace(/cds-gen/g, 'cds')
});

function _init(args, _options) {
  const options = { ...cds.env.init, ..._options }
  if (options.for && options.for.startsWith('vanilla')) return _vanilla (args, options)
  return generator.init.command.run(args, options, cds.env)
}

async function _vanilla ([dst='.'], options={}) {

  // prepare
  let { for:templates, force } = options
  let { stdin, stdout } = process
  let { path, fs } = cds.utils
  if (typeof templates === 'string')  templates = templates.split(/\s*,\s*/)
  stdout.write (`[cds] - initializing project in '${dst}' ... `)

  // check if dest exists
  const package_json = path.resolve (dst, 'package.json')
  if (!force && fs.isfile(package_json)) {
    const rl = require('readline') .createInterface (stdin,stdout)
    return rl.question(`
    WARNING: target folder '${dst}' exists with content!
    Do you really want to override? [yN]
    \n> `, input => { rl.close()
      if (input == 'y') return _vanilla ([dst],{ force:true, ...options })
    })
  }

  // create target folder and subfolders if necessary
  await fs.mkdirp (dst.endsWith('/') ? dst : dst += '/')
  for (let each of ['app','db','srv']) fs.mkdirp (dst+each,()=>{})
  // copy templates to dest
  const run = fs.promisify(require('child_process').exec)
  const from = src => path.resolve(__dirname,'init/templates',src)
  for (let each of templates) await run (
    `tar -cf - -C ${from(each)} . | tar -xpf - -C ${dst}`
  )
  // await Promise.all([ template, ...more ] .map (each => run(
  //   `tar -cf - -C ${from(each)} . | tar -xpf - -C ${dst}`
  // )))

  // update package.json
  const pj = { ...JSON.parse (fs.readFileSync(package_json)),
    name: dst
      .replace(/\.\/?$/, path.basename(process.cwd()))
      .replace(/^\.?\//,'') // leading / or ./
      .replace(/\/$/,'')  // trailing /
      .replace(/\//,'-'), // inner /
    author: require('os').userInfo().username
  }
  await cds.write (pj) .to (package_json)

  // done
  stdout.write (`/done.\n`)
}
