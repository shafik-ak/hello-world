const _checkHanaClient = () => {
  try {
    require.resolve('hdb')
  } catch (e) {
    try {
      require.resolve('@sap/hana-client')
    } catch (e) {
      return false
    }

    return true
  }

  return false
}

const _getCertificateValidation = allowedHost => {
  if (allowedHost) {
    return host => {
      if (host !== allowedHost) {
        throw new Error(
          `The name on the security certificate '${allowedHost}' is invalid or does not match the name of the site '${host}'.`
        )
      }
    }
  }

  return () => {}
}

const _isHanaClient = _checkHanaClient()

/**
 * Validates the connect and pool options and adds defaults if not given.
 * @param {Object} options - The db connection options.
 * @param {Object} options.credentials - The credentials.
 * @param {Object} [options.pool] - The min and max pool options.
 * @param {number} [options.pool.min] - The minimum number of db connection clients.
 * @param {number} [options.pool.max] - The maximum number of db connection clients.
 * @throws {Error} if security certificate validation fails
 */
const options = options => {
  options.pool.min = options.pool.min || 1
  options.pool.max = options.pool.max || 100
  options.pool.idleTimeoutMillisForPools = options.pool.idleTimeoutMillisForPools || 60000
  options.pool.evictionRunIntervalMillis = options.pool.evictionRunIntervalMillis || 10000

  if (!options.credentials) {
    return
  }

  if (!('ca' in options.credentials) && options.credentials.certificate) {
    options.credentials.ca = options.credentials.certificate
  }

  if ('encrypt' in options.credentials && !('useTLS' in options.credentials)) {
    options.credentials.useTLS = options.credentials.encrypt
  }

  if ('hostname_in_certificate' in options.credentials && !('sslHostNameInCertificate' in options.credentials)) {
    options.credentials.sslHostNameInCertificate = options.credentials.hostname_in_certificate
  }

  if ('validate_certificate' in options.credentials && !('sslValidateCertificate' in options.credentials)) {
    options.credentials.sslValidateCertificate = options.credentials.validate_certificate
  }

  if (!_isHanaClient && options.credentials.sslValidateCertificate === false) {
    options.credentials.checkServerIdentity = _getCertificateValidation(options.credentials.sslHostNameInCertificate)
  }
}

module.exports = options
