/**
 * TenantManager is a generic wrapper around InstanceManager or similar library.
 * Currently use InstanceManger as the only option.
 */
class TenantManager {
  /**
   * Create empty wrapper object and save options.
   * @param options
   */
  constructor (options) {
    this.options = options
  }

  /**
   * Used to initialize the instance manager only once.
   * @returns {Promise}
   * @private
   */
  _getInstanceManager () {
    return new Promise((resolve, reject) => {
      // require only when needed
      const options = Object.assign(this.options.credentials || this.options, {
        cache_max_items: 1,
        cache_item_expire_seconds: 1
      })
      const instanceManager = require('@sap/instance-manager')
      instanceManager.create(options, (err, instanceManager) => {
        if (err) {
          reject(err)
          return
        }

        this._instanceManager = instanceManager
        resolve()
      })
    })
  }

  _getInstanceCredentials (tenantId) {
    return new Promise((resolve, reject) => {
      this._instanceManager.get(tenantId, (err, instance) => {
        if (err) {
          reject(err)
          return
        }

        // TODO: return undefined for non-existing tenants ?
        if (!instance || !instance.credentials) {
          reject(new Error(`instance.credentials are missing for tenantId: ${tenantId}`))
          return
        }

        resolve(instance.credentials)
      })
    })
  }

  /**
   * Get credentials for a service by tenant id.
   * @param tenantId
   * @returns {*}
   */
  get (tenantId) {
    if (!this._instanceManager) {
      return this._getInstanceManager().then(() => {
        return this._getInstanceCredentials(tenantId)
      })
    }

    return this._getInstanceCredentials(tenantId)
  }

  /*
  upsert (tenantId, options) {
    // TODO
  }

  delete (tenantId) {
    // TODO
  }

  deploy () {
    // TODO
  } */
}

module.exports = TenantManager
