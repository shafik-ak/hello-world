"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var selectable_1 = require("../../selectable");
/**
 * Get an object containing the given Selectables as query parameter, or an empty object if none were given.
 * This retrieves where in addition to the selection (`select`) there is also an expansion (`expand`) needed.
 *
 * @typeparam EntityT Type of the entity to get the selection for
 * @param selects The list of selectables to be transformed to query parameters
 * @returns {Partial<SelectionQueryParameters>} An object containing the query parameters or an empty object
 */
function getQueryParametersForSelection(selects) {
    var queryParameters = {};
    if (selects && selects.length) {
        var selection = combineSelection(selects);
        if (selection.selects.length) {
            queryParameters.select = filterSelects(selection.selects).join(',');
        }
        if (selection.expands.length) {
            queryParameters.expand = selection.expands.join(',');
        }
    }
    return queryParameters;
}
exports.getQueryParametersForSelection = getQueryParametersForSelection;
function selectionLevel(select) {
    return select
        .split('/')
        .slice(0, -1)
        .join('/');
}
function filterSelects(selects) {
    var allFieldSelects = selects.filter(function (select) { return select.endsWith('*'); });
    var selectionLevels = allFieldSelects.map(function (select) { return selectionLevel(select); });
    return __spreadArrays(allFieldSelects, selects.filter(function (select) { return !selectionLevels.includes(selectionLevel(select)); }));
}
function combineSelection(selects, initialCombination, parent) {
    if (initialCombination === void 0) { initialCombination = {
        selects: [],
        expands: []
    }; }
    if (parent === void 0) { parent = ''; }
    return selects.reduce(function (combination, select) {
        var fullFieldName = getPath(parent, select.fieldName);
        if (select instanceof selectable_1.Link) {
            combination.expands.push(fullFieldName);
            if (select.selects.length) {
                return combineSelection(select.selects, combination, fullFieldName);
            }
            else {
                combination.selects.push(fullFieldName + "/*");
            }
        }
        else {
            combination.selects.push(fullFieldName);
        }
        return combination;
    }, initialCombination);
}
function getPath(parent, fieldName) {
    if (parent) {
        return parent + "/" + fieldName;
    }
    return fieldName;
}
//# sourceMappingURL=get-selection.js.map