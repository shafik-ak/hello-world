const promisify = require('../utils/promisifyCqn')

/**
 * Promisified function that creates READ CQN.
 * Usage: .get(CQN|entityName)
 *
 * @param {Object|String} query - CQN or entity name
 */
const get = function (query) {
  if (typeof query === 'string') {
    return this.run(`GET ${query}`, null, {}, 'rest')
  }

  return promisify(this, 'READ', query)
}

/**
 * Promisified function that creates INSERT CQN.
 * Usage: .post(CQN|entityName, values)
 *
 * @param {Object|String} query - CQN or entity name
 * @param {Array|Object} [data] - values to be inserted in case of string query
 */
const post = function (query, data) {
  if (typeof query === 'string') {
    return this.run(`POST ${query}`, data, {}, 'rest')
  }

  return promisify(this, 'CREATE', query)
}

/**
 * Promisified function that creates UPDATE CQN.
 * Usage: .put(CQN|entityName, values)
 *
 * @param {Object|String} query - CQN or entity name
 * @param {Object} [data] - values to be updated in case of string query
 */
const put = function (query, data) {
  if (typeof query === 'string') {
    return this.run(`PUT ${query}`, data, {}, 'rest')
  }

  return promisify(this, 'UPDATE', query)
}

/**
 * Promisified function that creates UPDATE CQN.
 * Usage: .patch(CQN|entityName, values)
 *
 * @param {Object|String} query - CQN or entity name
 * @param {Object} [data] - values to be updated in case of string query
 */
const patch = function (query, data) {
  if (typeof query === 'string') {
    return this.run(`PATCH ${query}`, data, {}, 'rest')
  }

  return promisify(this, 'UPDATE', query)
}

/**
 * Promisified function that creates DELETE CQN.
 * Usage: .delete(CQN|entityName, key)
 *
 * @param {Object|String} query - CQN or entity name
 * @param {Object} [data] - optional key for .where
 */
const del = function (query, data) {
  if (typeof query === 'string') {
    return this.run(`DELETE ${query}`, null, {}, 'rest')
  }

  return promisify(this, 'DELETE', query, data)
}

module.exports = {
  get,
  post,
  put,
  patch,
  delete: del
}
