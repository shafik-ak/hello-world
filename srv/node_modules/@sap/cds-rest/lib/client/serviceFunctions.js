const promisify = require('../utils/promisifyCqn')

const _create = (service, entity, data) => {
  return promisify(service, 'CREATE', entity).entries(data)
}

/**
 * Promisified function that creates INSERT CQN.
 * Usage: .create(entity).entries(values)
 *
 * @param {Object} entity - csn entity
 */
const create = function (entity) {
  return promisify(this, 'CREATE', entity)
}

/**
 * Promisified function that creates READ CQN.
 * Usage: .read(data).into(entity)
 *
 * @param {Object} entity - csn entity
 * @param {Object} [key] - optional key for .where
 */
const read = function (entity, key) {
  return promisify(this, 'READ', entity, key)
}

/**
 * Promisified function that creates UPDATE CQN.
 * Usage: .update(entity)
 *
 * @param {Object} entity - csn entity
 * @param {Object} [key] - optional key for .where
 */
const update = function (entity, key) {
  return promisify(this, 'UPDATE', entity, key)
}

/**
 * Promisified function that creates INSERT CQN.
 * Usage: .insert(values).into(entity)
 *
 * @param {Array|Object} data - Entries that will be inserted
 */
const insert = function (data) {
  let _entity

  const insert = {
    into: entity => {
      _entity = entity

      return insert
    },
    then: (resolve, reject) => {
      return _create(this, _entity, data)
        .then(resolve, reject)
        .catch(reject)
    },
    catch: reject => {
      return _create(this, _entity, data).catch(reject)
    }
  }

  return insert
}

module.exports = {
  create,
  read,
  update,
  insert
}
