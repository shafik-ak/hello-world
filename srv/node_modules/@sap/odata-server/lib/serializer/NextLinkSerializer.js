'use strict';

const QueryOptions = require('@sap/odata-commons').uri.UriInfo.QueryOptions;

/**
 * This class serializes a nextLink using the OdataRequest and a skiptoken provided by the application.
 */
class NextLinkSerializer {

    /**
     * Serializes a nextLink by concatenating parts of the request with the skiptoken query option.
     * @param {string} odataPath The url path segments of the request url that belong to odata
     * @param {?string} queryOptionsString The raw query string of the incoming request
     *                                      or null if no query string is present in the incoming request
     * @param {string} skiptoken The skiptoken that was provided by the application
     * @returns {string} The serialized nextLink
     */
    serializeNextLink(odataPath, queryOptionsString, skiptoken) {
        const urlEncodedSkiptoken = encodeURIComponent(skiptoken);
        const skipTokenQueryOption = QueryOptions.SKIPTOKEN + '=' + urlEncodedSkiptoken;
        const queryOptions = this._removeSkiptoken(queryOptionsString);
        return odataPath
            + (queryOptions ? queryOptions + '&' : '?')
            + skipTokenQueryOption;
    }

    /**
     * Removes the query option $skiptoken from the query-options string.
     * @param {?string} queryOptionsString the query options as string
     * @returns {?string} query options without $skiptoken
     * @private
     */
    _removeSkiptoken(queryOptionsString) {
        if (!queryOptionsString) return null;
        let queryOptions = queryOptionsString
            .substring(1)
            .split('&');
        const newQueryOptions = queryOptions
            .filter(queryOption => !(queryOption.startsWith('$skiptoken'))).join('&');
        return newQueryOptions ? '?' + newQueryOptions : newQueryOptions;
    }
}

module.exports = NextLinkSerializer;
