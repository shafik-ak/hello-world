// Generated from language.g4 by ANTLR 4.7.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var genericAntlrParser = require('./genericAntlrParser').genericAntlrParser;

var grammarFileName = "language.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00dd\u0d0d\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0003\u0002\u0007\u0002\u0110\n\u0002",
    "\f\u0002\u000e\u0002\u0113\u000b\u0002\u0003\u0002\u0003\u0002\u0003",
    "\u0002\u0007\u0002\u0118\n\u0002\f\u0002\u000e\u0002\u011b\u000b\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002\u0120\n\u0002\f\u0002",
    "\u000e\u0002\u0123\u000b\u0002\u0005\u0002\u0125\n\u0002\u0003\u0002",
    "\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u0140\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u0145\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0007\u0006\u014d\n\u0006\f\u0006\u000e\u0006",
    "\u0150\u000b\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u0156\n\u0006\u0005\u0006\u0158\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0005\u0007\u0162\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u0168",
    "\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005\t\u016f\n\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0005\t\u0175\n\t\u0003\n\u0003\n\u0003\n",
    "\u0003\n\u0003\n\u0003\n\u0007\n\u017d\n\n\f\n\u000e\n\u0180\u000b\n",
    "\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u018c\n\u000b",
    "\u0003\u000b\u0003\u000b\u0005\u000b\u0190\n\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u019a\n\f\u0003\f",
    "\u0003\f\u0003\f\u0003\f\u0005\f\u01a0\n\f\u0005\f\u01a2\n\f\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u01ac",
    "\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u01b2\n\r\u0005\r\u01b4",
    "\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e\u01b9\n\u000e\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u01bd\n\u000f\u0003\u0010\u0007\u0010",
    "\u01c0\n\u0010\f\u0010\u000e\u0010\u01c3\u000b\u0010\u0003\u0010\u0005",
    "\u0010\u01c6\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01d0\n",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01dc",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01e1\n\u0010",
    "\u0003\u0011\u0003\u0011\u0005\u0011\u01e5\n\u0011\u0003\u0011\u0005",
    "\u0011\u01e8\n\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011",
    "\u01ed\n\u0011\f\u0011\u000e\u0011\u01f0\u000b\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u01f7\n\u0011",
    "\f\u0011\u000e\u0011\u01fa\u000b\u0011\u0005\u0011\u01fc\n\u0011\u0003",
    "\u0011\u0003\u0011\u0007\u0011\u0200\n\u0011\f\u0011\u000e\u0011\u0203",
    "\u000b\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0208\n",
    "\u0011\u0003\u0012\u0003\u0012\u0005\u0012\u020c\n\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0212\n\u0012\u0003",
    "\u0012\u0007\u0012\u0215\n\u0012\f\u0012\u000e\u0012\u0218\u000b\u0012",
    "\u0003\u0012\u0003\u0012\u0007\u0012\u021c\n\u0012\f\u0012\u000e\u0012",
    "\u021f\u000b\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0224",
    "\n\u0012\u0003\u0013\u0005\u0013\u0227\n\u0013\u0003\u0013\u0005\u0013",
    "\u022a\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007",
    "\u0013\u0230\n\u0013\f\u0013\u000e\u0013\u0233\u000b\u0013\u0003\u0013",
    "\u0005\u0013\u0236\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0007\u0013\u023d\n\u0013\f\u0013\u000e\u0013\u0240",
    "\u000b\u0013\u0005\u0013\u0242\n\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0006\u0013\u0247\n\u0013\r\u0013\u000e\u0013\u0248\u0005\u0013",
    "\u024b\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0006",
    "\u0013\u0251\n\u0013\r\u0013\u000e\u0013\u0252\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u0257\n\u0013\u0003\u0013\u0005\u0013\u025a\n\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0006\u0013\u0263\n\u0013\r\u0013\u000e\u0013\u0264\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u026b\n\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0006\u0013\u0272",
    "\n\u0013\r\u0013\u000e\u0013\u0273\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u0278\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u027c\n\u0013\u0005",
    "\u0013\u027e\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0288\n",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005",
    "\u0014\u028f\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014",
    "\u0294\n\u0014\f\u0014\u000e\u0014\u0297\u000b\u0014\u0003\u0014\u0005",
    "\u0014\u029a\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0007\u0014\u02a2\n\u0014\f\u0014\u000e\u0014",
    "\u02a5\u000b\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u02a9\n\u0014",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0007\u0016\u02af\n",
    "\u0016\f\u0016\u000e\u0016\u02b2\u000b\u0016\u0003\u0016\u0005\u0016",
    "\u02b5\n\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u02bc\n\u0016\u0003\u0016\u0003\u0016\u0007\u0016",
    "\u02c0\n\u0016\f\u0016\u000e\u0016\u02c3\u000b\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0007\u0016\u02cb",
    "\n\u0016\f\u0016\u000e\u0016\u02ce\u000b\u0016\u0005\u0016\u02d0\n\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0007\u0017\u02d8\n\u0017\f\u0017\u000e\u0017\u02db\u000b\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u02e1\n\u0017",
    "\u0003\u0017\u0007\u0017\u02e4\n\u0017\f\u0017\u000e\u0017\u02e7\u000b",
    "\u0017\u0003\u0017\u0005\u0017\u02ea\n\u0017\u0003\u0018\u0003\u0018",
    "\u0007\u0018\u02ee\n\u0018\f\u0018\u000e\u0018\u02f1\u000b\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u02f7\n\u0018",
    "\f\u0018\u000e\u0018\u02fa\u000b\u0018\u0003\u0018\u0005\u0018\u02fd",
    "\n\u0018\u0003\u0018\u0005\u0018\u0300\n\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0007\u0018\u0306\n\u0018\f\u0018\u000e\u0018",
    "\u0309\u000b\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u030d\n\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u0314\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u031b\n\u0019\u0003\u0019\u0007\u0019\u031e\n\u0019",
    "\f\u0019\u000e\u0019\u0321\u000b\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0007\u0019\u0328\n\u0019\f\u0019\u000e",
    "\u0019\u032b\u000b\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0006\u0019\u0331\n\u0019\r\u0019\u000e\u0019\u0332\u0003\u0019\u0003",
    "\u0019\u0005\u0019\u0337\n\u0019\u0003\u0019\u0003\u0019\u0003\u0019",
    "\u0003\u0019\u0003\u0019\u0006\u0019\u033e\n\u0019\r\u0019\u000e\u0019",
    "\u033f\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0346",
    "\n\u0019\u0003\u001a\u0007\u001a\u0349\n\u001a\f\u001a\u000e\u001a\u034c",
    "\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0007\u001a",
    "\u0352\n\u001a\f\u001a\u000e\u001a\u0355\u000b\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0005\u001a\u035a\n\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0007\u001a\u0360\n\u001a\f\u001a\u000e\u001a",
    "\u0363\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0368",
    "\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b",
    "\u036e\n\u001b\f\u001b\u000e\u001b\u0371\u000b\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0005\u001b\u0376\n\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0007\u001b\u037c\n\u001b\f\u001b\u000e\u001b",
    "\u037f\u000b\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0384",
    "\n\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007\u001c",
    "\u038a\n\u001c\f\u001c\u000e\u001c\u038d\u000b\u001c\u0003\u001c\u0005",
    "\u001c\u0390\n\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0399\n\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u039e\n\u001d\f\u001d\u000e",
    "\u001d\u03a1\u000b\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0007\u001f\u03ae\n\u001f\f\u001f\u000e\u001f\u03b1\u000b",
    "\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003",
    "!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0007\"\u03c1\n\"\f\"",
    "\u000e\"\u03c4\u000b\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0007",
    "\"\u03cb\n\"\f\"\u000e\"\u03ce\u000b\"\u0003\"\u0003\"\u0003\"\u0005",
    "\"\u03d3\n\"\u0003\"\u0007\"\u03d6\n\"\f\"\u000e\"\u03d9\u000b\"\u0003",
    "\"\u0003\"\u0007\"\u03dd\n\"\f\"\u000e\"\u03e0\u000b\"\u0003\"\u0003",
    "\"\u0003\"\u0005\"\u03e5\n\"\u0005\"\u03e7\n\"\u0003#\u0003#\u0003#",
    "\u0003#\u0005#\u03ed\n#\u0003#\u0007#\u03f0\n#\f#\u000e#\u03f3\u000b",
    "#\u0003#\u0003#\u0007#\u03f7\n#\f#\u000e#\u03fa\u000b#\u0003#\u0003",
    "#\u0003#\u0003#\u0007#\u0400\n#\f#\u000e#\u0403\u000b#\u0003#\u0005",
    "#\u0406\n#\u0003#\u0003#\u0003#\u0003#\u0007#\u040c\n#\f#\u000e#\u040f",
    "\u000b#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u0418",
    "\n#\f#\u000e#\u041b\u000b#\u0003#\u0003#\u0003#\u0003#\u0007#\u0421",
    "\n#\f#\u000e#\u0424\u000b#\u0003#\u0003#\u0003#\u0005#\u0429\n#\u0003",
    "#\u0003#\u0003#\u0007#\u042e\n#\f#\u000e#\u0431\u000b#\u0003#\u0003",
    "#\u0003#\u0005#\u0436\n#\u0003$\u0007$\u0439\n$\f$\u000e$\u043c\u000b",
    "$\u0003$\u0003$\u0003$\u0007$\u0441\n$\f$\u000e$\u0444\u000b$\u0003",
    "$\u0003$\u0007$\u0448\n$\f$\u000e$\u044b\u000b$\u0003$\u0003$\u0003",
    "$\u0005$\u0450\n$\u0003%\u0007%\u0453\n%\f%\u000e%\u0456\u000b%\u0003",
    "%\u0003%\u0003%\u0007%\u045b\n%\f%\u000e%\u045e\u000b%\u0003%\u0003",
    "%\u0003%\u0003%\u0003%\u0007%\u0465\n%\f%\u000e%\u0468\u000b%\u0003",
    "%\u0003%\u0005%\u046c\n%\u0003%\u0003%\u0003%\u0007%\u0471\n%\f%\u000e",
    "%\u0474\u000b%\u0003%\u0003%\u0003%\u0005%\u0479\n%\u0003&\u0007&\u047c",
    "\n&\f&\u000e&\u047f\u000b&\u0003&\u0003&\u0003&\u0007&\u0484\n&\f&\u000e",
    "&\u0487\u000b&\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u048d\n\'\f\'",
    "\u000e\'\u0490\u000b\'\u0003\'\u0005\'\u0493\n\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u049e\n(\u0003",
    "(\u0007(\u04a1\n(\f(\u000e(\u04a4\u000b(\u0003(\u0003(\u0003)\u0007",
    ")\u04a9\n)\f)\u000e)\u04ac\u000b)\u0003)\u0003)\u0003)\u0007)\u04b1",
    "\n)\f)\u000e)\u04b4\u000b)\u0003)\u0003)\u0003)\u0003)\u0007)\u04ba",
    "\n)\f)\u000e)\u04bd\u000b)\u0005)\u04bf\n)\u0003)\u0003)\u0003*\u0007",
    "*\u04c4\n*\f*\u000e*\u04c7\u000b*\u0003*\u0003*\u0003*\u0005*\u04cc",
    "\n*\u0003+\u0007+\u04cf\n+\f+\u000e+\u04d2\u000b+\u0003+\u0003+\u0003",
    ",\u0003,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u04dd\n,\u0003,\u0005",
    ",\u04e0\n,\u0003,\u0003,\u0003,\u0003,\u0003,\u0005,\u04e7\n,\u0005",
    ",\u04e9\n,\u0003,\u0003,\u0003,\u0003,\u0005,\u04ef\n,\u0003,\u0003",
    ",\u0003-\u0006-\u04f4\n-\r-\u000e-\u04f5\u0003-\u0003-\u0003.\u0005",
    ".\u04fb\n.\u0003.\u0005.\u04fe\n.\u0003.\u0005.\u0501\n.\u0003.\u0005",
    ".\u0504\n.\u0003.\u0003.\u0003.\u0007.\u0509\n.\f.\u000e.\u050c\u000b",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u0513\n.\u0003.\u0003.\u0003",
    ".\u0005.\u0518\n.\u0003.\u0005.\u051b\n.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0005.\u0536\n.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u053d",
    "\n.\u0003.\u0003.\u0007.\u0541\n.\f.\u000e.\u0544\u000b.\u0003.\u0003",
    ".\u0007.\u0548\n.\f.\u000e.\u054b\u000b.\u0003.\u0003.\u0003.\u0006",
    ".\u0550\n.\r.\u000e.\u0551\u0003.\u0003.\u0005.\u0556\n.\u0005.\u0558",
    "\n.\u0005.\u055a\n.\u0003.\u0003.\u0003.\u0003.\u0005.\u0560\n.\u0003",
    ".\u0007.\u0563\n.\f.\u000e.\u0566\u000b.\u0003.\u0003.\u0003.\u0003",
    ".\u0003.\u0003.\u0007.\u056e\n.\f.\u000e.\u0571\u000b.\u0003.\u0003",
    ".\u0007.\u0575\n.\f.\u000e.\u0578\u000b.\u0005.\u057a\n.\u0003.\u0003",
    ".\u0003.\u0003.\u0007.\u0580\n.\f.\u000e.\u0583\u000b.\u0003.\u0003",
    ".\u0003.\u0006.\u0588\n.\r.\u000e.\u0589\u0003.\u0003.\u0005.\u058e",
    "\n.\u0003.\u0005.\u0591\n.\u0003.\u0003.\u0007.\u0595\n.\f.\u000e.\u0598",
    "\u000b.\u0005.\u059a\n.\u0003.\u0003.\u0005.\u059e\n.\u0003.\u0003.",
    "\u0005.\u05a2\n.\u0003.\u0003.\u0003.\u0007.\u05a7\n.\f.\u000e.\u05aa",
    "\u000b.\u0003.\u0003.\u0005.\u05ae\n.\u0003/\u0005/\u05b1\n/\u0003/",
    "\u0003/\u0003/\u0003/\u00030\u00070\u05b8\n0\f0\u000e0\u05bb\u000b0",
    "\u00030\u00050\u05be\n0\u00030\u00030\u00030\u00030\u00030\u00030\u0003",
    "0\u00030\u00050\u05c8\n0\u00030\u00030\u00030\u00030\u00050\u05ce\n",
    "0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u05d8",
    "\n0\u00030\u00030\u00050\u05dc\n0\u00030\u00070\u05df\n0\f0\u000e0\u05e2",
    "\u000b0\u00030\u00030\u00030\u00030\u00030\u00030\u00030\u00050\u05eb",
    "\n0\u00030\u00030\u00050\u05ef\n0\u00031\u00031\u00031\u00031\u0003",
    "1\u00071\u05f6\n1\f1\u000e1\u05f9\u000b1\u00051\u05fb\n1\u00031\u0003",
    "1\u00032\u00072\u0600\n2\f2\u000e2\u0603\u000b2\u00032\u00032\u0003",
    "2\u00072\u0608\n2\f2\u000e2\u060b\u000b2\u00032\u00032\u00052\u060f",
    "\n2\u00032\u00072\u0612\n2\f2\u000e2\u0615\u000b2\u00033\u00033\u0003",
    "3\u00033\u00033\u00073\u061c\n3\f3\u000e3\u061f\u000b3\u00053\u0621",
    "\n3\u00033\u00033\u00034\u00074\u0626\n4\f4\u000e4\u0629\u000b4\u0003",
    "4\u00034\u00034\u00074\u062e\n4\f4\u000e4\u0631\u000b4\u00034\u0003",
    "4\u00035\u00035\u00035\u00035\u00035\u00055\u063a\n5\u00036\u00036\u0003",
    "6\u00036\u00036\u00056\u0641\n6\u00036\u00036\u00036\u00036\u00036\u0005",
    "6\u0648\n6\u00036\u00036\u00036\u00036\u00036\u00036\u00056\u0650\n",
    "6\u00036\u00056\u0653\n6\u00036\u00036\u00036\u00036\u00036\u00056\u065a",
    "\n6\u00056\u065c\n6\u00036\u00036\u00056\u0660\n6\u00036\u00036\u0005",
    "6\u0664\n6\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00057\u0688\n7\u00077\u068a\n",
    "7\f7\u000e7\u068d\u000b7\u00037\u00037\u00037\u00057\u0692\n7\u0003",
    "7\u00037\u00038\u00038\u00038\u00038\u00078\u069a\n8\f8\u000e8\u069d",
    "\u000b8\u00038\u00038\u00038\u00038\u00038\u00038\u00078\u06a5\n8\f",
    "8\u000e8\u06a8\u000b8\u00058\u06aa\n8\u00038\u00038\u00038\u00038\u0003",
    "8\u00039\u00039\u00039\u00039\u00059\u06b5\n9\u00039\u00039\u00039\u0003",
    "9\u00039\u00079\u06bc\n9\f9\u000e9\u06bf\u000b9\u00039\u00039\u0005",
    "9\u06c3\n9\u00039\u00039\u0003:\u0005:\u06c8\n:\u0003:\u0005:\u06cb",
    "\n:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0007:\u06da\n:\f:\u000e:\u06dd\u000b:\u0003",
    ":\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003",
    "<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003>\u0003>\u0005",
    ">\u06f3\n>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005",
    ">\u06fd\n>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005",
    ">\u0707\n>\u0003>\u0003>\u0007>\u070b\n>\f>\u000e>\u070e\u000b>\u0003",
    ">\u0003>\u0003>\u0003>\u0005>\u0714\n>\u0003>\u0003>\u0003>\u0003?\u0003",
    "?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0007@\u0725\n@\f@\u000e@\u0728\u000b@\u0003@\u0003@\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0007A\u073b\nA\fA\u000eA\u073e\u000bA\u0003",
    "A\u0005A\u0741\nA\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0005A\u074b\nA\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003",
    "A\u0003A\u0003A\u0005A\u0775\nA\u0003A\u0003A\u0005A\u0779\nA\u0005",
    "A\u077b\nA\u0003A\u0005A\u077e\nA\u0003B\u0003B\u0003B\u0003C\u0003",
    "C\u0003C\u0003C\u0003C\u0003C\u0003C\u0005C\u078a\nC\u0005C\u078c\n",
    "C\u0003D\u0003D\u0003D\u0005D\u0791\nD\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0003D\u0003D\u0005D\u079a\nD\u0003D\u0003D\u0003D\u0003D\u0003D\u0005",
    "D\u07a1\nD\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003",
    "E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u07b1\nE\u0005E\u07b3\n",
    "E\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u07c4\nF\u0005F\u07c6\n",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0005F\u07d0",
    "\nF\u0003F\u0003F\u0003G\u0003G\u0003G\u0005G\u07d7\nG\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0007J\u07ec\nJ\f",
    "J\u000eJ\u07ef\u000bJ\u0003K\u0003K\u0003K\u0003K\u0003K\u0003K\u0003",
    "K\u0005K\u07f8\nK\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0003",
    "L\u0005L\u0802\nL\u0003L\u0003L\u0003M\u0003M\u0007M\u0808\nM\fM\u000e",
    "M\u080b\u000bM\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003",
    "O\u0003O\u0003O\u0003O\u0003O\u0003O\u0007O\u081a\nO\fO\u000eO\u081d",
    "\u000bO\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003",
    "P\u0003P\u0003P\u0003P\u0003P\u0003P\u0003P\u0005P\u082e\nP\u0003P\u0003",
    "P\u0005P\u0832\nP\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0005",
    "Q\u083b\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u0843\n",
    "R\u0003S\u0006S\u0846\nS\rS\u000eS\u0847\u0003S\u0003S\u0003T\u0003",
    "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003",
    "T\u0003T\u0003T\u0005T\u085a\nT\u0003U\u0003U\u0003U\u0003U\u0003U\u0003",
    "U\u0003V\u0005V\u0863\nV\u0003V\u0003V\u0003V\u0003V\u0003V\u0003W\u0003",
    "W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003",
    "X\u0006X\u0876\nX\rX\u000eX\u0877\u0003X\u0003X\u0005X\u087c\nX\u0005",
    "X\u087e\nX\u0005X\u0880\nX\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0006Y\u088b\nY\rY\u000eY\u088c\u0003Y\u0003",
    "Y\u0003Y\u0005Y\u0892\nY\u0005Y\u0894\nY\u0003Y\u0003Y\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005",
    "Z\u08a3\nZ\u0003Z\u0005Z\u08a6\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u08b2\nZ\fZ\u000eZ\u08b5",
    "\u000bZ\u0003Z\u0003Z\u0003Z\u0003Z\u0007Z\u08bb\nZ\fZ\u000eZ\u08be",
    "\u000bZ\u0003Z\u0003Z\u0003Z\u0006Z\u08c3\nZ\rZ\u000eZ\u08c4\u0003Z",
    "\u0003Z\u0003Z\u0003Z\u0005Z\u08cb\nZ\u0005Z\u08cd\nZ\u0003Z\u0003Z",
    "\u0007Z\u08d1\nZ\fZ\u000eZ\u08d4\u000bZ\u0003Z\u0003Z\u0003Z\u0003Z",
    "\u0003Z\u0003Z\u0007Z\u08dc\nZ\fZ\u000eZ\u08df\u000bZ\u0003Z\u0003Z",
    "\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0007",
    "Z\u08ec\nZ\fZ\u000eZ\u08ef\u000bZ\u0003Z\u0003Z\u0007Z\u08f3\nZ\fZ\u000e",
    "Z\u08f6\u000bZ\u0003Z\u0003Z\u0003Z\u0006Z\u08fb\nZ\rZ\u000eZ\u08fc",
    "\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0903\nZ\u0003Z\u0007Z\u0906\nZ",
    "\fZ\u000eZ\u0909\u000bZ\u0003Z\u0003Z\u0003Z\u0006Z\u090e\nZ\rZ\u000e",
    "Z\u090f\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0916\nZ\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0007Z\u091c\nZ\fZ\u000eZ\u091f\u000bZ\u0003Z\u0003Z\u0003",
    "Z\u0005Z\u0924\nZ\u0005Z\u0926\nZ\u0005Z\u0928\nZ\u0003[\u0003[\u0003",
    "[\u0007[\u092d\n[\f[\u000e[\u0930\u000b[\u0003[\u0003[\u0003\\\u0003",
    "\\\u0003\\\u0007\\\u0937\n\\\f\\\u000e\\\u093a\u000b\\\u0003\\\u0003",
    "\\\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0006",
    "]\u0947\n]\r]\u000e]\u0948\u0003]\u0003]\u0005]\u094d\n]\u0005]\u094f",
    "\n]\u0003^\u0003^\u0005^\u0953\n^\u0003^\u0003^\u0003^\u0003^\u0005",
    "^\u0959\n^\u0003^\u0003^\u0005^\u095d\n^\u0003^\u0003^\u0003_\u0003",
    "_\u0003_\u0003_\u0003_\u0007_\u0966\n_\f_\u000e_\u0969\u000b_\u0003",
    "_\u0003_\u0003_\u0003_\u0003_\u0003_\u0005_\u0971\n_\u0003`\u0003`\u0003",
    "`\u0003`\u0003`\u0007`\u0978\n`\f`\u000e`\u097b\u000b`\u0003`\u0003",
    "`\u0005`\u097f\n`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u0986\n",
    "`\u0003`\u0007`\u0989\n`\f`\u000e`\u098c\u000b`\u0003`\u0003`\u0003",
    "a\u0003a\u0003a\u0003a\u0003b\u0003b\u0003b\u0003b\u0003c\u0003c\u0003",
    "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0005c\u09a0\nc\u0003c\u0003c\u0003",
    "c\u0005c\u09a5\nc\u0003c\u0003c\u0003c\u0003c\u0005c\u09ab\nc\u0005",
    "c\u09ad\nc\u0003c\u0003c\u0003d\u0003d\u0003d\u0005d\u09b4\nd\u0003",
    "d\u0003d\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0005e\u09bf",
    "\ne\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0003f\u0007f\u09c9",
    "\nf\ff\u000ef\u09cc\u000bf\u0003f\u0005f\u09cf\nf\u0003g\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0005g\u09d8\ng\u0003g\u0003g\u0005g\u09dc",
    "\ng\u0003g\u0003g\u0003g\u0005g\u09e1\ng\u0003g\u0005g\u09e4\ng\u0003",
    "g\u0003g\u0003g\u0007g\u09e9\ng\fg\u000eg\u09ec\u000bg\u0003g\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0007g\u09f7\ng\f",
    "g\u000eg\u09fa\u000bg\u0005g\u09fc\ng\u0003g\u0003g\u0003g\u0003g\u0003",
    "g\u0003g\u0005g\u0a04\ng\u0003g\u0003g\u0003g\u0005g\u0a09\ng\u0005",
    "g\u0a0b\ng\u0003h\u0003h\u0003h\u0003h\u0003h\u0003h\u0005h\u0a13\n",
    "h\u0003h\u0003h\u0003h\u0005h\u0a18\nh\u0003i\u0003i\u0003i\u0003i\u0005",
    "i\u0a1e\ni\u0003i\u0003i\u0003i\u0007i\u0a23\ni\fi\u000ei\u0a26\u000b",
    "i\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0007j\u0a36\nj\fj\u000ej\u0a39\u000b",
    "j\u0003j\u0003j\u0003j\u0007j\u0a3e\nj\fj\u000ej\u0a41\u000bj\u0003",
    "j\u0003j\u0005j\u0a45\nj\u0003j\u0003j\u0003j\u0005j\u0a4a\nj\u0003",
    "j\u0003j\u0005j\u0a4e\nj\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u0a55",
    "\nj\u0003j\u0003j\u0003j\u0007j\u0a5a\nj\fj\u000ej\u0a5d\u000bj\u0003",
    "j\u0005j\u0a60\nj\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0007j\u0a68",
    "\nj\fj\u000ej\u0a6b\u000bj\u0003j\u0003j\u0005j\u0a6f\nj\u0003j\u0003",
    "j\u0005j\u0a73\nj\u0003j\u0003j\u0003j\u0003j\u0005j\u0a79\nj\u0003",
    "j\u0003j\u0003j\u0007j\u0a7e\nj\fj\u000ej\u0a81\u000bj\u0003j\u0003",
    "j\u0003j\u0003j\u0003j\u0003j\u0003j\u0007j\u0a8a\nj\fj\u000ej\u0a8d",
    "\u000bj\u0005j\u0a8f\nj\u0003j\u0003j\u0003j\u0003j\u0005j\u0a95\nj",
    "\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0003j\u0007j\u0a9f",
    "\nj\fj\u000ej\u0aa2\u000bj\u0005j\u0aa4\nj\u0003j\u0003j\u0003j\u0003",
    "j\u0005j\u0aaa\nj\u0005j\u0aac\nj\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0003k\u0005k\u0ab7\nk\u0003k\u0003k\u0003k\u0003",
    "k\u0005k\u0abd\nk\u0003k\u0003k\u0003k\u0003k\u0005k\u0ac3\nk\u0003",
    "k\u0003k\u0005k\u0ac7\nk\u0003k\u0003k\u0003k\u0003k\u0003k\u0003k\u0003",
    "k\u0003k\u0003k\u0003k\u0003k\u0007k\u0ad4\nk\fk\u000ek\u0ad7\u000b",
    "k\u0003l\u0003l\u0003l\u0003l\u0003l\u0005l\u0ade\nl\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0005l\u0ae7\nl\u0003l\u0003l\u0003l\u0003",
    "l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0003l\u0005l\u0af4\nl\u0003",
    "l\u0003l\u0003l\u0003l\u0005l\u0afa\nl\u0005l\u0afc\nl\u0003m\u0003",
    "m\u0003m\u0003m\u0005m\u0b02\nm\u0003m\u0005m\u0b05\nm\u0003m\u0003",
    "m\u0003m\u0003m\u0003m\u0005m\u0b0c\nm\u0003m\u0005m\u0b0f\nm\u0007",
    "m\u0b11\nm\fm\u000em\u0b14\u000bm\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0007n\u0b1c\nn\fn\u000en\u0b1f\u000bn\u0003o\u0003o\u0003",
    "o\u0003o\u0003o\u0003o\u0007o\u0b27\no\fo\u000eo\u0b2a\u000bo\u0003",
    "p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0003p\u0003p\u0005p\u0b3b\np\u0003p\u0003p\u0003p\u0003",
    "p\u0003p\u0003p\u0003p\u0005p\u0b44\np\u0003p\u0003p\u0003p\u0003p\u0003",
    "p\u0003p\u0005p\u0b4c\np\u0005p\u0b4e\np\u0003q\u0003q\u0003q\u0003",
    "q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003q\u0003",
    "q\u0003q\u0003q\u0003q\u0003q\u0005q\u0b62\nq\u0005q\u0b64\nq\u0003",
    "r\u0003r\u0003r\u0003r\u0003r\u0003r\u0007r\u0b6c\nr\fr\u000er\u0b6f",
    "\u000br\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0007s\u0b77\ns\f",
    "s\u000es\u0b7a\u000bs\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0007",
    "t\u0b82\nt\ft\u000et\u0b85\u000bt\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0006u\u0b9b\nu\ru\u000eu\u0b9c",
    "\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0006u\u0ba5\nu\ru\u000e",
    "u\u0ba6\u0005u\u0ba9\nu\u0003u\u0003u\u0003u\u0003u\u0005u\u0baf\nu",
    "\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0005u\u0bc0\nu\u0003u\u0003u\u0003",
    "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003",
    "u\u0007u\u0bcf\nu\fu\u000eu\u0bd2\u000bu\u0005u\u0bd4\nu\u0003u\u0003",
    "u\u0005u\u0bd8\nu\u0005u\u0bda\nu\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0005v\u0be1\nv\u0003v\u0003v\u0003v\u0003v\u0003v\u0005v\u0be8\n",
    "v\u0005v\u0bea\nv\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003v\u0003",
    "v\u0005v\u0bfe\nv\u0003w\u0003w\u0003w\u0003w\u0005w\u0c04\nw\u0003",
    "w\u0005w\u0c07\nw\u0003w\u0003w\u0003w\u0003w\u0003w\u0005w\u0c0e\n",
    "w\u0003w\u0005w\u0c11\nw\u0007w\u0c13\nw\fw\u000ew\u0c16\u000bw\u0003",
    "x\u0003x\u0003x\u0003x\u0003x\u0007x\u0c1d\nx\fx\u000ex\u0c20\u000b",
    "x\u0003x\u0003x\u0003y\u0003y\u0003y\u0003y\u0003y\u0007y\u0c29\ny\f",
    "y\u000ey\u0c2c\u000by\u0003y\u0003y\u0003y\u0003y\u0003y\u0007y\u0c33",
    "\ny\fy\u000ey\u0c36\u000by\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0003y\u0007y\u0c3f\ny\fy\u000ey\u0c42\u000by\u0003y\u0003y\u0003",
    "y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003y\u0003",
    "y\u0007y\u0c51\ny\fy\u000ey\u0c54\u000by\u0003y\u0003y\u0003y\u0005",
    "y\u0c59\ny\u0003y\u0003y\u0003z\u0003z\u0003z\u0003z\u0003z\u0003{\u0003",
    "{\u0003{\u0003{\u0003{\u0003|\u0003|\u0005|\u0c69\n|\u0003|\u0003|\u0003",
    "|\u0003|\u0003|\u0003}\u0003}\u0003}\u0003}\u0003}\u0003~\u0003~\u0003",
    "~\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0003\u007f\u0007",
    "\u007f\u0c7d\n\u007f\f\u007f\u000e\u007f\u0c80\u000b\u007f\u0003\u007f",
    "\u0003\u007f\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0007\u0080\u0c8a\n\u0080\f\u0080\u000e\u0080\u0c8d\u000b",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0007",
    "\u0080\u0c9a\n\u0080\f\u0080\u000e\u0080\u0c9d\u000b\u0080\u0005\u0080",
    "\u0c9f\n\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003\u0080\u0003",
    "\u0080\u0003\u0080\u0005\u0080\u0ca7\n\u0080\u0003\u0080\u0003\u0080",
    "\u0003\u0080\u0003\u0080\u0005\u0080\u0cad\n\u0080\u0003\u0081\u0003",
    "\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0cb4\n\u0081",
    "\u0003\u0081\u0003\u0081\u0005\u0081\u0cb8\n\u0081\u0003\u0081\u0003",
    "\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0007\u0082\u0cc2\n\u0082\f\u0082\u000e\u0082\u0cc5\u000b\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0007\u0082",
    "\u0cd2\n\u0082\f\u0082\u000e\u0082\u0cd5\u000b\u0082\u0005\u0082\u0cd7",
    "\n\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082",
    "\u0003\u0082\u0005\u0082\u0cdf\n\u0082\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0082\u0005\u0082\u0ce5\n\u0082\u0003\u0083\u0003\u0083",
    "\u0003\u0083\u0005\u0083\u0cea\n\u0083\u0003\u0083\u0003\u0083\u0003",
    "\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0003",
    "\u0084\u0003\u0084\u0005\u0084\u0cfc\n\u0084\u0003\u0085\u0003\u0085",
    "\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0007\u0085\u0d04\n",
    "\u0085\f\u0085\u000e\u0085\u0d07\u000b\u0085\u0003\u0086\u0003\u0086",
    "\u0003\u0087\u0003\u0087\u0003\u0087\u0002\u0002\u0088\u0002\u0004\u0006",
    "\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*",
    ",.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086",
    "\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e",
    "\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6",
    "\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce",
    "\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6",
    "\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe",
    "\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u0002\u0015\u0004\u0002=",
    "=\u00db\u00db\u0004\u0002aaee\u0004\u0002RR\u00bb\u00bb\u0004\u0002",
    "II__\u0004\u000277\u00a2\u00a2\u0003\u0002\u00c4\u00c5\u0003\u0002L",
    "M\u0004\u0002\u009d\u009d\u00d8\u00d8\u0004\u0002\\\\pp\u0003\u0002",
    "\u00d4\u00d5\u0004\u0002rr\u0089\u0089\u0004\u0002\'\'--\u0004\u0002",
    "\u000e\u0010\u0015\u0018\u0004\u0002\'(99\u0003\u0002\u001a\u001b\u0004",
    "\u0002\r\r\u001c\u001c\u0005\u0002PP\u008b\u008b\u00cd\u00cd\b\u0002",
    "[[~~\u0097\u0097\u009d\u009d\u00bd\u00bd\u00d8\u00d8\u0003\u0002?\u00d9",
    "\u0002\u0e9e\u0002\u0111\u0003\u0002\u0002\u0002\u0004\u0128\u0003\u0002",
    "\u0002\u0002\u0006\u012c\u0003\u0002\u0002\u0002\b\u0130\u0003\u0002",
    "\u0002\u0002\n\u0135\u0003\u0002\u0002\u0002\f\u015b\u0003\u0002\u0002",
    "\u0002\u000e\u0163\u0003\u0002\u0002\u0002\u0010\u0169\u0003\u0002\u0002",
    "\u0002\u0012\u0176\u0003\u0002\u0002\u0002\u0014\u0183\u0003\u0002\u0002",
    "\u0002\u0016\u0191\u0003\u0002\u0002\u0002\u0018\u01a3\u0003\u0002\u0002",
    "\u0002\u001a\u01b8\u0003\u0002\u0002\u0002\u001c\u01ba\u0003\u0002\u0002",
    "\u0002\u001e\u01c1\u0003\u0002\u0002\u0002 \u01e7\u0003\u0002\u0002",
    "\u0002\"\u020b\u0003\u0002\u0002\u0002$\u0226\u0003\u0002\u0002\u0002",
    "&\u027f\u0003\u0002\u0002\u0002(\u02aa\u0003\u0002\u0002\u0002*\u02b0",
    "\u0003\u0002\u0002\u0002,\u02d1\u0003\u0002\u0002\u0002.\u0313\u0003",
    "\u0002\u0002\u00020\u0315\u0003\u0002\u0002\u00022\u034a\u0003\u0002",
    "\u0002\u00024\u0383\u0003\u0002\u0002\u00026\u0385\u0003\u0002\u0002",
    "\u00028\u0398\u0003\u0002\u0002\u0002:\u03a4\u0003\u0002\u0002\u0002",
    "<\u03a9\u0003\u0002\u0002\u0002>\u03b4\u0003\u0002\u0002\u0002@\u03b9",
    "\u0003\u0002\u0002\u0002B\u03e6\u0003\u0002\u0002\u0002D\u03e8\u0003",
    "\u0002\u0002\u0002F\u043a\u0003\u0002\u0002\u0002H\u0454\u0003\u0002",
    "\u0002\u0002J\u047d\u0003\u0002\u0002\u0002L\u0488\u0003\u0002\u0002",
    "\u0002N\u0498\u0003\u0002\u0002\u0002P\u04aa\u0003\u0002\u0002\u0002",
    "R\u04c5\u0003\u0002\u0002\u0002T\u04d0\u0003\u0002\u0002\u0002V\u04d5",
    "\u0003\u0002\u0002\u0002X\u04f3\u0003\u0002\u0002\u0002Z\u04fa\u0003",
    "\u0002\u0002\u0002\\\u05b0\u0003\u0002\u0002\u0002^\u05b9\u0003\u0002",
    "\u0002\u0002`\u05f0\u0003\u0002\u0002\u0002b\u0601\u0003\u0002\u0002",
    "\u0002d\u0616\u0003\u0002\u0002\u0002f\u0627\u0003\u0002\u0002\u0002",
    "h\u0639\u0003\u0002\u0002\u0002j\u0663\u0003\u0002\u0002\u0002l\u0665",
    "\u0003\u0002\u0002\u0002n\u0695\u0003\u0002\u0002\u0002p\u06b0\u0003",
    "\u0002\u0002\u0002r\u06c7\u0003\u0002\u0002\u0002t\u06e0\u0003\u0002",
    "\u0002\u0002v\u06e5\u0003\u0002\u0002\u0002x\u06ea\u0003\u0002\u0002",
    "\u0002z\u06f2\u0003\u0002\u0002\u0002|\u0718\u0003\u0002\u0002\u0002",
    "~\u071b\u0003\u0002\u0002\u0002\u0080\u077d\u0003\u0002\u0002\u0002",
    "\u0082\u077f\u0003\u0002\u0002\u0002\u0084\u078b\u0003\u0002\u0002\u0002",
    "\u0086\u078d\u0003\u0002\u0002\u0002\u0088\u07a2\u0003\u0002\u0002\u0002",
    "\u008a\u07b6\u0003\u0002\u0002\u0002\u008c\u07d6\u0003\u0002\u0002\u0002",
    "\u008e\u07d8\u0003\u0002\u0002\u0002\u0090\u07dd\u0003\u0002\u0002\u0002",
    "\u0092\u07e5\u0003\u0002\u0002\u0002\u0094\u07f7\u0003\u0002\u0002\u0002",
    "\u0096\u07f9\u0003\u0002\u0002\u0002\u0098\u0805\u0003\u0002\u0002\u0002",
    "\u009a\u080c\u0003\u0002\u0002\u0002\u009c\u0813\u0003\u0002\u0002\u0002",
    "\u009e\u081e\u0003\u0002\u0002\u0002\u00a0\u083a\u0003\u0002\u0002\u0002",
    "\u00a2\u0842\u0003\u0002\u0002\u0002\u00a4\u0845\u0003\u0002\u0002\u0002",
    "\u00a6\u084b\u0003\u0002\u0002\u0002\u00a8\u085b\u0003\u0002\u0002\u0002",
    "\u00aa\u0862\u0003\u0002\u0002\u0002\u00ac\u0869\u0003\u0002\u0002\u0002",
    "\u00ae\u087f\u0003\u0002\u0002\u0002\u00b0\u0881\u0003\u0002\u0002\u0002",
    "\u00b2\u0927\u0003\u0002\u0002\u0002\u00b4\u0929\u0003\u0002\u0002\u0002",
    "\u00b6\u0933\u0003\u0002\u0002\u0002\u00b8\u093d\u0003\u0002\u0002\u0002",
    "\u00ba\u095c\u0003\u0002\u0002\u0002\u00bc\u0970\u0003\u0002\u0002\u0002",
    "\u00be\u0985\u0003\u0002\u0002\u0002\u00c0\u098f\u0003\u0002\u0002\u0002",
    "\u00c2\u0993\u0003\u0002\u0002\u0002\u00c4\u0997\u0003\u0002\u0002\u0002",
    "\u00c6\u09b0\u0003\u0002\u0002\u0002\u00c8\u09b7\u0003\u0002\u0002\u0002",
    "\u00ca\u09c0\u0003\u0002\u0002\u0002\u00cc\u09d0\u0003\u0002\u0002\u0002",
    "\u00ce\u0a0c\u0003\u0002\u0002\u0002\u00d0\u0a19\u0003\u0002\u0002\u0002",
    "\u00d2\u0aab\u0003\u0002\u0002\u0002\u00d4\u0aad\u0003\u0002\u0002\u0002",
    "\u00d6\u0afb\u0003\u0002\u0002\u0002\u00d8\u0afd\u0003\u0002\u0002\u0002",
    "\u00da\u0b15\u0003\u0002\u0002\u0002\u00dc\u0b20\u0003\u0002\u0002\u0002",
    "\u00de\u0b4d\u0003\u0002\u0002\u0002\u00e0\u0b63\u0003\u0002\u0002\u0002",
    "\u00e2\u0b65\u0003\u0002\u0002\u0002\u00e4\u0b70\u0003\u0002\u0002\u0002",
    "\u00e6\u0b7b\u0003\u0002\u0002\u0002\u00e8\u0bd9\u0003\u0002\u0002\u0002",
    "\u00ea\u0bfd\u0003\u0002\u0002\u0002\u00ec\u0bff\u0003\u0002\u0002\u0002",
    "\u00ee\u0c17\u0003\u0002\u0002\u0002\u00f0\u0c23\u0003\u0002\u0002\u0002",
    "\u00f2\u0c5c\u0003\u0002\u0002\u0002\u00f4\u0c61\u0003\u0002\u0002\u0002",
    "\u00f6\u0c66\u0003\u0002\u0002\u0002\u00f8\u0c6f\u0003\u0002\u0002\u0002",
    "\u00fa\u0c74\u0003\u0002\u0002\u0002\u00fc\u0c77\u0003\u0002\u0002\u0002",
    "\u00fe\u0cac\u0003\u0002\u0002\u0002\u0100\u0cae\u0003\u0002\u0002\u0002",
    "\u0102\u0ce4\u0003\u0002\u0002\u0002\u0104\u0ce6\u0003\u0002\u0002\u0002",
    "\u0106\u0cfb\u0003\u0002\u0002\u0002\u0108\u0cfd\u0003\u0002\u0002\u0002",
    "\u010a\u0d08\u0003\u0002\u0002\u0002\u010c\u0d0a\u0003\u0002\u0002\u0002",
    "\u010e\u0110\u0005\n\u0006\u0002\u010f\u010e\u0003\u0002\u0002\u0002",
    "\u0110\u0113\u0003\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002",
    "\u0111\u0112\u0003\u0002\u0002\u0002\u0112\u0124\u0003\u0002\u0002\u0002",
    "\u0113\u0111\u0003\u0002\u0002\u0002\u0114\u0119\u0005\b\u0005\u0002",
    "\u0115\u0118\u0005\n\u0006\u0002\u0116\u0118\u0005\u001e\u0010\u0002",
    "\u0117\u0115\u0003\u0002\u0002\u0002\u0117\u0116\u0003\u0002\u0002\u0002",
    "\u0118\u011b\u0003\u0002\u0002\u0002\u0119\u0117\u0003\u0002\u0002\u0002",
    "\u0119\u011a\u0003\u0002\u0002\u0002\u011a\u0125\u0003\u0002\u0002\u0002",
    "\u011b\u0119\u0003\u0002\u0002\u0002\u011c\u0121\u0005\u001e\u0010\u0002",
    "\u011d\u0120\u0005\n\u0006\u0002\u011e\u0120\u0005\u001e\u0010\u0002",
    "\u011f\u011d\u0003\u0002\u0002\u0002\u011f\u011e\u0003\u0002\u0002\u0002",
    "\u0120\u0123\u0003\u0002\u0002\u0002\u0121\u011f\u0003\u0002\u0002\u0002",
    "\u0121\u0122\u0003\u0002\u0002\u0002\u0122\u0125\u0003\u0002\u0002\u0002",
    "\u0123\u0121\u0003\u0002\u0002\u0002\u0124\u0114\u0003\u0002\u0002\u0002",
    "\u0124\u011c\u0003\u0002\u0002\u0002\u0124\u0125\u0003\u0002\u0002\u0002",
    "\u0125\u0126\u0003\u0002\u0002\u0002\u0126\u0127\u0007\u0002\u0002\u0003",
    "\u0127\u0003\u0003\u0002\u0002\u0002\u0128\u0129\u0005\u00ccg\u0002",
    "\u0129\u012a\b\u0003\u0001\u0002\u012a\u012b\u0007\u0002\u0002\u0003",
    "\u012b\u0005\u0003\u0002\u0002\u0002\u012c\u012d\u0005\u00dan\u0002",
    "\u012d\u012e\b\u0004\u0001\u0002\u012e\u012f\u0007\u0002\u0002\u0003",
    "\u012f\u0007\u0003\u0002\u0002\u0002\u0130\u0131\u0007\u009f\u0002\u0002",
    "\u0131\u0132\u0005\u0108\u0085\u0002\u0132\u0133\u0007\u0003\u0002\u0002",
    "\u0133\u0134\b\u0005\u0001\u0002\u0134\t\u0003\u0002\u0002\u0002\u0135",
    "\u0157\u0007\u00d3\u0002\u0002\u0136\u0137\u00070\u0002\u0002\u0137",
    "\u0138\u0007\"\u0002\u0002\u0138\u0158\b\u0006\u0001\u0002\u0139\u013a",
    "\u0005\u000e\b\u0002\u013a\u013f\b\u0006\u0001\u0002\u013b\u013c\u0007",
    ")\u0002\u0002\u013c\u013d\u0005\u010c\u0087\u0002\u013d\u013e\b\u0006",
    "\u0001\u0002\u013e\u0140\u0003\u0002\u0002\u0002\u013f\u013b\u0003\u0002",
    "\u0002\u0002\u013f\u0140\u0003\u0002\u0002\u0002\u0140\u0144\u0003\u0002",
    "\u0002\u0002\u0141\u0142\u00070\u0002\u0002\u0142\u0143\u0007\"\u0002",
    "\u0002\u0143\u0145\b\u0006\u0001\u0002\u0144\u0141\u0003\u0002\u0002",
    "\u0002\u0144\u0145\u0003\u0002\u0002\u0002\u0145\u0158\u0003\u0002\u0002",
    "\u0002\u0146\u0147\b\u0006\u0001\u0002\u0147\u0148\u0007\u0004\u0002",
    "\u0002\u0148\u014e\u0005\f\u0007\u0002\u0149\u014a\u0007\u0005\u0002",
    "\u0002\u014a\u014b\b\u0006\u0001\u0002\u014b\u014d\u0005\f\u0007\u0002",
    "\u014c\u0149\u0003\u0002\u0002\u0002\u014d\u0150\u0003\u0002\u0002\u0002",
    "\u014e\u014c\u0003\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002",
    "\u014f\u0151\u0003\u0002\u0002\u0002\u0150\u014e\u0003\u0002\u0002\u0002",
    "\u0151\u0155\u0007\u0006\u0002\u0002\u0152\u0153\u00070\u0002\u0002",
    "\u0153\u0154\u0007\"\u0002\u0002\u0154\u0156\b\u0006\u0001\u0002\u0155",
    "\u0152\u0003\u0002\u0002\u0002\u0155\u0156\u0003\u0002\u0002\u0002\u0156",
    "\u0158\u0003\u0002\u0002\u0002\u0157\u0136\u0003\u0002\u0002\u0002\u0157",
    "\u0139\u0003\u0002\u0002\u0002\u0157\u0146\u0003\u0002\u0002\u0002\u0158",
    "\u0159\u0003\u0002\u0002\u0002\u0159\u015a\u0007\u0003\u0002\u0002\u015a",
    "\u000b\u0003\u0002\u0002\u0002\u015b\u015c\u0005\u000e\b\u0002\u015c",
    "\u0161\b\u0007\u0001\u0002\u015d\u015e\u0007)\u0002\u0002\u015e\u015f",
    "\u0005\u010c\u0087\u0002\u015f\u0160\b\u0007\u0001\u0002\u0160\u0162",
    "\u0003\u0002\u0002\u0002\u0161\u015d\u0003\u0002\u0002\u0002\u0161\u0162",
    "\u0003\u0002\u0002\u0002\u0162\r\u0003\u0002\u0002\u0002\u0163\u0167",
    "\u0005\u0108\u0085\u0002\u0164\u0165\u0007\u0007\u0002\u0002\u0165\u0166",
    "\b\b\u0001\u0002\u0166\u0168\u0005\u0108\u0085\u0002\u0167\u0164\u0003",
    "\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002\u0002\u0168\u000f\u0003",
    "\u0002\u0002\u0002\u0169\u016e\u0005\u0108\u0085\u0002\u016a\u016b\u0007",
    "\b\u0002\u0002\u016b\u016c\u0005\u010c\u0087\u0002\u016c\u016d\b\t\u0001",
    "\u0002\u016d\u016f\u0003\u0002\u0002\u0002\u016e\u016a\u0003\u0002\u0002",
    "\u0002\u016e\u016f\u0003\u0002\u0002\u0002\u016f\u0174\u0003\u0002\u0002",
    "\u0002\u0170\u0171\u0007\t\u0002\u0002\u0171\u0172\u0005\u00fe\u0080",
    "\u0002\u0172\u0173\b\t\u0001\u0002\u0173\u0175\u0003\u0002\u0002\u0002",
    "\u0174\u0170\u0003\u0002\u0002\u0002\u0174\u0175\u0003\u0002\u0002\u0002",
    "\u0175\u0011\u0003\u0002\u0002\u0002\u0176\u0177\u0007\n\u0002\u0002",
    "\u0177\u0178\b\n\u0001\u0002\u0178\u017e\u0005\u0010\t\u0002\u0179\u017a",
    "\u0007\u0005\u0002\u0002\u017a\u017b\b\n\u0001\u0002\u017b\u017d\u0005",
    "\u0010\t\u0002\u017c\u0179\u0003\u0002\u0002\u0002\u017d\u0180\u0003",
    "\u0002\u0002\u0002\u017e\u017c\u0003\u0002\u0002\u0002\u017e\u017f\u0003",
    "\u0002\u0002\u0002\u017f\u0181\u0003\u0002\u0002\u0002\u0180\u017e\u0003",
    "\u0002\u0002\u0002\u0181\u0182\u0007\u000b\u0002\u0002\u0182\u0013\u0003",
    "\u0002\u0002\u0002\u0183\u018f\u0007\f\u0002\u0002\u0184\u0190\u0005",
    "\u0012\n\u0002\u0185\u0186\b\u000b\u0001\u0002\u0186\u018b\u0005\u0108",
    "\u0085\u0002\u0187\u0188\u0007\b\u0002\u0002\u0188\u0189\u0005\u010c",
    "\u0087\u0002\u0189\u018a\b\u000b\u0001\u0002\u018a\u018c\u0003\u0002",
    "\u0002\u0002\u018b\u0187\u0003\u0002\u0002\u0002\u018b\u018c\u0003\u0002",
    "\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d\u018e\b\u000b",
    "\u0001\u0002\u018e\u0190\u0003\u0002\u0002\u0002\u018f\u0184\u0003\u0002",
    "\u0002\u0002\u018f\u0185\u0003\u0002\u0002\u0002\u0190\u0015\u0003\u0002",
    "\u0002\u0002\u0191\u01a1\u0007\f\u0002\u0002\u0192\u01a2\u0005\u0012",
    "\n\u0002\u0193\u0194\b\f\u0001\u0002\u0194\u0199\u0005\u0108\u0085\u0002",
    "\u0195\u0196\u0007\b\u0002\u0002\u0196\u0197\u0005\u010c\u0087\u0002",
    "\u0197\u0198\b\f\u0001\u0002\u0198\u019a\u0003\u0002\u0002\u0002\u0199",
    "\u0195\u0003\u0002\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a",
    "\u019f\u0003\u0002\u0002\u0002\u019b\u019c\u0007\t\u0002\u0002\u019c",
    "\u019d\u0005\u00fe\u0080\u0002\u019d\u019e\b\f\u0001\u0002\u019e\u01a0",
    "\u0003\u0002\u0002\u0002\u019f\u019b\u0003\u0002\u0002\u0002\u019f\u01a0",
    "\u0003\u0002\u0002\u0002\u01a0\u01a2\u0003\u0002\u0002\u0002\u01a1\u0192",
    "\u0003\u0002\u0002\u0002\u01a1\u0193\u0003\u0002\u0002\u0002\u01a2\u0017",
    "\u0003\u0002\u0002\u0002\u01a3\u01b3\u0007\f\u0002\u0002\u01a4\u01b4",
    "\u0005\u0012\n\u0002\u01a5\u01a6\b\r\u0001\u0002\u01a6\u01ab\u0005\u0108",
    "\u0085\u0002\u01a7\u01a8\u0007\b\u0002\u0002\u01a8\u01a9\u0005\u010c",
    "\u0087\u0002\u01a9\u01aa\b\r\u0001\u0002\u01aa\u01ac\u0003\u0002\u0002",
    "\u0002\u01ab\u01a7\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002\u0002",
    "\u0002\u01ac\u01b1\u0003\u0002\u0002\u0002\u01ad\u01ae\u0007\t\u0002",
    "\u0002\u01ae\u01af\u0005\u00fe\u0080\u0002\u01af\u01b0\b\r\u0001\u0002",
    "\u01b0\u01b2\u0003\u0002\u0002\u0002\u01b1\u01ad\u0003\u0002\u0002\u0002",
    "\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b4\u0003\u0002\u0002\u0002",
    "\u01b3\u01a4\u0003\u0002\u0002\u0002\u01b3\u01a5\u0003\u0002\u0002\u0002",
    "\u01b4\u0019\u0003\u0002\u0002\u0002\u01b5\u01b9\u0007\u0003\u0002\u0002",
    "\u01b6\u01b7\b\u000e\u0001\u0002\u01b7\u01b9\u0007\u0006\u0002\u0002",
    "\u01b8\u01b5\u0003\u0002\u0002\u0002\u01b8\u01b6\u0003\u0002\u0002\u0002",
    "\u01b9\u001b\u0003\u0002\u0002\u0002\u01ba\u01bc\b\u000f\u0001\u0002",
    "\u01bb\u01bd\u0007\u0003\u0002\u0002\u01bc\u01bb\u0003\u0002\u0002\u0002",
    "\u01bc\u01bd\u0003\u0002\u0002\u0002\u01bd\u001d\u0003\u0002\u0002\u0002",
    "\u01be\u01c0\u0005\u0016\f\u0002\u01bf\u01be\u0003\u0002\u0002\u0002",
    "\u01c0\u01c3\u0003\u0002\u0002\u0002\u01c1\u01bf\u0003\u0002\u0002\u0002",
    "\u01c1\u01c2\u0003\u0002\u0002\u0002\u01c2\u01e0\u0003\u0002\u0002\u0002",
    "\u01c3\u01c1\u0003\u0002\u0002\u0002\u01c4\u01c6\u0007]\u0002\u0002",
    "\u01c5\u01c4\u0003\u0002\u0002\u0002\u01c5\u01c6\u0003\u0002\u0002\u0002",
    "\u01c6\u01cf\u0003\u0002\u0002\u0002\u01c7\u01d0\u0005 \u0011\u0002",
    "\u01c8\u01d0\u0005$\u0013\u0002\u01c9\u01d0\u00058\u001d\u0002\u01ca",
    "\u01d0\u0005<\u001f\u0002\u01cb\u01d0\u0005L\'\u0002\u01cc\u01d0\u0005",
    "n8\u0002\u01cd\u01d0\u00056\u001c\u0002\u01ce\u01d0\u00054\u001b\u0002",
    "\u01cf\u01c7\u0003\u0002\u0002\u0002\u01cf\u01c8\u0003\u0002\u0002\u0002",
    "\u01cf\u01c9\u0003\u0002\u0002\u0002\u01cf\u01ca\u0003\u0002\u0002\u0002",
    "\u01cf\u01cb\u0003\u0002\u0002\u0002\u01cf\u01cc\u0003\u0002\u0002\u0002",
    "\u01cf\u01cd\u0003\u0002\u0002\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002",
    "\u01d0\u01e1\u0003\u0002\u0002\u0002\u01d1\u01d2\u0007o\u0002\u0002",
    "\u01d2\u01db\b\u0010\u0001\u0002\u01d3\u01dc\u0005\"\u0012\u0002\u01d4",
    "\u01dc\u0005,\u0017\u0002\u01d5\u01dc\u00050\u0019\u0002\u01d6\u01dc",
    "\u0005:\u001e\u0002\u01d7\u01dc\u0005> \u0002\u01d8\u01dc\u0005N(\u0002",
    "\u01d9\u01dc\u0005p9\u0002\u01da\u01dc\u0005@!\u0002\u01db\u01d3\u0003",
    "\u0002\u0002\u0002\u01db\u01d4\u0003\u0002\u0002\u0002\u01db\u01d5\u0003",
    "\u0002\u0002\u0002\u01db\u01d6\u0003\u0002\u0002\u0002\u01db\u01d7\u0003",
    "\u0002\u0002\u0002\u01db\u01d8\u0003\u0002\u0002\u0002\u01db\u01d9\u0003",
    "\u0002\u0002\u0002\u01db\u01da\u0003\u0002\u0002\u0002\u01dc\u01e1\u0003",
    "\u0002\u0002\u0002\u01dd\u01de\u0007F\u0002\u0002\u01de\u01df\b\u0010",
    "\u0001\u0002\u01df\u01e1\u0005D#\u0002\u01e0\u01c5\u0003\u0002\u0002",
    "\u0002\u01e0\u01d1\u0003\u0002\u0002\u0002\u01e0\u01dd\u0003\u0002\u0002",
    "\u0002\u01e1\u001f\u0003\u0002\u0002\u0002\u01e2\u01e8\u0007W\u0002",
    "\u0002\u01e3\u01e5\u0007?\u0002\u0002\u01e4\u01e3\u0003\u0002\u0002",
    "\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5\u01e6\u0003\u0002\u0002",
    "\u0002\u01e6\u01e8\u0007\u00bf\u0002\u0002\u01e7\u01e2\u0003\u0002\u0002",
    "\u0002\u01e7\u01e4\u0003\u0002\u0002\u0002\u01e8\u01e9\u0003\u0002\u0002",
    "\u0002\u01e9\u01ea\u0005\u0108\u0085\u0002\u01ea\u01ee\b\u0011\u0001",
    "\u0002\u01eb\u01ed\u0005\u0014\u000b\u0002\u01ec\u01eb\u0003\u0002\u0002",
    "\u0002\u01ed\u01f0\u0003\u0002\u0002\u0002\u01ee\u01ec\u0003\u0002\u0002",
    "\u0002\u01ee\u01ef\u0003\u0002\u0002\u0002\u01ef\u01fb\u0003\u0002\u0002",
    "\u0002\u01f0\u01ee\u0003\u0002\u0002\u0002\u01f1\u01f2\u0007\t\u0002",
    "\u0002\u01f2\u01f8\u0005\u00acW\u0002\u01f3\u01f4\u0007\u0005\u0002",
    "\u0002\u01f4\u01f5\b\u0011\u0001\u0002\u01f5\u01f7\u0005\u00acW\u0002",
    "\u01f6\u01f3\u0003\u0002\u0002\u0002\u01f7\u01fa\u0003\u0002\u0002\u0002",
    "\u01f8\u01f6\u0003\u0002\u0002\u0002\u01f8\u01f9\u0003\u0002\u0002\u0002",
    "\u01f9\u01fc\u0003\u0002\u0002\u0002\u01fa\u01f8\u0003\u0002\u0002\u0002",
    "\u01fb\u01f1\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002",
    "\u01fc\u0207\u0003\u0002\u0002\u0002\u01fd\u0201\u0007\u0004\u0002\u0002",
    "\u01fe\u0200\u0005\u001e\u0010\u0002\u01ff\u01fe\u0003\u0002\u0002\u0002",
    "\u0200\u0203\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002",
    "\u0201\u0202\u0003\u0002\u0002\u0002\u0202\u0204\u0003\u0002\u0002\u0002",
    "\u0203\u0201\u0003\u0002\u0002\u0002\u0204\u0205\u0007\u0006\u0002\u0002",
    "\u0205\u0208\u0005\u001c\u000f\u0002\u0206\u0208\u0005\u001a\u000e\u0002",
    "\u0207\u01fd\u0003\u0002\u0002\u0002\u0207\u0206\u0003\u0002\u0002\u0002",
    "\u0208!\u0003\u0002\u0002\u0002\u0209\u020c\u0007W\u0002\u0002\u020a",
    "\u020c\u0007\u00bf\u0002\u0002\u020b\u0209\u0003\u0002\u0002\u0002\u020b",
    "\u020a\u0003\u0002\u0002\u0002\u020c\u020d\u0003\u0002\u0002\u0002\u020d",
    "\u020e\u0005\u0108\u0085\u0002\u020e\u0211\b\u0012\u0001\u0002\u020f",
    "\u0210\u0007=\u0002\u0002\u0210\u0212\b\u0012\u0001\u0002\u0211\u020f",
    "\u0003\u0002\u0002\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212\u0216",
    "\u0003\u0002\u0002\u0002\u0213\u0215\u0005\u0016\f\u0002\u0214\u0213",
    "\u0003\u0002\u0002\u0002\u0215\u0218\u0003\u0002\u0002\u0002\u0216\u0214",
    "\u0003\u0002\u0002\u0002\u0216\u0217\u0003\u0002\u0002\u0002\u0217\u0223",
    "\u0003\u0002\u0002\u0002\u0218\u0216\u0003\u0002\u0002\u0002\u0219\u021d",
    "\u0007\u0004\u0002\u0002\u021a\u021c\u0005\u001e\u0010\u0002\u021b\u021a",
    "\u0003\u0002\u0002\u0002\u021c\u021f\u0003\u0002\u0002\u0002\u021d\u021b",
    "\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002\u021e\u0220",
    "\u0003\u0002\u0002\u0002\u021f\u021d\u0003\u0002\u0002\u0002\u0220\u0221",
    "\u0007\u0006\u0002\u0002\u0221\u0224\u0005\u001c\u000f\u0002\u0222\u0224",
    "\u0005\u001a\u000e\u0002\u0223\u0219\u0003\u0002\u0002\u0002\u0223\u0222",
    "\u0003\u0002\u0002\u0002\u0224#\u0003\u0002\u0002\u0002\u0225\u0227",
    "\u0007\u00c8\u0002\u0002\u0226\u0225\u0003\u0002\u0002\u0002\u0226\u0227",
    "\u0003\u0002\u0002\u0002\u0227\u0229\u0003\u0002\u0002\u0002\u0228\u022a",
    "\u0007?\u0002\u0002\u0229\u0228\u0003\u0002\u0002\u0002\u0229\u022a",
    "\u0003\u0002\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022c",
    "\u0007g\u0002\u0002\u022c\u022d\u0005\u0108\u0085\u0002\u022d\u0231",
    "\b\u0013\u0001\u0002\u022e\u0230\u0005\u0014\u000b\u0002\u022f\u022e",
    "\u0003\u0002\u0002\u0002\u0230\u0233\u0003\u0002\u0002\u0002\u0231\u022f",
    "\u0003\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0235",
    "\u0003\u0002\u0002\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0234\u0236",
    "\u0005d3\u0002\u0235\u0234\u0003\u0002\u0002\u0002\u0235\u0236\u0003",
    "\u0002\u0002\u0002\u0236\u027d\u0003\u0002\u0002\u0002\u0237\u0238\u0007",
    "\t\u0002\u0002\u0238\u023e\u0005\u00acW\u0002\u0239\u023a\u0007\u0005",
    "\u0002\u0002\u023a\u023b\b\u0013\u0001\u0002\u023b\u023d\u0005\u00ac",
    "W\u0002\u023c\u0239\u0003\u0002\u0002\u0002\u023d\u0240\u0003\u0002",
    "\u0002\u0002\u023e\u023c\u0003\u0002\u0002\u0002\u023e\u023f\u0003\u0002",
    "\u0002\u0002\u023f\u0242\u0003\u0002\u0002\u0002\u0240\u023e\u0003\u0002",
    "\u0002\u0002\u0241\u0237\u0003\u0002\u0002\u0002\u0241\u0242\u0003\u0002",
    "\u0002\u0002\u0242\u0243\u0003\u0002\u0002\u0002\u0243\u0244\u0007\u0004",
    "\u0002\u0002\u0244\u024a\b\u0013\u0001\u0002\u0245\u0247\u0005T+\u0002",
    "\u0246\u0245\u0003\u0002\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002",
    "\u0248\u0246\u0003\u0002\u0002\u0002\u0248\u0249\u0003\u0002\u0002\u0002",
    "\u0249\u024b\u0003\u0002\u0002\u0002\u024a\u0246\u0003\u0002\u0002\u0002",
    "\u024a\u024b\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002",
    "\u024c\u0256\u0007\u0006\u0002\u0002\u024d\u024e\u0007A\u0002\u0002",
    "\u024e\u0250\u0007\u0004\u0002\u0002\u024f\u0251\u00052\u001a\u0002",
    "\u0250\u024f\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002\u0002",
    "\u0252\u0250\u0003\u0002\u0002\u0002\u0252\u0253\u0003\u0002\u0002\u0002",
    "\u0253\u0254\u0003\u0002\u0002\u0002\u0254\u0255\u0007\u0006\u0002\u0002",
    "\u0255\u0257\u0003\u0002\u0002\u0002\u0256\u024d\u0003\u0002\u0002\u0002",
    "\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0259\u0003\u0002\u0002\u0002",
    "\u0258\u025a\u0005r:\u0002\u0259\u0258\u0003\u0002\u0002\u0002\u0259",
    "\u025a\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002\u0002\u0002\u025b",
    "\u027e\u0005\u001c\u000f\u0002\u025c\u027b\u0007)\u0002\u0002\u025d",
    "\u025e\u0005\u00ccg\u0002\u025e\u026a\b\u0013\u0001\u0002\u025f\u0260",
    "\u0007A\u0002\u0002\u0260\u0262\u0007\u0004\u0002\u0002\u0261\u0263",
    "\u00052\u001a\u0002\u0262\u0261\u0003\u0002\u0002\u0002\u0263\u0264",
    "\u0003\u0002\u0002\u0002\u0264\u0262\u0003\u0002\u0002\u0002\u0264\u0265",
    "\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002\u0266\u0267",
    "\u0007\u0006\u0002\u0002\u0267\u0268\u0005\u001c\u000f\u0002\u0268\u026b",
    "\u0003\u0002\u0002\u0002\u0269\u026b\u0005\u001a\u000e\u0002\u026a\u025f",
    "\u0003\u0002\u0002\u0002\u026a\u0269\u0003\u0002\u0002\u0002\u026b\u027c",
    "\u0003\u0002\u0002\u0002\u026c\u026d\u0005&\u0014\u0002\u026d\u0277",
    "\b\u0013\u0001\u0002\u026e\u026f\u0007A\u0002\u0002\u026f\u0271\u0007",
    "\u0004\u0002\u0002\u0270\u0272\u00052\u001a\u0002\u0271\u0270\u0003",
    "\u0002\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273\u0271\u0003",
    "\u0002\u0002\u0002\u0273\u0274\u0003\u0002\u0002\u0002\u0274\u0275\u0003",
    "\u0002\u0002\u0002\u0275\u0276\u0007\u0006\u0002\u0002\u0276\u0278\u0003",
    "\u0002\u0002\u0002\u0277\u026e\u0003\u0002\u0002\u0002\u0277\u0278\u0003",
    "\u0002\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u027a\u0005",
    "\u001c\u000f\u0002\u027a\u027c\u0003\u0002\u0002\u0002\u027b\u025d\u0003",
    "\u0002\u0002\u0002\u027b\u026c\u0003\u0002\u0002\u0002\u027c\u027e\u0003",
    "\u0002\u0002\u0002\u027d\u0241\u0003\u0002\u0002\u0002\u027d\u025c\u0003",
    "\u0002\u0002\u0002\u027e%\u0003\u0002\u0002\u0002\u027f\u0280\u0007",
    "\u00b3\u0002\u0002\u0280\u0281\u00077\u0002\u0002\u0281\u0282\b\u0014",
    "\u0001\u0002\u0282\u0287\u0005\u0108\u0085\u0002\u0283\u0284\u0007)",
    "\u0002\u0002\u0284\u0285\u0005\u010c\u0087\u0002\u0285\u0286\b\u0014",
    "\u0001\u0002\u0286\u0288\u0003\u0002\u0002\u0002\u0287\u0283\u0003\u0002",
    "\u0002\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u0299\u0003\u0002",
    "\u0002\u0002\u0289\u028a\u0007\u0004\u0002\u0002\u028a\u028e\b\u0014",
    "\u0001\u0002\u028b\u028c\u0007\r\u0002\u0002\u028c\u028f\b\u0014\u0001",
    "\u0002\u028d\u028f\u0005*\u0016\u0002\u028e\u028b\u0003\u0002\u0002",
    "\u0002\u028e\u028d\u0003\u0002\u0002\u0002\u028f\u0295\u0003\u0002\u0002",
    "\u0002\u0290\u0291\u0007\u0005\u0002\u0002\u0291\u0292\b\u0014\u0001",
    "\u0002\u0292\u0294\u0005*\u0016\u0002\u0293\u0290\u0003\u0002\u0002",
    "\u0002\u0294\u0297\u0003\u0002\u0002\u0002\u0295\u0293\u0003\u0002\u0002",
    "\u0002\u0295\u0296\u0003\u0002\u0002\u0002\u0296\u0298\u0003\u0002\u0002",
    "\u0002\u0297\u0295\u0003\u0002\u0002\u0002\u0298\u029a\u0007\u0006\u0002",
    "\u0002\u0299\u0289\u0003\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002",
    "\u0002\u029a\u02a8\u0003\u0002\u0002\u0002\u029b\u029c\u0007m\u0002",
    "\u0002\u029c\u029d\u0007\u0004\u0002\u0002\u029d\u02a3\u0005(\u0015",
    "\u0002\u029e\u029f\u0007\u0005\u0002\u0002\u029f\u02a0\b\u0014\u0001",
    "\u0002\u02a0\u02a2\u0005(\u0015\u0002\u02a1\u029e\u0003\u0002\u0002",
    "\u0002\u02a2\u02a5\u0003\u0002\u0002\u0002\u02a3\u02a1\u0003\u0002\u0002",
    "\u0002\u02a3\u02a4\u0003\u0002\u0002\u0002\u02a4\u02a6\u0003\u0002\u0002",
    "\u0002\u02a5\u02a3\u0003\u0002\u0002\u0002\u02a6\u02a7\u0007\u0006\u0002",
    "\u0002\u02a7\u02a9\u0003\u0002\u0002\u0002\u02a8\u029b\u0003\u0002\u0002",
    "\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\'\u0003\u0002\u0002",
    "\u0002\u02aa\u02ab\u0005\u010c\u0087\u0002\u02ab\u02ac\b\u0015\u0001",
    "\u0002\u02ac)\u0003\u0002\u0002\u0002\u02ad\u02af\u0005\u0016\f\u0002",
    "\u02ae\u02ad\u0003\u0002\u0002\u0002\u02af\u02b2\u0003\u0002\u0002\u0002",
    "\u02b0\u02ae\u0003\u0002\u0002\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002",
    "\u02b1\u02b4\u0003\u0002\u0002\u0002\u02b2\u02b0\u0003\u0002\u0002\u0002",
    "\u02b3\u02b5\u00072\u0002\u0002\u02b4\u02b3\u0003\u0002\u0002\u0002",
    "\u02b4\u02b5\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002",
    "\u02b6\u02bb\u0005\u0108\u0085\u0002\u02b7\u02b8\u0007)\u0002\u0002",
    "\u02b8\u02b9\u0005\u010c\u0087\u0002\u02b9\u02ba\b\u0016\u0001\u0002",
    "\u02ba\u02bc\u0003\u0002\u0002\u0002\u02bb\u02b7\u0003\u0002\u0002\u0002",
    "\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02bd\u0003\u0002\u0002\u0002",
    "\u02bd\u02c1\b\u0016\u0001\u0002\u02be\u02c0\u0005\u0014\u000b\u0002",
    "\u02bf\u02be\u0003\u0002\u0002\u0002\u02c0\u02c3\u0003\u0002\u0002\u0002",
    "\u02c1\u02bf\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002",
    "\u02c2\u02cf\u0003\u0002\u0002\u0002\u02c3\u02c1\u0003\u0002\u0002\u0002",
    "\u02c4\u02c5\u0007\t\u0002\u0002\u02c5\u02c6\u0007\u00b6\u0002\u0002",
    "\u02c6\u02c7\u0007\u00ce\u0002\u0002\u02c7\u02c8\b\u0016\u0001\u0002",
    "\u02c8\u02cc\u0005\u0108\u0085\u0002\u02c9\u02cb\u0005\u0016\f\u0002",
    "\u02ca\u02c9\u0003\u0002\u0002\u0002\u02cb\u02ce\u0003\u0002\u0002\u0002",
    "\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002",
    "\u02cd\u02d0\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003\u0002\u0002\u0002",
    "\u02cf\u02c4\u0003\u0002\u0002\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002",
    "\u02d0+\u0003\u0002\u0002\u0002\u02d1\u02d2\u0007g\u0002\u0002\u02d2",
    "\u02d3\u0005\u0108\u0085\u0002\u02d3\u02e9\b\u0017\u0001\u0002\u02d4",
    "\u02d5\u0007=\u0002\u0002\u02d5\u02d9\b\u0017\u0001\u0002\u02d6\u02d8",
    "\u0005\u0016\f\u0002\u02d7\u02d6\u0003\u0002\u0002\u0002\u02d8\u02db",
    "\u0003\u0002\u0002\u0002\u02d9\u02d7\u0003\u0002\u0002\u0002\u02d9\u02da",
    "\u0003\u0002\u0002\u0002\u02da\u02e0\u0003\u0002\u0002\u0002\u02db\u02d9",
    "\u0003\u0002\u0002\u0002\u02dc\u02dd\u0005\u00acW\u0002\u02dd\u02de",
    "\u0005\u001a\u000e\u0002\u02de\u02e1\u0003\u0002\u0002\u0002\u02df\u02e1",
    "\u0005.\u0018\u0002\u02e0\u02dc\u0003\u0002\u0002\u0002\u02e0\u02df",
    "\u0003\u0002\u0002\u0002\u02e1\u02ea\u0003\u0002\u0002\u0002\u02e2\u02e4",
    "\u0005\u0016\f\u0002\u02e3\u02e2\u0003\u0002\u0002\u0002\u02e4\u02e7",
    "\u0003\u0002\u0002\u0002\u02e5\u02e3\u0003\u0002\u0002\u0002\u02e5\u02e6",
    "\u0003\u0002\u0002\u0002\u02e6\u02e8\u0003\u0002\u0002\u0002\u02e7\u02e5",
    "\u0003\u0002\u0002\u0002\u02e8\u02ea\u0005.\u0018\u0002\u02e9\u02d4",
    "\u0003\u0002\u0002\u0002\u02e9\u02e5\u0003\u0002\u0002\u0002\u02ea-",
    "\u0003\u0002\u0002\u0002\u02eb\u02ef\u0007\u0004\u0002\u0002\u02ec\u02ee",
    "\u0005R*\u0002\u02ed\u02ec\u0003\u0002\u0002\u0002\u02ee\u02f1\u0003",
    "\u0002\u0002\u0002\u02ef\u02ed\u0003\u0002\u0002\u0002\u02ef\u02f0\u0003",
    "\u0002\u0002\u0002\u02f0\u02f2\u0003\u0002\u0002\u0002\u02f1\u02ef\u0003",
    "\u0002\u0002\u0002\u02f2\u02fc\u0007\u0006\u0002\u0002\u02f3\u02f4\u0007",
    "A\u0002\u0002\u02f4\u02f8\u0007\u0004\u0002\u0002\u02f5\u02f7\u0005",
    "2\u001a\u0002\u02f6\u02f5\u0003\u0002\u0002\u0002\u02f7\u02fa\u0003",
    "\u0002\u0002\u0002\u02f8\u02f6\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003",
    "\u0002\u0002\u0002\u02f9\u02fb\u0003\u0002\u0002\u0002\u02fa\u02f8\u0003",
    "\u0002\u0002\u0002\u02fb\u02fd\u0007\u0006\u0002\u0002\u02fc\u02f3\u0003",
    "\u0002\u0002\u0002\u02fc\u02fd\u0003\u0002\u0002\u0002\u02fd\u02ff\u0003",
    "\u0002\u0002\u0002\u02fe\u0300\u0005r:\u0002\u02ff\u02fe\u0003\u0002",
    "\u0002\u0002\u02ff\u0300\u0003\u0002\u0002\u0002\u0300\u0301\u0003\u0002",
    "\u0002\u0002\u0301\u0314\u0005\u001c\u000f\u0002\u0302\u0303\u0007A",
    "\u0002\u0002\u0303\u0307\u0007\u0004\u0002\u0002\u0304\u0306\u00052",
    "\u001a\u0002\u0305\u0304\u0003\u0002\u0002\u0002\u0306\u0309\u0003\u0002",
    "\u0002\u0002\u0307\u0305\u0003\u0002\u0002\u0002\u0307\u0308\u0003\u0002",
    "\u0002\u0002\u0308\u030a\u0003\u0002\u0002\u0002\u0309\u0307\u0003\u0002",
    "\u0002\u0002\u030a\u030c\u0007\u0006\u0002\u0002\u030b\u030d\u0005r",
    ":\u0002\u030c\u030b\u0003\u0002\u0002\u0002\u030c\u030d\u0003\u0002",
    "\u0002\u0002\u030d\u030e\u0003\u0002\u0002\u0002\u030e\u0314\u0005\u001c",
    "\u000f\u0002\u030f\u0310\u0005r:\u0002\u0310\u0311\u0005\u001c\u000f",
    "\u0002\u0311\u0314\u0003\u0002\u0002\u0002\u0312\u0314\u0005\u001a\u000e",
    "\u0002\u0313\u02eb\u0003\u0002\u0002\u0002\u0313\u0302\u0003\u0002\u0002",
    "\u0002\u0313\u030f\u0003\u0002\u0002\u0002\u0313\u0312\u0003\u0002\u0002",
    "\u0002\u0314/\u0003\u0002\u0002\u0002\u0315\u0316\u0007\u00b3\u0002",
    "\u0002\u0316\u0317\u0005\u0108\u0085\u0002\u0317\u031a\b\u0019\u0001",
    "\u0002\u0318\u0319\u0007=\u0002\u0002\u0319\u031b\b\u0019\u0001\u0002",
    "\u031a\u0318\u0003\u0002\u0002\u0002\u031a\u031b\u0003\u0002\u0002\u0002",
    "\u031b\u031f\u0003\u0002\u0002\u0002\u031c\u031e\u0005\u0016\f\u0002",
    "\u031d\u031c\u0003\u0002\u0002\u0002\u031e\u0321\u0003\u0002\u0002\u0002",
    "\u031f\u031d\u0003\u0002\u0002\u0002\u031f\u0320\u0003\u0002\u0002\u0002",
    "\u0320\u0345\u0003\u0002\u0002\u0002\u0321\u031f\u0003\u0002\u0002\u0002",
    "\u0322\u0323\u0007\u0004\u0002\u0002\u0323\u0329\u0005*\u0016\u0002",
    "\u0324\u0325\u0007\u0005\u0002\u0002\u0325\u0326\b\u0019\u0001\u0002",
    "\u0326\u0328\u0005*\u0016\u0002\u0327\u0324\u0003\u0002\u0002\u0002",
    "\u0328\u032b\u0003\u0002\u0002\u0002\u0329\u0327\u0003\u0002\u0002\u0002",
    "\u0329\u032a\u0003\u0002\u0002\u0002\u032a\u032c\u0003\u0002\u0002\u0002",
    "\u032b\u0329\u0003\u0002\u0002\u0002\u032c\u0336\u0007\u0006\u0002\u0002",
    "\u032d\u032e\u0007A\u0002\u0002\u032e\u0330\u0007\u0004\u0002\u0002",
    "\u032f\u0331\u00052\u001a\u0002\u0330\u032f\u0003\u0002\u0002\u0002",
    "\u0331\u0332\u0003\u0002\u0002\u0002\u0332\u0330\u0003\u0002\u0002\u0002",
    "\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0334\u0003\u0002\u0002\u0002",
    "\u0334\u0335\u0007\u0006\u0002\u0002\u0335\u0337\u0003\u0002\u0002\u0002",
    "\u0336\u032d\u0003\u0002\u0002\u0002\u0336\u0337\u0003\u0002\u0002\u0002",
    "\u0337\u0338\u0003\u0002\u0002\u0002\u0338\u0339\u0005\u001c\u000f\u0002",
    "\u0339\u0346\u0003\u0002\u0002\u0002\u033a\u033b\u0007A\u0002\u0002",
    "\u033b\u033d\u0007\u0004\u0002\u0002\u033c\u033e\u00052\u001a\u0002",
    "\u033d\u033c\u0003\u0002\u0002\u0002\u033e\u033f\u0003\u0002\u0002\u0002",
    "\u033f\u033d\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002",
    "\u0340\u0341\u0003\u0002\u0002\u0002\u0341\u0342\u0007\u0006\u0002\u0002",
    "\u0342\u0343\u0005\u001c\u000f\u0002\u0343\u0346\u0003\u0002\u0002\u0002",
    "\u0344\u0346\u0005\u001a\u000e\u0002\u0345\u0322\u0003\u0002\u0002\u0002",
    "\u0345\u033a\u0003\u0002\u0002\u0002\u0345\u0344\u0003\u0002\u0002\u0002",
    "\u03461\u0003\u0002\u0002\u0002\u0347\u0349\u0005\u0016\f\u0002\u0348",
    "\u0347\u0003\u0002\u0002\u0002\u0349\u034c\u0003\u0002\u0002\u0002\u034a",
    "\u0348\u0003\u0002\u0002\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034b",
    "\u0367\u0003\u0002\u0002\u0002\u034c\u034a\u0003\u0002\u0002\u0002\u034d",
    "\u034e\u0007@\u0002\u0002\u034e\u034f\u0005\u010c\u0087\u0002\u034f",
    "\u0353\b\u001a\u0001\u0002\u0350\u0352\u0005\u0014\u000b\u0002\u0351",
    "\u0350\u0003\u0002\u0002\u0002\u0352\u0355\u0003\u0002\u0002\u0002\u0353",
    "\u0351\u0003\u0002\u0002\u0002\u0353\u0354\u0003\u0002\u0002\u0002\u0354",
    "\u0356\u0003\u0002\u0002\u0002\u0355\u0353\u0003\u0002\u0002\u0002\u0356",
    "\u0359\u0005`1\u0002\u0357\u035a\u0005\u00b0Y\u0002\u0358\u035a\u0005",
    "\u001a\u000e\u0002\u0359\u0357\u0003\u0002\u0002\u0002\u0359\u0358\u0003",
    "\u0002\u0002\u0002\u035a\u0368\u0003\u0002\u0002\u0002\u035b\u035c\u0007",
    "v\u0002\u0002\u035c\u035d\u0005\u010c\u0087\u0002\u035d\u0361\b\u001a",
    "\u0001\u0002\u035e\u0360\u0005\u0014\u000b\u0002\u035f\u035e\u0003\u0002",
    "\u0002\u0002\u0360\u0363\u0003\u0002\u0002\u0002\u0361\u035f\u0003\u0002",
    "\u0002\u0002\u0361\u0362\u0003\u0002\u0002\u0002\u0362\u0364\u0003\u0002",
    "\u0002\u0002\u0363\u0361\u0003\u0002\u0002\u0002\u0364\u0365\u0005`",
    "1\u0002\u0365\u0366\u0005\u00b0Y\u0002\u0366\u0368\u0003\u0002\u0002",
    "\u0002\u0367\u034d\u0003\u0002\u0002\u0002\u0367\u035b\u0003\u0002\u0002",
    "\u0002\u03683\u0003\u0002\u0002\u0002\u0369\u036a\u0007@\u0002\u0002",
    "\u036a\u036b\u0005\u0108\u0085\u0002\u036b\u036f\b\u001b\u0001\u0002",
    "\u036c\u036e\u0005\u0014\u000b\u0002\u036d\u036c\u0003\u0002\u0002\u0002",
    "\u036e\u0371\u0003\u0002\u0002\u0002\u036f\u036d\u0003\u0002\u0002\u0002",
    "\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0372\u0003\u0002\u0002\u0002",
    "\u0371\u036f\u0003\u0002\u0002\u0002\u0372\u0375\u0005`1\u0002\u0373",
    "\u0376\u0005\u00b0Y\u0002\u0374\u0376\u0005\u001a\u000e\u0002\u0375",
    "\u0373\u0003\u0002\u0002\u0002\u0375\u0374\u0003\u0002\u0002\u0002\u0376",
    "\u0384\u0003\u0002\u0002\u0002\u0377\u0378\u0007v\u0002\u0002\u0378",
    "\u0379\u0005\u0108\u0085\u0002\u0379\u037d\b\u001b\u0001\u0002\u037a",
    "\u037c\u0005\u0014\u000b\u0002\u037b\u037a\u0003\u0002\u0002\u0002\u037c",
    "\u037f\u0003\u0002\u0002\u0002\u037d\u037b\u0003\u0002\u0002\u0002\u037d",
    "\u037e\u0003\u0002\u0002\u0002\u037e\u0380\u0003\u0002\u0002\u0002\u037f",
    "\u037d\u0003\u0002\u0002\u0002\u0380\u0381\u0005`1\u0002\u0381\u0382",
    "\u0005\u00b0Y\u0002\u0382\u0384\u0003\u0002\u0002\u0002\u0383\u0369",
    "\u0003\u0002\u0002\u0002\u0383\u0377\u0003\u0002\u0002\u0002\u03845",
    "\u0003\u0002\u0002\u0002\u0385\u0386\u0007i\u0002\u0002\u0386\u0387",
    "\u0005\u0108\u0085\u0002\u0387\u038b\b\u001c\u0001\u0002\u0388\u038a",
    "\u0005\u0014\u000b\u0002\u0389\u0388\u0003\u0002\u0002\u0002\u038a\u038d",
    "\u0003\u0002\u0002\u0002\u038b\u0389\u0003\u0002\u0002\u0002\u038b\u038c",
    "\u0003\u0002\u0002\u0002\u038c\u038f\u0003\u0002\u0002\u0002\u038d\u038b",
    "\u0003\u0002\u0002\u0002\u038e\u0390\u0007\t\u0002\u0002\u038f\u038e",
    "\u0003\u0002\u0002\u0002\u038f\u0390\u0003\u0002\u0002\u0002\u0390\u0391",
    "\u0003\u0002\u0002\u0002\u0391\u0392\u0005\u00b4[\u0002\u0392\u0393",
    "\u0005\u001c\u000f\u0002\u03937\u0003\u0002\u0002\u0002\u0394\u0399",
    "\u0007\u00cf\u0002\u0002\u0395\u0396\u0007\u00c6\u0002\u0002\u0396\u0399",
    "\u0007\u00cf\u0002\u0002\u0397\u0399\u0007J\u0002\u0002\u0398\u0394",
    "\u0003\u0002\u0002\u0002\u0398\u0395\u0003\u0002\u0002\u0002\u0398\u0397",
    "\u0003\u0002\u0002\u0002\u0399\u039a\u0003\u0002\u0002\u0002\u039a\u039b",
    "\u0005\u0108\u0085\u0002\u039b\u039f\b\u001d\u0001\u0002\u039c\u039e",
    "\u0005\u0014\u000b\u0002\u039d\u039c\u0003\u0002\u0002\u0002\u039e\u03a1",
    "\u0003\u0002\u0002\u0002\u039f\u039d\u0003\u0002\u0002\u0002\u039f\u03a0",
    "\u0003\u0002\u0002\u0002\u03a0\u03a2\u0003\u0002\u0002\u0002\u03a1\u039f",
    "\u0003\u0002\u0002\u0002\u03a2\u03a3\u0005\u00b2Z\u0002\u03a39\u0003",
    "\u0002\u0002\u0002\u03a4\u03a5\u0007\u00cf\u0002\u0002\u03a5\u03a6\u0005",
    "\u0108\u0085\u0002\u03a6\u03a7\b\u001e\u0001\u0002\u03a7\u03a8\u0005",
    "B\"\u0002\u03a8;\u0003\u0002\u0002\u0002\u03a9\u03aa\u0007G\u0002\u0002",
    "\u03aa\u03ab\u0005\u0108\u0085\u0002\u03ab\u03af\b\u001f\u0001\u0002",
    "\u03ac\u03ae\u0005\u0014\u000b\u0002\u03ad\u03ac\u0003\u0002\u0002\u0002",
    "\u03ae\u03b1\u0003\u0002\u0002\u0002\u03af\u03ad\u0003\u0002\u0002\u0002",
    "\u03af\u03b0\u0003\u0002\u0002\u0002\u03b0\u03b2\u0003\u0002\u0002\u0002",
    "\u03b1\u03af\u0003\u0002\u0002\u0002\u03b2\u03b3\u0005\u00b2Z\u0002",
    "\u03b3=\u0003\u0002\u0002\u0002\u03b4\u03b5\u0007G\u0002\u0002\u03b5",
    "\u03b6\u0005\u0108\u0085\u0002\u03b6\u03b7\b \u0001\u0002\u03b7\u03b8",
    "\u0005B\"\u0002\u03b8?\u0003\u0002\u0002\u0002\u03b9\u03ba\u0005\u0108",
    "\u0085\u0002\u03ba\u03bb\b!\u0001\u0002\u03bb\u03bc\u0005B\"\u0002\u03bc",
    "A\u0003\u0002\u0002\u0002\u03bd\u03be\u0007=\u0002\u0002\u03be\u03c2",
    "\b\"\u0001\u0002\u03bf\u03c1\u0005\u0016\f\u0002\u03c0\u03bf\u0003\u0002",
    "\u0002\u0002\u03c1\u03c4\u0003\u0002\u0002\u0002\u03c2\u03c0\u0003\u0002",
    "\u0002\u0002\u03c2\u03c3\u0003\u0002\u0002\u0002\u03c3\u03d2\u0003\u0002",
    "\u0002\u0002\u03c4\u03c2\u0003\u0002\u0002\u0002\u03c5\u03c6\u0005\u00ac",
    "W\u0002\u03c6\u03c7\u0005\u001a\u000e\u0002\u03c7\u03d3\u0003\u0002",
    "\u0002\u0002\u03c8\u03cc\u0007\u0004\u0002\u0002\u03c9\u03cb\u0005R",
    "*\u0002\u03ca\u03c9\u0003\u0002\u0002\u0002\u03cb\u03ce\u0003\u0002",
    "\u0002\u0002\u03cc\u03ca\u0003\u0002\u0002\u0002\u03cc\u03cd\u0003\u0002",
    "\u0002\u0002\u03cd\u03cf\u0003\u0002\u0002\u0002\u03ce\u03cc\u0003\u0002",
    "\u0002\u0002\u03cf\u03d0\u0007\u0006\u0002\u0002\u03d0\u03d3\u0005\u001c",
    "\u000f\u0002\u03d1\u03d3\u0005\u001a\u000e\u0002\u03d2\u03c5\u0003\u0002",
    "\u0002\u0002\u03d2\u03c8\u0003\u0002\u0002\u0002\u03d2\u03d1\u0003\u0002",
    "\u0002\u0002\u03d3\u03e7\u0003\u0002\u0002\u0002\u03d4\u03d6\u0005\u0016",
    "\f\u0002\u03d5\u03d4\u0003\u0002\u0002\u0002\u03d6\u03d9\u0003\u0002",
    "\u0002\u0002\u03d7\u03d5\u0003\u0002\u0002\u0002\u03d7\u03d8\u0003\u0002",
    "\u0002\u0002\u03d8\u03e4\u0003\u0002\u0002\u0002\u03d9\u03d7\u0003\u0002",
    "\u0002\u0002\u03da\u03de\u0007\u0004\u0002\u0002\u03db\u03dd\u0005R",
    "*\u0002\u03dc\u03db\u0003\u0002\u0002\u0002\u03dd\u03e0\u0003\u0002",
    "\u0002\u0002\u03de\u03dc\u0003\u0002\u0002\u0002\u03de\u03df\u0003\u0002",
    "\u0002\u0002\u03df\u03e1\u0003\u0002\u0002\u0002\u03e0\u03de\u0003\u0002",
    "\u0002\u0002\u03e1\u03e2\u0007\u0006\u0002\u0002\u03e2\u03e5\u0005\u001c",
    "\u000f\u0002\u03e3\u03e5\u0005\u001a\u000e\u0002\u03e4\u03da\u0003\u0002",
    "\u0002\u0002\u03e4\u03e3\u0003\u0002\u0002\u0002\u03e5\u03e7\u0003\u0002",
    "\u0002\u0002\u03e6\u03bd\u0003\u0002\u0002\u0002\u03e6\u03d7\u0003\u0002",
    "\u0002\u0002\u03e7C\u0003\u0002\u0002\u0002\u03e8\u03e9\u0005\u0108",
    "\u0085\u0002\u03e9\u03ec\b#\u0001\u0002\u03ea\u03eb\u0007=\u0002\u0002",
    "\u03eb\u03ed\b#\u0001\u0002\u03ec\u03ea\u0003\u0002\u0002\u0002\u03ec",
    "\u03ed\u0003\u0002\u0002\u0002\u03ed\u03f1\u0003\u0002\u0002\u0002\u03ee",
    "\u03f0\u0005\u0016\f\u0002\u03ef\u03ee\u0003\u0002\u0002\u0002\u03f0",
    "\u03f3\u0003\u0002\u0002\u0002\u03f1\u03ef\u0003\u0002\u0002\u0002\u03f1",
    "\u03f2\u0003\u0002\u0002\u0002\u03f2\u0435\u0003\u0002\u0002\u0002\u03f3",
    "\u03f1\u0003\u0002\u0002\u0002\u03f4\u03f8\u0007\u0004\u0002\u0002\u03f5",
    "\u03f7\u0005F$\u0002\u03f6\u03f5\u0003\u0002\u0002\u0002\u03f7\u03fa",
    "\u0003\u0002\u0002\u0002\u03f8\u03f6\u0003\u0002\u0002\u0002\u03f8\u03f9",
    "\u0003\u0002\u0002\u0002\u03f9\u03fb\u0003\u0002\u0002\u0002\u03fa\u03f8",
    "\u0003\u0002\u0002\u0002\u03fb\u0405\u0007\u0006\u0002\u0002\u03fc\u03fd",
    "\u0007A\u0002\u0002\u03fd\u0401\u0007\u0004\u0002\u0002\u03fe\u0400",
    "\u0005H%\u0002\u03ff\u03fe\u0003\u0002\u0002\u0002\u0400\u0403\u0003",
    "\u0002\u0002\u0002\u0401\u03ff\u0003\u0002\u0002\u0002\u0401\u0402\u0003",
    "\u0002\u0002\u0002\u0402\u0404\u0003\u0002\u0002\u0002\u0403\u0401\u0003",
    "\u0002\u0002\u0002\u0404\u0406\u0007\u0006\u0002\u0002\u0405\u03fc\u0003",
    "\u0002\u0002\u0002\u0405\u0406\u0003\u0002\u0002\u0002\u0406\u0407\u0003",
    "\u0002\u0002\u0002\u0407\u0436\u0005\u001c\u000f\u0002\u0408\u0409\u0007",
    "A\u0002\u0002\u0409\u040d\u0007\u0004\u0002\u0002\u040a\u040c\u0005",
    "H%\u0002\u040b\u040a\u0003\u0002\u0002\u0002\u040c\u040f\u0003\u0002",
    "\u0002\u0002\u040d\u040b\u0003\u0002\u0002\u0002\u040d\u040e\u0003\u0002",
    "\u0002\u0002\u040e\u0410\u0003\u0002\u0002\u0002\u040f\u040d\u0003\u0002",
    "\u0002\u0002\u0410\u0411\u0007\u0006\u0002\u0002\u0411\u0436\u0005\u001c",
    "\u000f\u0002\u0412\u0413\u0007\n\u0002\u0002\u0413\u0419\u0005J&\u0002",
    "\u0414\u0415\u0007\u0005\u0002\u0002\u0415\u0416\b#\u0001\u0002\u0416",
    "\u0418\u0005J&\u0002\u0417\u0414\u0003\u0002\u0002\u0002\u0418\u041b",
    "\u0003\u0002\u0002\u0002\u0419\u0417\u0003\u0002\u0002\u0002\u0419\u041a",
    "\u0003\u0002\u0002\u0002\u041a\u041c\u0003\u0002\u0002\u0002\u041b\u0419",
    "\u0003\u0002\u0002\u0002\u041c\u0428\u0007\u000b\u0002\u0002\u041d\u041e",
    "\u0007\u00b8\u0002\u0002\u041e\u0422\u0007\u0004\u0002\u0002\u041f\u0421",
    "\u0005F$\u0002\u0420\u041f\u0003\u0002\u0002\u0002\u0421\u0424\u0003",
    "\u0002\u0002\u0002\u0422\u0420\u0003\u0002\u0002\u0002\u0422\u0423\u0003",
    "\u0002\u0002\u0002\u0423\u0425\u0003\u0002\u0002\u0002\u0424\u0422\u0003",
    "\u0002\u0002\u0002\u0425\u0426\u0007\u0006\u0002\u0002\u0426\u0429\u0005",
    "\u001c\u000f\u0002\u0427\u0429\u0005\u001a\u000e\u0002\u0428\u041d\u0003",
    "\u0002\u0002\u0002\u0428\u0427\u0003\u0002\u0002\u0002\u0429\u0436\u0003",
    "\u0002\u0002\u0002\u042a\u042b\u0007\u00b8\u0002\u0002\u042b\u042f\u0007",
    "\u0004\u0002\u0002\u042c\u042e\u0005F$\u0002\u042d\u042c\u0003\u0002",
    "\u0002\u0002\u042e\u0431\u0003\u0002\u0002\u0002\u042f\u042d\u0003\u0002",
    "\u0002\u0002\u042f\u0430\u0003\u0002\u0002\u0002\u0430\u0432\u0003\u0002",
    "\u0002\u0002\u0431\u042f\u0003\u0002\u0002\u0002\u0432\u0433\u0007\u0006",
    "\u0002\u0002\u0433\u0436\u0005\u001c\u000f\u0002\u0434\u0436\u0005\u001a",
    "\u000e\u0002\u0435\u03f4\u0003\u0002\u0002\u0002\u0435\u0408\u0003\u0002",
    "\u0002\u0002\u0435\u0412\u0003\u0002\u0002\u0002\u0435\u042a\u0003\u0002",
    "\u0002\u0002\u0435\u0434\u0003\u0002\u0002\u0002\u0436E\u0003\u0002",
    "\u0002\u0002\u0437\u0439\u0005\u0016\f\u0002\u0438\u0437\u0003\u0002",
    "\u0002\u0002\u0439\u043c\u0003\u0002\u0002\u0002\u043a\u0438\u0003\u0002",
    "\u0002\u0002\u043a\u043b\u0003\u0002\u0002\u0002\u043b\u043d\u0003\u0002",
    "\u0002\u0002\u043c\u043a\u0003\u0002\u0002\u0002\u043d\u043e\u0005\u010c",
    "\u0087\u0002\u043e\u0442\b$\u0001\u0002\u043f\u0441\u0005\u0016\f\u0002",
    "\u0440\u043f\u0003\u0002\u0002\u0002\u0441\u0444\u0003\u0002\u0002\u0002",
    "\u0442\u0440\u0003\u0002\u0002\u0002\u0442\u0443\u0003\u0002\u0002\u0002",
    "\u0443\u044f\u0003\u0002\u0002\u0002\u0444\u0442\u0003\u0002\u0002\u0002",
    "\u0445\u0449\u0007\u0004\u0002\u0002\u0446\u0448\u0005F$\u0002\u0447",
    "\u0446\u0003\u0002\u0002\u0002\u0448\u044b\u0003\u0002\u0002\u0002\u0449",
    "\u0447\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002\u044a",
    "\u044c\u0003\u0002\u0002\u0002\u044b\u0449\u0003\u0002\u0002\u0002\u044c",
    "\u044d\u0007\u0006\u0002\u0002\u044d\u0450\u0005\u001c\u000f\u0002\u044e",
    "\u0450\u0005\u001a\u000e\u0002\u044f\u0445\u0003\u0002\u0002\u0002\u044f",
    "\u044e\u0003\u0002\u0002\u0002\u0450G\u0003\u0002\u0002\u0002\u0451",
    "\u0453\u0005\u0016\f\u0002\u0452\u0451\u0003\u0002\u0002\u0002\u0453",
    "\u0456\u0003\u0002\u0002\u0002\u0454\u0452\u0003\u0002\u0002\u0002\u0454",
    "\u0455\u0003\u0002\u0002\u0002\u0455\u0457\u0003\u0002\u0002\u0002\u0456",
    "\u0454\u0003\u0002\u0002\u0002\u0457\u0458\u0005\u010c\u0087\u0002\u0458",
    "\u045c\b%\u0001\u0002\u0459\u045b\u0005\u0016\f\u0002\u045a\u0459\u0003",
    "\u0002\u0002\u0002\u045b\u045e\u0003\u0002\u0002\u0002\u045c\u045a\u0003",
    "\u0002\u0002\u0002\u045c\u045d\u0003\u0002\u0002\u0002\u045d\u046b\u0003",
    "\u0002\u0002\u0002\u045e\u045c\u0003\u0002\u0002\u0002\u045f\u0460\u0007",
    "\n\u0002\u0002\u0460\u0466\u0005J&\u0002\u0461\u0462\u0007\u0005\u0002",
    "\u0002\u0462\u0463\b%\u0001\u0002\u0463\u0465\u0005J&\u0002\u0464\u0461",
    "\u0003\u0002\u0002\u0002\u0465\u0468\u0003\u0002\u0002\u0002\u0466\u0464",
    "\u0003\u0002\u0002\u0002\u0466\u0467\u0003\u0002\u0002\u0002\u0467\u0469",
    "\u0003\u0002\u0002\u0002\u0468\u0466\u0003\u0002\u0002\u0002\u0469\u046a",
    "\u0007\u000b\u0002\u0002\u046a\u046c\u0003\u0002\u0002\u0002\u046b\u045f",
    "\u0003\u0002\u0002\u0002\u046b\u046c\u0003\u0002\u0002\u0002\u046c\u0478",
    "\u0003\u0002\u0002\u0002\u046d\u046e\u0007\u00b8\u0002\u0002\u046e\u0472",
    "\u0007\u0004\u0002\u0002\u046f\u0471\u0005F$\u0002\u0470\u046f\u0003",
    "\u0002\u0002\u0002\u0471\u0474\u0003\u0002\u0002\u0002\u0472\u0470\u0003",
    "\u0002\u0002\u0002\u0472\u0473\u0003\u0002\u0002\u0002\u0473\u0475\u0003",
    "\u0002\u0002\u0002\u0474\u0472\u0003\u0002\u0002\u0002\u0475\u0476\u0007",
    "\u0006\u0002\u0002\u0476\u0479\u0005\u001c\u000f\u0002\u0477\u0479\u0005",
    "\u001a\u000e\u0002\u0478\u046d\u0003\u0002\u0002\u0002\u0478\u0477\u0003",
    "\u0002\u0002\u0002\u0479I\u0003\u0002\u0002\u0002\u047a\u047c\u0005",
    "\u0016\f\u0002\u047b\u047a\u0003\u0002\u0002\u0002\u047c\u047f\u0003",
    "\u0002\u0002\u0002\u047d\u047b\u0003\u0002\u0002\u0002\u047d\u047e\u0003",
    "\u0002\u0002\u0002\u047e\u0480\u0003\u0002\u0002\u0002\u047f\u047d\u0003",
    "\u0002\u0002\u0002\u0480\u0481\u0005\u010c\u0087\u0002\u0481\u0485\b",
    "&\u0001\u0002\u0482\u0484\u0005\u0016\f\u0002\u0483\u0482\u0003\u0002",
    "\u0002\u0002\u0484\u0487\u0003\u0002\u0002\u0002\u0485\u0483\u0003\u0002",
    "\u0002\u0002\u0485\u0486\u0003\u0002\u0002\u0002\u0486K\u0003\u0002",
    "\u0002\u0002\u0487\u0485\u0003\u0002\u0002\u0002\u0488\u0489\u0007V",
    "\u0002\u0002\u0489\u048a\u0005\u0108\u0085\u0002\u048a\u048e\b\'\u0001",
    "\u0002\u048b\u048d\u0005\u0014\u000b\u0002\u048c\u048b\u0003\u0002\u0002",
    "\u0002\u048d\u0490\u0003\u0002\u0002\u0002\u048e\u048c\u0003\u0002\u0002",
    "\u0002\u048e\u048f\u0003\u0002\u0002\u0002\u048f\u0492\u0003\u0002\u0002",
    "\u0002\u0490\u048e\u0003\u0002\u0002\u0002\u0491\u0493\u0005\u00aeX",
    "\u0002\u0492\u0491\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002",
    "\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u0495\u0007\u000e\u0002",
    "\u0002\u0495\u0496\u0005\u00e2r\u0002\u0496\u0497\u0005\u001a\u000e",
    "\u0002\u0497M\u0003\u0002\u0002\u0002\u0498\u0499\u0007V\u0002\u0002",
    "\u0499\u049a\u0005\u0108\u0085\u0002\u049a\u049d\b(\u0001\u0002\u049b",
    "\u049c\u0007=\u0002\u0002\u049c\u049e\b(\u0001\u0002\u049d\u049b\u0003",
    "\u0002\u0002\u0002\u049d\u049e\u0003\u0002\u0002\u0002\u049e\u04a2\u0003",
    "\u0002\u0002\u0002\u049f\u04a1\u0005\u0016\f\u0002\u04a0\u049f\u0003",
    "\u0002\u0002\u0002\u04a1\u04a4\u0003\u0002\u0002\u0002\u04a2\u04a0\u0003",
    "\u0002\u0002\u0002\u04a2\u04a3\u0003\u0002\u0002\u0002\u04a3\u04a5\u0003",
    "\u0002\u0002\u0002\u04a4\u04a2\u0003\u0002\u0002\u0002\u04a5\u04a6\u0005",
    "\u001a\u000e\u0002\u04a6O\u0003\u0002\u0002\u0002\u04a7\u04a9\u0005",
    "\u0016\f\u0002\u04a8\u04a7\u0003\u0002\u0002\u0002\u04a9\u04ac\u0003",
    "\u0002\u0002\u0002\u04aa\u04a8\u0003\u0002\u0002\u0002\u04aa\u04ab\u0003",
    "\u0002\u0002\u0002\u04ab\u04ad\u0003\u0002\u0002\u0002\u04ac\u04aa\u0003",
    "\u0002\u0002\u0002\u04ad\u04ae\u0005\u010c\u0087\u0002\u04ae\u04b2\b",
    ")\u0001\u0002\u04af\u04b1\u0005\u0016\f\u0002\u04b0\u04af\u0003\u0002",
    "\u0002\u0002\u04b1\u04b4\u0003\u0002\u0002\u0002\u04b2\u04b0\u0003\u0002",
    "\u0002\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u04be\u0003\u0002",
    "\u0002\u0002\u04b4\u04b2\u0003\u0002\u0002\u0002\u04b5\u04b6\u0007\u000e",
    "\u0002\u0002\u04b6\u04b7\u0005\u00fe\u0080\u0002\u04b7\u04bb\b)\u0001",
    "\u0002\u04b8\u04ba\u0005\u0016\f\u0002\u04b9\u04b8\u0003\u0002\u0002",
    "\u0002\u04ba\u04bd\u0003\u0002\u0002\u0002\u04bb\u04b9\u0003\u0002\u0002",
    "\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc\u04bf\u0003\u0002\u0002",
    "\u0002\u04bd\u04bb\u0003\u0002\u0002\u0002\u04be\u04b5\u0003\u0002\u0002",
    "\u0002\u04be\u04bf\u0003\u0002\u0002\u0002\u04bf\u04c0\u0003\u0002\u0002",
    "\u0002\u04c0\u04c1\u0005\u001a\u000e\u0002\u04c1Q\u0003\u0002\u0002",
    "\u0002\u04c2\u04c4\u0005\u0016\f\u0002\u04c3\u04c2\u0003\u0002\u0002",
    "\u0002\u04c4\u04c7\u0003\u0002\u0002\u0002\u04c5\u04c3\u0003\u0002\u0002",
    "\u0002\u04c5\u04c6\u0003\u0002\u0002\u0002\u04c6\u04cb\u0003\u0002\u0002",
    "\u0002\u04c7\u04c5\u0003\u0002\u0002\u0002\u04c8\u04c9\u0007o\u0002",
    "\u0002\u04c9\u04cc\u0005\\/\u0002\u04ca\u04cc\u0005Z.\u0002\u04cb\u04c8",
    "\u0003\u0002\u0002\u0002\u04cb\u04ca\u0003\u0002\u0002\u0002\u04ccS",
    "\u0003\u0002\u0002\u0002\u04cd\u04cf\u0005\u0016\f\u0002\u04ce\u04cd",
    "\u0003\u0002\u0002\u0002\u04cf\u04d2\u0003\u0002\u0002\u0002\u04d0\u04ce",
    "\u0003\u0002\u0002\u0002\u04d0\u04d1\u0003\u0002\u0002\u0002\u04d1\u04d3",
    "\u0003\u0002\u0002\u0002\u04d2\u04d0\u0003\u0002\u0002\u0002\u04d3\u04d4",
    "\u0005Z.\u0002\u04d4U\u0003\u0002\u0002\u0002\u04d5\u04d6\u0005\u010c",
    "\u0087\u0002\u04d6\u04ee\b,\u0001\u0002\u04d7\u04e8\u0007\t\u0002\u0002",
    "\u04d8\u04dc\u0005\u00ba^\u0002\u04d9\u04dd\u0005\u00c2b\u0002\u04da",
    "\u04dd\u0005\u00c0a\u0002\u04db\u04dd\u0005\u0108\u0085\u0002\u04dc",
    "\u04d9\u0003\u0002\u0002\u0002\u04dc\u04da\u0003\u0002\u0002\u0002\u04dc",
    "\u04db\u0003\u0002\u0002\u0002\u04dd\u04df\u0003\u0002\u0002\u0002\u04de",
    "\u04e0\u0005\u00bc_\u0002\u04df\u04de\u0003\u0002\u0002\u0002\u04df",
    "\u04e0\u0003\u0002\u0002\u0002\u04e0\u04e9\u0003\u0002\u0002\u0002\u04e1",
    "\u04e6\u0005\u00caf\u0002\u04e2\u04e3\u0007\u000e\u0002\u0002\u04e3",
    "\u04e4\u0005\u00e2r\u0002\u04e4\u04e5\b,\u0001\u0002\u04e5\u04e7\u0003",
    "\u0002\u0002\u0002\u04e6\u04e2\u0003\u0002\u0002\u0002\u04e6\u04e7\u0003",
    "\u0002\u0002\u0002\u04e7\u04e9\u0003\u0002\u0002\u0002\u04e8\u04d8\u0003",
    "\u0002\u0002\u0002\u04e8\u04e1\u0003\u0002\u0002\u0002\u04e9\u04ef\u0003",
    "\u0002\u0002\u0002\u04ea\u04eb\u0007\u000e\u0002\u0002\u04eb\u04ec\u0005",
    "\u00e2r\u0002\u04ec\u04ed\b,\u0001\u0002\u04ed\u04ef\u0003\u0002\u0002",
    "\u0002\u04ee\u04d7\u0003\u0002\u0002\u0002\u04ee\u04ea\u0003\u0002\u0002",
    "\u0002\u04ef\u04f0\u0003\u0002\u0002\u0002\u04f0\u04f1\u0005\u001a\u000e",
    "\u0002\u04f1W\u0003\u0002\u0002\u0002\u04f2\u04f4\u0005\u0016\f\u0002",
    "\u04f3\u04f2\u0003\u0002\u0002\u0002\u04f4\u04f5\u0003\u0002\u0002\u0002",
    "\u04f5\u04f3\u0003\u0002\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002",
    "\u04f6\u04f7\u0003\u0002\u0002\u0002\u04f7\u04f8\b-\u0001\u0002\u04f8",
    "Y\u0003\u0002\u0002\u0002\u04f9\u04fb\u0007\u00d7\u0002\u0002\u04fa",
    "\u04f9\u0003\u0002\u0002\u0002\u04fa\u04fb\u0003\u0002\u0002\u0002\u04fb",
    "\u04fd\u0003\u0002\u0002\u0002\u04fc\u04fe\u00072\u0002\u0002\u04fd",
    "\u04fc\u0003\u0002\u0002\u0002\u04fd\u04fe\u0003\u0002\u0002\u0002\u04fe",
    "\u0500\u0003\u0002\u0002\u0002\u04ff\u0501\u0007\u0091\u0002\u0002\u0500",
    "\u04ff\u0003\u0002\u0002\u0002\u0500\u0501\u0003\u0002\u0002\u0002\u0501",
    "\u0503\u0003\u0002\u0002\u0002\u0502\u0504\u0007c\u0002\u0002\u0503",
    "\u0502\u0003\u0002\u0002\u0002\u0503\u0504\u0003\u0002\u0002\u0002\u0504",
    "\u0505\u0003\u0002\u0002\u0002\u0505\u0506\u0005\u010c\u0087\u0002\u0506",
    "\u050a\b.\u0001\u0002\u0507\u0509\u0005\u0014\u000b\u0002\u0508\u0507",
    "\u0003\u0002\u0002\u0002\u0509\u050c\u0003\u0002\u0002\u0002\u050a\u0508",
    "\u0003\u0002\u0002\u0002\u050a\u050b\u0003\u0002\u0002\u0002\u050b\u05ad",
    "\u0003\u0002\u0002\u0002\u050c\u050a\u0003\u0002\u0002\u0002\u050d\u0512",
    "\u0005\u00b4[\u0002\u050e\u050f\u0005h5\u0002\u050f\u0510\u0005\u001a",
    "\u000e\u0002\u0510\u0513\u0003\u0002\u0002\u0002\u0511\u0513\u0005\u001c",
    "\u000f\u0002\u0512\u050e\u0003\u0002\u0002\u0002\u0512\u0511\u0003\u0002",
    "\u0002\u0002\u0513\u05ae\u0003\u0002\u0002\u0002\u0514\u059d\u0007\t",
    "\u0002\u0002\u0515\u0517\u0005\u00b4[\u0002\u0516\u0518\u0005h5\u0002",
    "\u0517\u0516\u0003\u0002\u0002\u0002\u0517\u0518\u0003\u0002\u0002\u0002",
    "\u0518\u051a\u0003\u0002\u0002\u0002\u0519\u051b\u0005X-\u0002\u051a",
    "\u0519\u0003\u0002\u0002\u0002\u051a\u051b\u0003\u0002\u0002\u0002\u051b",
    "\u051c\u0003\u0002\u0002\u0002\u051c\u051d\u0005\u001a\u000e\u0002\u051d",
    "\u059e\u0003\u0002\u0002\u0002\u051e\u0535\u0005\u00ba^\u0002\u051f",
    "\u0520\u0005\u00b4[\u0002\u0520\u0521\u0005\u001c\u000f\u0002\u0521",
    "\u0536\u0003\u0002\u0002\u0002\u0522\u0523\u0007\u00a4\u0002\u0002\u0523",
    "\u0524\b.\u0001\u0002\u0524\u0525\u0005\u00b6\\\u0002\u0525\u0526\u0005",
    "\u001c\u000f\u0002\u0526\u0536\u0003\u0002\u0002\u0002\u0527\u0528\u0007",
    "\u0090\u0002\u0002\u0528\u0529\b.\u0001\u0002\u0529\u052a\u0005\u00b6",
    "\\\u0002\u052a\u052b\u0005\u001c\u000f\u0002\u052b\u0536\u0003\u0002",
    "\u0002\u0002\u052c\u052d\u0005\u00c2b\u0002\u052d\u052e\u0005\u00be",
    "`\u0002\u052e\u0536\u0003\u0002\u0002\u0002\u052f\u0530\u0005\u00c0",
    "a\u0002\u0530\u0531\u0005\u00be`\u0002\u0531\u0536\u0003\u0002\u0002",
    "\u0002\u0532\u0533\u0005\u0108\u0085\u0002\u0533\u0534\u0005\u00be`",
    "\u0002\u0534\u0536\u0003\u0002\u0002\u0002\u0535\u051f\u0003\u0002\u0002",
    "\u0002\u0535\u0522\u0003\u0002\u0002\u0002\u0535\u0527\u0003\u0002\u0002",
    "\u0002\u0535\u052c\u0003\u0002\u0002\u0002\u0535\u052f\u0003\u0002\u0002",
    "\u0002\u0535\u0532\u0003\u0002\u0002\u0002\u0536\u059e\u0003\u0002\u0002",
    "\u0002\u0537\u0538\u0007H\u0002\u0002\u0538\u0539\u00076\u0002\u0002",
    "\u0539\u0559\b.\u0001\u0002\u053a\u053c\u0005\u00b4[\u0002\u053b\u053d",
    "\u0005X-\u0002\u053c\u053b\u0003\u0002\u0002\u0002\u053c\u053d\u0003",
    "\u0002\u0002\u0002\u053d\u055a\u0003\u0002\u0002\u0002\u053e\u0542\u0005",
    "\u00c8e\u0002\u053f\u0541\u0005\u0016\f\u0002\u0540\u053f\u0003\u0002",
    "\u0002\u0002\u0541\u0544\u0003\u0002\u0002\u0002\u0542\u0540\u0003\u0002",
    "\u0002\u0002\u0542\u0543\u0003\u0002\u0002\u0002\u0543\u055a\u0003\u0002",
    "\u0002\u0002\u0544\u0542\u0003\u0002\u0002\u0002\u0545\u0549\u0005\u00ca",
    "f\u0002\u0546\u0548\u0005\u0016\f\u0002\u0547\u0546\u0003\u0002\u0002",
    "\u0002\u0548\u054b\u0003\u0002\u0002\u0002\u0549\u0547\u0003\u0002\u0002",
    "\u0002\u0549\u054a\u0003\u0002\u0002\u0002\u054a\u0557\u0003\u0002\u0002",
    "\u0002\u054b\u0549\u0003\u0002\u0002\u0002\u054c\u054d\u0007h\u0002",
    "\u0002\u054d\u054f\u0007\u0004\u0002\u0002\u054e\u0550\u0005P)\u0002",
    "\u054f\u054e\u0003\u0002\u0002\u0002\u0550\u0551\u0003\u0002\u0002\u0002",
    "\u0551\u054f\u0003\u0002\u0002\u0002\u0551\u0552\u0003\u0002\u0002\u0002",
    "\u0552\u0553\u0003\u0002\u0002\u0002\u0553\u0555\u0007\u0006\u0002\u0002",
    "\u0554\u0556\u0005X-\u0002\u0555\u0554\u0003\u0002\u0002\u0002\u0555",
    "\u0556\u0003\u0002\u0002\u0002\u0556\u0558\u0003\u0002\u0002\u0002\u0557",
    "\u054c\u0003\u0002\u0002\u0002\u0557\u0558\u0003\u0002\u0002\u0002\u0558",
    "\u055a\u0003\u0002\u0002\u0002\u0559\u053a\u0003\u0002\u0002\u0002\u0559",
    "\u053e\u0003\u0002\u0002\u0002\u0559\u0545\u0003\u0002\u0002\u0002\u055a",
    "\u055b\u0003\u0002\u0002\u0002\u055b\u055c\u0005\u001a\u000e\u0002\u055c",
    "\u059e\u0003\u0002\u0002\u0002\u055d\u055f\u0005\u00c8e\u0002\u055e",
    "\u0560\u0005j6\u0002\u055f\u055e\u0003\u0002\u0002\u0002\u055f\u0560",
    "\u0003\u0002\u0002\u0002\u0560\u0564\u0003\u0002\u0002\u0002\u0561\u0563",
    "\u0005\u0016\f\u0002\u0562\u0561\u0003\u0002\u0002\u0002\u0563\u0566",
    "\u0003\u0002\u0002\u0002\u0564\u0562\u0003\u0002\u0002\u0002\u0564\u0565",
    "\u0003\u0002\u0002\u0002\u0565\u0567\u0003\u0002\u0002\u0002\u0566\u0564",
    "\u0003\u0002\u0002\u0002\u0567\u0568\u0005\u001a\u000e\u0002\u0568\u059e",
    "\u0003\u0002\u0002\u0002\u0569\u056a\u0007\u008f\u0002\u0002\u056a\u056b",
    "\b.\u0001\u0002\u056b\u056f\u0005\u00caf\u0002\u056c\u056e\u0005\u0016",
    "\f\u0002\u056d\u056c\u0003\u0002\u0002\u0002\u056e\u0571\u0003\u0002",
    "\u0002\u0002\u056f\u056d\u0003\u0002\u0002\u0002\u056f\u0570\u0003\u0002",
    "\u0002\u0002\u0570\u0579\u0003\u0002\u0002\u0002\u0571\u056f\u0003\u0002",
    "\u0002\u0002\u0572\u0576\u0005j6\u0002\u0573\u0575\u0005\u0016\f\u0002",
    "\u0574\u0573\u0003\u0002\u0002\u0002\u0575\u0578\u0003\u0002\u0002\u0002",
    "\u0576\u0574\u0003\u0002\u0002\u0002\u0576\u0577\u0003\u0002\u0002\u0002",
    "\u0577\u057a\u0003\u0002\u0002\u0002\u0578\u0576\u0003\u0002\u0002\u0002",
    "\u0579\u0572\u0003\u0002\u0002\u0002\u0579\u057a\u0003\u0002\u0002\u0002",
    "\u057a\u057b\u0003\u0002\u0002\u0002\u057b\u057c\u0005\u001a\u000e\u0002",
    "\u057c\u059e\u0003\u0002\u0002\u0002\u057d\u0581\u0005\u00caf\u0002",
    "\u057e\u0580\u0005\u0016\f\u0002\u057f\u057e\u0003\u0002\u0002\u0002",
    "\u0580\u0583\u0003\u0002\u0002\u0002\u0581\u057f\u0003\u0002\u0002\u0002",
    "\u0581\u0582\u0003\u0002\u0002\u0002\u0582\u0599\u0003\u0002\u0002\u0002",
    "\u0583\u0581\u0003\u0002\u0002\u0002\u0584\u0585\u0007h\u0002\u0002",
    "\u0585\u0587\u0007\u0004\u0002\u0002\u0586\u0588\u0005P)\u0002\u0587",
    "\u0586\u0003\u0002\u0002\u0002\u0588\u0589\u0003\u0002\u0002\u0002\u0589",
    "\u0587\u0003\u0002\u0002\u0002\u0589\u058a\u0003\u0002\u0002\u0002\u058a",
    "\u058b\u0003\u0002\u0002\u0002\u058b\u058d\u0007\u0006\u0002\u0002\u058c",
    "\u058e\u0005j6\u0002\u058d\u058c\u0003\u0002\u0002\u0002\u058d\u058e",
    "\u0003\u0002\u0002\u0002\u058e\u0590\u0003\u0002\u0002\u0002\u058f\u0591",
    "\u0005X-\u0002\u0590\u058f\u0003\u0002\u0002\u0002\u0590\u0591\u0003",
    "\u0002\u0002\u0002\u0591\u059a\u0003\u0002\u0002\u0002\u0592\u0596\u0005",
    "j6\u0002\u0593\u0595\u0005\u0016\f\u0002\u0594\u0593\u0003\u0002\u0002",
    "\u0002\u0595\u0598\u0003\u0002\u0002\u0002\u0596\u0594\u0003\u0002\u0002",
    "\u0002\u0596\u0597\u0003\u0002\u0002\u0002\u0597\u059a\u0003\u0002\u0002",
    "\u0002\u0598\u0596\u0003\u0002\u0002\u0002\u0599\u0584\u0003\u0002\u0002",
    "\u0002\u0599\u0592\u0003\u0002\u0002\u0002\u0599\u059a\u0003\u0002\u0002",
    "\u0002\u059a\u059b\u0003\u0002\u0002\u0002\u059b\u059c\u0005\u001a\u000e",
    "\u0002\u059c\u059e\u0003\u0002\u0002\u0002\u059d\u0515\u0003\u0002\u0002",
    "\u0002\u059d\u051e\u0003\u0002\u0002\u0002\u059d\u0537\u0003\u0002\u0002",
    "\u0002\u059d\u055d\u0003\u0002\u0002\u0002\u059d\u0569\u0003\u0002\u0002",
    "\u0002\u059d\u057d\u0003\u0002\u0002\u0002\u059e\u05ae\u0003\u0002\u0002",
    "\u0002\u059f\u05a2\u0007)\u0002\u0002\u05a0\u05a2\u0007\u000e\u0002",
    "\u0002\u05a1\u059f\u0003\u0002\u0002\u0002\u05a1\u05a0\u0003\u0002\u0002",
    "\u0002\u05a2\u05a3\u0003\u0002\u0002\u0002\u05a3\u05a4\u0005\u00e2r",
    "\u0002\u05a4\u05a8\b.\u0001\u0002\u05a5\u05a7\u0005\u0016\f\u0002\u05a6",
    "\u05a5\u0003\u0002\u0002\u0002\u05a7\u05aa\u0003\u0002\u0002\u0002\u05a8",
    "\u05a6\u0003\u0002\u0002\u0002\u05a8\u05a9\u0003\u0002\u0002\u0002\u05a9",
    "\u05ab\u0003\u0002\u0002\u0002\u05aa\u05a8\u0003\u0002\u0002\u0002\u05ab",
    "\u05ac\u0005\u001a\u000e\u0002\u05ac\u05ae\u0003\u0002\u0002\u0002\u05ad",
    "\u050d\u0003\u0002\u0002\u0002\u05ad\u0514\u0003\u0002\u0002\u0002\u05ad",
    "\u05a1\u0003\u0002\u0002\u0002\u05ae[\u0003\u0002\u0002\u0002\u05af",
    "\u05b1\u0007c\u0002\u0002\u05b0\u05af\u0003\u0002\u0002\u0002\u05b0",
    "\u05b1\u0003\u0002\u0002\u0002\u05b1\u05b2\u0003\u0002\u0002\u0002\u05b2",
    "\u05b3\u0005\u010c\u0087\u0002\u05b3\u05b4\b/\u0001\u0002\u05b4\u05b5",
    "\u0005B\"\u0002\u05b5]\u0003\u0002\u0002\u0002\u05b6\u05b8\u0005\u0018",
    "\r\u0002\u05b7\u05b6\u0003\u0002\u0002\u0002\u05b8\u05bb\u0003\u0002",
    "\u0002\u0002\u05b9\u05b7\u0003\u0002\u0002\u0002\u05b9\u05ba\u0003\u0002",
    "\u0002\u0002\u05ba\u05bd\u0003\u0002\u0002\u0002\u05bb\u05b9\u0003\u0002",
    "\u0002\u0002\u05bc\u05be\u00072\u0002\u0002\u05bd\u05bc\u0003\u0002",
    "\u0002\u0002\u05bd\u05be\u0003\u0002\u0002\u0002\u05be\u05db\u0003\u0002",
    "\u0002\u0002\u05bf\u05c7\u0005\u00e2r\u0002\u05c0\u05c1\u0007)\u0002",
    "\u0002\u05c1\u05c2\u0005\u010c\u0087\u0002\u05c2\u05c3\b0\u0001\u0002",
    "\u05c3\u05c8\u0003\u0002\u0002\u0002\u05c4\u05c5\u0005\u010c\u0087\u0002",
    "\u05c5\u05c6\b0\u0001\u0002\u05c6\u05c8\u0003\u0002\u0002\u0002\u05c7",
    "\u05c0\u0003\u0002\u0002\u0002\u05c7\u05c4\u0003\u0002\u0002\u0002\u05c7",
    "\u05c8\u0003\u0002\u0002\u0002\u05c8\u05c9\u0003\u0002\u0002\u0002\u05c9",
    "\u05cd\b0\u0001\u0002\u05ca\u05ce\u0005\u00fc\u007f\u0002\u05cb\u05cc",
    "\u0007\u00dc\u0002\u0002\u05cc\u05ce\u0005\u00fc\u007f\u0002\u05cd\u05ca",
    "\u0003\u0002\u0002\u0002\u05cd\u05cb\u0003\u0002\u0002\u0002\u05cd\u05ce",
    "\u0003\u0002\u0002\u0002\u05ce\u05dc\u0003\u0002\u0002\u0002\u05cf\u05d7",
    "\u0005\u00fc\u007f\u0002\u05d0\u05d1\u0007)\u0002\u0002\u05d1\u05d2",
    "\u0005\u010c\u0087\u0002\u05d2\u05d3\b0\u0001\u0002\u05d3\u05d8\u0003",
    "\u0002\u0002\u0002\u05d4\u05d5\u0005\u010c\u0087\u0002\u05d5\u05d6\b",
    "0\u0001\u0002\u05d6\u05d8\u0003\u0002\u0002\u0002\u05d7\u05d0\u0003",
    "\u0002\u0002\u0002\u05d7\u05d4\u0003\u0002\u0002\u0002\u05d8\u05d9\u0003",
    "\u0002\u0002\u0002\u05d9\u05da\b0\u0001\u0002\u05da\u05dc\u0003\u0002",
    "\u0002\u0002\u05db\u05bf\u0003\u0002\u0002\u0002\u05db\u05cf\u0003\u0002",
    "\u0002\u0002\u05dc\u05e0\u0003\u0002\u0002\u0002\u05dd\u05df\u0005\u0014",
    "\u000b\u0002\u05de\u05dd\u0003\u0002\u0002\u0002\u05df\u05e2\u0003\u0002",
    "\u0002\u0002\u05e0\u05de\u0003\u0002\u0002\u0002\u05e0\u05e1\u0003\u0002",
    "\u0002\u0002\u05e1\u05ee\u0003\u0002\u0002\u0002\u05e2\u05e0\u0003\u0002",
    "\u0002\u0002\u05e3\u05ea\u0007\t\u0002\u0002\u05e4\u05e5\u0007\u00b6",
    "\u0002\u0002\u05e5\u05e6\u0007\u00ce\u0002\u0002\u05e6\u05e7\b0\u0001",
    "\u0002\u05e7\u05eb\u0005\u0108\u0085\u0002\u05e8\u05eb\u0005\u00c8e",
    "\u0002\u05e9\u05eb\u0005\u00caf\u0002\u05ea\u05e4\u0003\u0002\u0002",
    "\u0002\u05ea\u05e8\u0003\u0002\u0002\u0002\u05ea\u05e9\u0003\u0002\u0002",
    "\u0002\u05eb\u05ec\u0003\u0002\u0002\u0002\u05ec\u05ed\b0\u0001\u0002",
    "\u05ed\u05ef\u0003\u0002\u0002\u0002\u05ee\u05e3\u0003\u0002\u0002\u0002",
    "\u05ee\u05ef\u0003\u0002\u0002\u0002\u05ef_\u0003\u0002\u0002\u0002",
    "\u05f0\u05fa\u0007\n\u0002\u0002\u05f1\u05f7\u0005b2\u0002\u05f2\u05f3",
    "\u0007\u0005\u0002\u0002\u05f3\u05f4\b1\u0001\u0002\u05f4\u05f6\u0005",
    "b2\u0002\u05f5\u05f2\u0003\u0002\u0002\u0002\u05f6\u05f9\u0003\u0002",
    "\u0002\u0002\u05f7\u05f5\u0003\u0002\u0002\u0002\u05f7\u05f8\u0003\u0002",
    "\u0002\u0002\u05f8\u05fb\u0003\u0002\u0002\u0002\u05f9\u05f7\u0003\u0002",
    "\u0002\u0002\u05fa\u05f1\u0003\u0002\u0002\u0002\u05fa\u05fb\u0003\u0002",
    "\u0002\u0002\u05fb\u05fc\u0003\u0002\u0002\u0002\u05fc\u05fd\u0007\u000b",
    "\u0002\u0002\u05fda\u0003\u0002\u0002\u0002\u05fe\u0600\u0005\u0016",
    "\f\u0002\u05ff\u05fe\u0003\u0002\u0002\u0002\u0600\u0603\u0003\u0002",
    "\u0002\u0002\u0601\u05ff\u0003\u0002\u0002\u0002\u0601\u0602\u0003\u0002",
    "\u0002\u0002\u0602\u0604\u0003\u0002\u0002\u0002\u0603\u0601\u0003\u0002",
    "\u0002\u0002\u0604\u0605\u0005\u010c\u0087\u0002\u0605\u0609\b2\u0001",
    "\u0002\u0606\u0608\u0005\u0014\u000b\u0002\u0607\u0606\u0003\u0002\u0002",
    "\u0002\u0608\u060b\u0003\u0002\u0002\u0002\u0609\u0607\u0003\u0002\u0002",
    "\u0002\u0609\u060a\u0003\u0002\u0002\u0002\u060a\u060c\u0003\u0002\u0002",
    "\u0002\u060b\u0609\u0003\u0002\u0002\u0002\u060c\u060e\u0005\u00aeX",
    "\u0002\u060d\u060f\u0005h5\u0002\u060e\u060d\u0003\u0002\u0002\u0002",
    "\u060e\u060f\u0003\u0002\u0002\u0002\u060f\u0613\u0003\u0002\u0002\u0002",
    "\u0610\u0612\u0005\u0016\f\u0002\u0611\u0610\u0003\u0002\u0002\u0002",
    "\u0612\u0615\u0003\u0002\u0002\u0002\u0613\u0611\u0003\u0002\u0002\u0002",
    "\u0613\u0614\u0003\u0002\u0002\u0002\u0614c\u0003\u0002\u0002\u0002",
    "\u0615\u0613\u0003\u0002\u0002\u0002\u0616\u0620\u0007\n\u0002\u0002",
    "\u0617\u061d\u0005f4\u0002\u0618\u0619\u0007\u0005\u0002\u0002\u0619",
    "\u061a\b3\u0001\u0002\u061a\u061c\u0005f4\u0002\u061b\u0618\u0003\u0002",
    "\u0002\u0002\u061c\u061f\u0003\u0002\u0002\u0002\u061d\u061b\u0003\u0002",
    "\u0002\u0002\u061d\u061e\u0003\u0002\u0002\u0002\u061e\u0621\u0003\u0002",
    "\u0002\u0002\u061f\u061d\u0003\u0002\u0002\u0002\u0620\u0617\u0003\u0002",
    "\u0002\u0002\u0620\u0621\u0003\u0002\u0002\u0002\u0621\u0622\u0003\u0002",
    "\u0002\u0002\u0622\u0623\u0007\u000b\u0002\u0002\u0623e\u0003\u0002",
    "\u0002\u0002\u0624\u0626\u0005\u0016\f\u0002\u0625\u0624\u0003\u0002",
    "\u0002\u0002\u0626\u0629\u0003\u0002\u0002\u0002\u0627\u0625\u0003\u0002",
    "\u0002\u0002\u0627\u0628\u0003\u0002\u0002\u0002\u0628\u062a\u0003\u0002",
    "\u0002\u0002\u0629\u0627\u0003\u0002\u0002\u0002\u062a\u062b\u0005\u010c",
    "\u0087\u0002\u062b\u062f\b4\u0001\u0002\u062c\u062e\u0005\u0014\u000b",
    "\u0002\u062d\u062c\u0003\u0002\u0002\u0002\u062e\u0631\u0003\u0002\u0002",
    "\u0002\u062f\u062d\u0003\u0002\u0002\u0002\u062f\u0630\u0003\u0002\u0002",
    "\u0002\u0630\u0632\u0003\u0002\u0002\u0002\u0631\u062f\u0003\u0002\u0002",
    "\u0002\u0632\u0633\u0005\u00aeX\u0002\u0633g\u0003\u0002\u0002\u0002",
    "\u0634\u0635\u00074\u0002\u0002\u0635\u0636\u00075\u0002\u0002\u0636",
    "\u063a\b5\u0001\u0002\u0637\u0638\u00075\u0002\u0002\u0638\u063a\b5",
    "\u0001\u0002\u0639\u0634\u0003\u0002\u0002\u0002\u0639\u0637\u0003\u0002",
    "\u0002\u0002\u063ai\u0003\u0002\u0002\u0002\u063b\u0640\u0005h5\u0002",
    "\u063c\u063d\u0007\\\u0002\u0002\u063d\u063e\u0005\u00e2r\u0002\u063e",
    "\u063f\b6\u0001\u0002\u063f\u0641\u0003\u0002\u0002\u0002\u0640\u063c",
    "\u0003\u0002\u0002\u0002\u0640\u0641\u0003\u0002\u0002\u0002\u0641\u0664",
    "\u0003\u0002\u0002\u0002\u0642\u0643\u0007\\\u0002\u0002\u0643\u0644",
    "\u0005\u00e2r\u0002\u0644\u0645\b6\u0001\u0002\u0645\u0647\u0003\u0002",
    "\u0002\u0002\u0646\u0648\u0005h5\u0002\u0647\u0646\u0003\u0002\u0002",
    "\u0002\u0647\u0648\u0003\u0002\u0002\u0002\u0648\u0664\u0003\u0002\u0002",
    "\u0002\u0649\u064a\u0007x\u0002\u0002\u064a\u065b\b6\u0001\u0002\u064b",
    "\u064c\u0007C\u0002\u0002\u064c\u0652\u0007)\u0002\u0002\u064d\u064f",
    "\u0007\u007f\u0002\u0002\u064e\u0650\u0005l7\u0002\u064f\u064e\u0003",
    "\u0002\u0002\u0002\u064f\u0650\u0003\u0002\u0002\u0002\u0650\u0653\u0003",
    "\u0002\u0002\u0002\u0651\u0653\u0005\u00e2r\u0002\u0652\u064d\u0003",
    "\u0002\u0002\u0002\u0652\u0651\u0003\u0002\u0002\u0002\u0653\u065c\u0003",
    "\u0002\u0002\u0002\u0654\u0655\u0007*\u0002\u0002\u0655\u0656\u0007",
    "\\\u0002\u0002\u0656\u0657\u0007)\u0002\u0002\u0657\u0659\u0007\u007f",
    "\u0002\u0002\u0658\u065a\u0005l7\u0002\u0659\u0658\u0003\u0002\u0002",
    "\u0002\u0659\u065a\u0003\u0002\u0002\u0002\u065a\u065c\u0003\u0002\u0002",
    "\u0002\u065b\u064b\u0003\u0002\u0002\u0002\u065b\u0654\u0003\u0002\u0002",
    "\u0002\u065c\u0664\u0003\u0002\u0002\u0002\u065d\u0660\u0007)\u0002",
    "\u0002\u065e\u0660\u0007\u000e\u0002\u0002\u065f\u065d\u0003\u0002\u0002",
    "\u0002\u065f\u065e\u0003\u0002\u0002\u0002\u0660\u0661\u0003\u0002\u0002",
    "\u0002\u0661\u0662\b6\u0001\u0002\u0662\u0664\u0005\u00e2r\u0002\u0663",
    "\u063b\u0003\u0002\u0002\u0002\u0663\u0642\u0003\u0002\u0002\u0002\u0663",
    "\u0649\u0003\u0002\u0002\u0002\u0663\u065f\u0003\u0002\u0002\u0002\u0664",
    "k\u0003\u0002\u0002\u0002\u0665\u068b\u0007\n\u0002\u0002\u0666\u0667",
    "\u0007\u00c0\u0002\u0002\u0667\u0668\u0007=\u0002\u0002\u0668\u0669",
    "\u0005\u00fe\u0080\u0002\u0669\u066a\b7\u0001\u0002\u066a\u068a\u0003",
    "\u0002\u0002\u0002\u066b\u066c\u0007\u0080\u0002\u0002\u066c\u066d\u0007",
    "*\u0002\u0002\u066d\u066e\u0005\u00fe\u0080\u0002\u066e\u066f\b7\u0001",
    "\u0002\u066f\u068a\u0003\u0002\u0002\u0002\u0670\u0671\u0007\u0099\u0002",
    "\u0002\u0671\u0672\u0005\u00fe\u0080\u0002\u0672\u0673\b7\u0001\u0002",
    "\u0673\u068a\u0003\u0002\u0002\u0002\u0674\u0675\u0007\u0092\u0002\u0002",
    "\u0675\u0676\u0005\u00fe\u0080\u0002\u0676\u0677\b7\u0001\u0002\u0677",
    "\u068a\u0003\u0002\u0002\u0002\u0678\u0679\u0007Q\u0002\u0002\u0679",
    "\u067a\u0005\u00fe\u0080\u0002\u067a\u067b\b7\u0001\u0002\u067b\u068a",
    "\u0003\u0002\u0002\u0002\u067c\u067d\u0007Z\u0002\u0002\u067d\u068a",
    "\b7\u0001\u0002\u067e\u0687\u0007\u00a0\u0002\u0002\u067f\u0680\u0007",
    "\u0099\u0002\u0002\u0680\u0688\b7\u0001\u0002\u0681\u0682\u0007\u0092",
    "\u0002\u0002\u0682\u0688\b7\u0001\u0002\u0683\u0684\u0007Q\u0002\u0002",
    "\u0684\u0688\b7\u0001\u0002\u0685\u0686\u0007Z\u0002\u0002\u0686\u0688",
    "\b7\u0001\u0002\u0687\u067f\u0003\u0002\u0002\u0002\u0687\u0681\u0003",
    "\u0002\u0002\u0002\u0687\u0683\u0003\u0002\u0002\u0002\u0687\u0685\u0003",
    "\u0002\u0002\u0002\u0688\u068a\u0003\u0002\u0002\u0002\u0689\u0666\u0003",
    "\u0002\u0002\u0002\u0689\u066b\u0003\u0002\u0002\u0002\u0689\u0670\u0003",
    "\u0002\u0002\u0002\u0689\u0674\u0003\u0002\u0002\u0002\u0689\u0678\u0003",
    "\u0002\u0002\u0002\u0689\u067c\u0003\u0002\u0002\u0002\u0689\u067e\u0003",
    "\u0002\u0002\u0002\u068a\u068d\u0003\u0002\u0002\u0002\u068b\u0689\u0003",
    "\u0002\u0002\u0002\u068b\u068c\u0003\u0002\u0002\u0002\u068c\u0691\u0003",
    "\u0002\u0002\u0002\u068d\u068b\u0003\u0002\u0002\u0002\u068e\u068f\u0007",
    "\u00b7\u0002\u0002\u068f\u0690\u0007*\u0002\u0002\u0690\u0692\u0005",
    "\u00ccg\u0002\u0691\u068e\u0003\u0002\u0002\u0002\u0691\u0692\u0003",
    "\u0002\u0002\u0002\u0692\u0693\u0003\u0002\u0002\u0002\u0693\u0694\u0007",
    "\u000b\u0002\u0002\u0694m\u0003\u0002\u0002\u0002\u0695\u0696\u0007",
    "\u00d6\u0002\u0002\u0696\u0697\u0005\u0108\u0085\u0002\u0697\u069b\b",
    "8\u0001\u0002\u0698\u069a\u0005\u0014\u000b\u0002\u0699\u0698\u0003",
    "\u0002\u0002\u0002\u069a\u069d\u0003\u0002\u0002\u0002\u069b\u0699\u0003",
    "\u0002\u0002\u0002\u069b\u069c\u0003\u0002\u0002\u0002\u069c\u06a9\u0003",
    "\u0002\u0002\u0002\u069d\u069b\u0003\u0002\u0002\u0002\u069e\u06aa\u0005",
    "d3\u0002\u069f\u06a0\t\u0002\u0002\u0002\u06a0\u06a1\u0007\u00ac\u0002",
    "\u0002\u06a1\u06a6\u0005f4\u0002\u06a2\u06a3\u0007\u0005\u0002\u0002",
    "\u06a3\u06a5\u0005f4\u0002\u06a4\u06a2\u0003\u0002\u0002\u0002\u06a5",
    "\u06a8\u0003\u0002\u0002\u0002\u06a6\u06a4\u0003\u0002\u0002\u0002\u06a6",
    "\u06a7\u0003\u0002\u0002\u0002\u06a7\u06aa\u0003\u0002\u0002\u0002\u06a8",
    "\u06a6\u0003\u0002\u0002\u0002\u06a9\u069e\u0003\u0002\u0002\u0002\u06a9",
    "\u069f\u0003\u0002\u0002\u0002\u06a9\u06aa\u0003\u0002\u0002\u0002\u06aa",
    "\u06ab\u0003\u0002\u0002\u0002\u06ab\u06ac\u0007)\u0002\u0002\u06ac",
    "\u06ad\u0005\u00ccg\u0002\u06ad\u06ae\b8\u0001\u0002\u06ae\u06af\u0005",
    "\u001a\u000e\u0002\u06afo\u0003\u0002\u0002\u0002\u06b0\u06b1\u0007",
    "\u00d6\u0002\u0002\u06b1\u06b2\u0005\u0108\u0085\u0002\u06b2\u06c2\b",
    "9\u0001\u0002\u06b3\u06b5\u0007=\u0002\u0002\u06b4\u06b3\u0003\u0002",
    "\u0002\u0002\u06b4\u06b5\u0003\u0002\u0002\u0002\u06b5\u06b6\u0003\u0002",
    "\u0002\u0002\u06b6\u06b7\u0007\u0004\u0002\u0002\u06b7\u06bd\u0005^",
    "0\u0002\u06b8\u06b9\u0007\u0005\u0002\u0002\u06b9\u06ba\b9\u0001\u0002",
    "\u06ba\u06bc\u0005^0\u0002\u06bb\u06b8\u0003\u0002\u0002\u0002\u06bc",
    "\u06bf\u0003\u0002\u0002\u0002\u06bd\u06bb\u0003\u0002\u0002\u0002\u06bd",
    "\u06be\u0003\u0002\u0002\u0002\u06be\u06c0\u0003\u0002\u0002\u0002\u06bf",
    "\u06bd\u0003\u0002\u0002\u0002\u06c0\u06c1\u0007\u0006\u0002\u0002\u06c1",
    "\u06c3\u0003\u0002\u0002\u0002\u06c2\u06b4\u0003\u0002\u0002\u0002\u06c2",
    "\u06c3\u0003\u0002\u0002\u0002\u06c3\u06c4\u0003\u0002\u0002\u0002\u06c4",
    "\u06c5\u0005\u001a\u000e\u0002\u06c5q\u0003\u0002\u0002\u0002\u06c6",
    "\u06c8\u0007\u00c7\u0002\u0002\u06c7\u06c6\u0003\u0002\u0002\u0002\u06c7",
    "\u06c8\u0003\u0002\u0002\u0002\u06c8\u06ca\u0003\u0002\u0002\u0002\u06c9",
    "\u06cb\u0007{\u0002\u0002\u06ca\u06c9\u0003\u0002\u0002\u0002\u06ca",
    "\u06cb\u0003\u0002\u0002\u0002\u06cb\u06cc\u0003\u0002\u0002\u0002\u06cc",
    "\u06cd\u0007U\u0002\u0002\u06cd\u06ce\b:\u0001\u0002\u06ce\u06db\u0007",
    "\u0004\u0002\u0002\u06cf\u06da\u0005t;\u0002\u06d0\u06da\u0005v<\u0002",
    "\u06d1\u06da\u0005x=\u0002\u06d2\u06da\u0005z>\u0002\u06d3\u06da\u0005",
    "~@\u0002\u06d4\u06da\u0005\u0088E\u0002\u06d5\u06da\u0005\u008aF\u0002",
    "\u06d6\u06da\u0005\u00a4S\u0002\u06d7\u06da\u0005\u00a8U\u0002\u06d8",
    "\u06da\u0005\u00aaV\u0002\u06d9\u06cf\u0003\u0002\u0002\u0002\u06d9",
    "\u06d0\u0003\u0002\u0002\u0002\u06d9\u06d1\u0003\u0002\u0002\u0002\u06d9",
    "\u06d2\u0003\u0002\u0002\u0002\u06d9\u06d3\u0003\u0002\u0002\u0002\u06d9",
    "\u06d4\u0003\u0002\u0002\u0002\u06d9\u06d5\u0003\u0002\u0002\u0002\u06d9",
    "\u06d6\u0003\u0002\u0002\u0002\u06d9\u06d7\u0003\u0002\u0002\u0002\u06d9",
    "\u06d8\u0003\u0002\u0002\u0002\u06da\u06dd\u0003\u0002\u0002\u0002\u06db",
    "\u06d9\u0003\u0002\u0002\u0002\u06db\u06dc\u0003\u0002\u0002\u0002\u06dc",
    "\u06de\u0003\u0002\u0002\u0002\u06dd\u06db\u0003\u0002\u0002\u0002\u06de",
    "\u06df\u0007\u0006\u0002\u0002\u06dfs\u0003\u0002\u0002\u0002\u06e0",
    "\u06e1\u0007\u0094\u0002\u0002\u06e1\u06e2\t\u0003\u0002\u0002\u06e2",
    "\u06e3\b;\u0001\u0002\u06e3\u06e4\u0005\u001a\u000e\u0002\u06e4u\u0003",
    "\u0002\u0002\u0002\u06e5\u06e6\t\u0004\u0002\u0002\u06e6\u06e7\u0007",
    "\u00c2\u0002\u0002\u06e7\u06e8\b<\u0001\u0002\u06e8\u06e9\u0005\u001a",
    "\u000e\u0002\u06e9w\u0003\u0002\u0002\u0002\u06ea\u06eb\u0007\u00d3",
    "\u0002\u0002\u06eb\u06ec\u0007p\u0002\u0002\u06ec\u06ed\u0007\u00c1",
    "\u0002\u0002\u06ed\u06ee\u0005\u001a\u000e\u0002\u06ee\u06ef\b=\u0001",
    "\u0002\u06efy\u0003\u0002\u0002\u0002\u06f0\u06f1\u0007\u00d1\u0002",
    "\u0002\u06f1\u06f3\b>\u0001\u0002\u06f2\u06f0\u0003\u0002\u0002\u0002",
    "\u06f2\u06f3\u0003\u0002\u0002\u0002\u06f3\u06f4\u0003\u0002\u0002\u0002",
    "\u06f4\u06f5\u0007\u0081\u0002\u0002\u06f5\u06f6\u0005\u010c\u0087\u0002",
    "\u06f6\u06f7\u00077\u0002\u0002\u06f7\u06f8\u0007\n\u0002\u0002\u06f8",
    "\u06fc\u0005\u0108\u0085\u0002\u06f9\u06fa\u0005|?\u0002\u06fa\u06fb",
    "\b>\u0001\u0002\u06fb\u06fd\u0003\u0002\u0002\u0002\u06fc\u06f9\u0003",
    "\u0002\u0002\u0002\u06fc\u06fd\u0003\u0002\u0002\u0002\u06fd\u06fe\u0003",
    "\u0002\u0002\u0002\u06fe\u070c\b>\u0001\u0002\u06ff\u0700\u0007\u0005",
    "\u0002\u0002\u0700\u0701\b>\u0001\u0002\u0701\u0702\b>\u0001\u0002\u0702",
    "\u0706\u0005\u0108\u0085\u0002\u0703\u0704\u0005|?\u0002\u0704\u0705",
    "\b>\u0001\u0002\u0705\u0707\u0003\u0002\u0002\u0002\u0706\u0703\u0003",
    "\u0002\u0002\u0002\u0706\u0707\u0003\u0002\u0002\u0002\u0707\u0708\u0003",
    "\u0002\u0002\u0002\u0708\u0709\b>\u0001\u0002\u0709\u070b\u0003\u0002",
    "\u0002\u0002\u070a\u06ff\u0003\u0002\u0002\u0002\u070b\u070e\u0003\u0002",
    "\u0002\u0002\u070c\u070a\u0003\u0002\u0002\u0002\u070c\u070d\u0003\u0002",
    "\u0002\u0002\u070d\u070f\u0003\u0002\u0002\u0002\u070e\u070c\u0003\u0002",
    "\u0002\u0002\u070f\u0713\u0007\u000b\u0002\u0002\u0710\u0711\u0005|",
    "?\u0002\u0711\u0712\b>\u0001\u0002\u0712\u0714\u0003\u0002\u0002\u0002",
    "\u0713\u0710\u0003\u0002\u0002\u0002\u0713\u0714\u0003\u0002\u0002\u0002",
    "\u0714\u0715\u0003\u0002\u0002\u0002\u0715\u0716\u0005\u001a\u000e\u0002",
    "\u0716\u0717\b>\u0001\u0002\u0717{\u0003\u0002\u0002\u0002\u0718\u0719",
    "\t\u0005\u0002\u0002\u0719\u071a\b?\u0001\u0002\u071a}\u0003\u0002\u0002",
    "\u0002\u071b\u071c\u0007u\u0002\u0002\u071c\u071d\u0007\u0081\u0002",
    "\u0002\u071d\u071e\u0005\u010c\u0087\u0002\u071e\u071f\u00077\u0002",
    "\u0002\u071f\u0720\u0007\n\u0002\u0002\u0720\u0721\u0005\u0108\u0085",
    "\u0002\u0721\u0722\u0007\u000b\u0002\u0002\u0722\u0726\b@\u0001\u0002",
    "\u0723\u0725\u0005\u0080A\u0002\u0724\u0723\u0003\u0002\u0002\u0002",
    "\u0725\u0728\u0003\u0002\u0002\u0002\u0726\u0724\u0003\u0002\u0002\u0002",
    "\u0726\u0727\u0003\u0002\u0002\u0002\u0727\u0729\u0003\u0002\u0002\u0002",
    "\u0728\u0726\u0003\u0002\u0002\u0002\u0729\u072a\u0005\u001a\u000e\u0002",
    "\u072a\u007f\u0003\u0002\u0002\u0002\u072b\u072c\u0007\u0088\u0002\u0002",
    "\u072c\u0740\bA\u0001\u0002\u072d\u072e\u0007R\u0002\u0002\u072e\u072f",
    "\u0005\u0108\u0085\u0002\u072f\u0730\bA\u0001\u0002\u0730\u0741\u0003",
    "\u0002\u0002\u0002\u0731\u0732\u0007`\u0002\u0002\u0732\u0733\bA\u0001",
    "\u0002\u0733\u0734\u0007\n\u0002\u0002\u0734\u0735\u0007\"\u0002\u0002",
    "\u0735\u073c\bA\u0001\u0002\u0736\u0737\u0007\u0005\u0002\u0002\u0737",
    "\u0738\bA\u0001\u0002\u0738\u0739\u0007\"\u0002\u0002\u0739\u073b\b",
    "A\u0001\u0002\u073a\u0736\u0003\u0002\u0002\u0002\u073b\u073e\u0003",
    "\u0002\u0002\u0002\u073c\u073a\u0003\u0002\u0002\u0002\u073c\u073d\u0003",
    "\u0002\u0002\u0002\u073d\u073f\u0003\u0002\u0002\u0002\u073e\u073c\u0003",
    "\u0002\u0002\u0002\u073f\u0741\u0007\u000b\u0002\u0002\u0740\u072d\u0003",
    "\u0002\u0002\u0002\u0740\u0731\u0003\u0002\u0002\u0002\u0741\u077e\u0003",
    "\u0002\u0002\u0002\u0742\u0743\u0007\u009a\u0002\u0002\u0743\u074a\u0007",
    "\u00cf\u0002\u0002\u0744\u0745\u0007R\u0002\u0002\u0745\u0746\u0005",
    "\u0108\u0085\u0002\u0746\u0747\bA\u0001\u0002\u0747\u074b\u0003\u0002",
    "\u0002\u0002\u0748\u0749\u0007\"\u0002\u0002\u0749\u074b\bA\u0001\u0002",
    "\u074a\u0744\u0003\u0002\u0002\u0002\u074a\u0748\u0003\u0002\u0002\u0002",
    "\u074b\u077e\u0003\u0002\u0002\u0002\u074c\u074d\u0007w\u0002\u0002",
    "\u074d\u074e\u0007\u00bc\u0002\u0002\u074e\u074f\u0007\u0081\u0002\u0002",
    "\u074f\u0750\u0005\u0082B\u0002\u0750\u0751\bA\u0001\u0002\u0751\u077e",
    "\u0003\u0002\u0002\u0002\u0752\u0753\u0007\u00b0\u0002\u0002\u0753\u0754",
    "\u0007\u0081\u0002\u0002\u0754\u0755\u0007\u00b5\u0002\u0002\u0755\u0756",
    "\u0007>\u0002\u0002\u0756\u077e\bA\u0001\u0002\u0757\u0758\u0007U\u0002",
    "\u0002\u0758\u0759\u0007\"\u0002\u0002\u0759\u077e\bA\u0001\u0002\u075a",
    "\u075b\u0007\u00bc\u0002\u0002\u075b\u075c\u0007\u00a5\u0002\u0002\u075c",
    "\u075d\u0005\u0082B\u0002\u075d\u075e\bA\u0001\u0002\u075e\u077e\u0003",
    "\u0002\u0002\u0002\u075f\u0760\u0007q\u0002\u0002\u0760\u0761\u0007",
    "\u00b1\u0002\u0002\u0761\u0762\u0005\u0082B\u0002\u0762\u0763\bA\u0001",
    "\u0002\u0763\u077e\u0003\u0002\u0002\u0002\u0764\u0765\u0007\u00cb\u0002",
    "\u0002\u0765\u0766\u0007\u00be\u0002\u0002\u0766\u0767\u0007\"\u0002",
    "\u0002\u0767\u077e\bA\u0001\u0002\u0768\u077a\u0007\u00c9\u0002\u0002",
    "\u0769\u076a\u0007D\u0002\u0002\u076a\u076b\u0005\u0082B\u0002\u076b",
    "\u076c\bA\u0001\u0002\u076c\u077b\u0003\u0002\u0002\u0002\u076d\u076e",
    "\u0007\u0095\u0002\u0002\u076e\u0778\bA\u0001\u0002\u076f\u0770\u0005",
    "\u0082B\u0002\u0770\u0771\bA\u0001\u0002\u0771\u0779\u0003\u0002\u0002",
    "\u0002\u0772\u0774\u0007U\u0002\u0002\u0773\u0775\u0007\u00aa\u0002",
    "\u0002\u0774\u0773\u0003\u0002\u0002\u0002\u0774\u0775\u0003\u0002\u0002",
    "\u0002\u0775\u0776\u0003\u0002\u0002\u0002\u0776\u0777\u0007\"\u0002",
    "\u0002\u0777\u0779\bA\u0001\u0002\u0778\u076f\u0003\u0002\u0002\u0002",
    "\u0778\u0772\u0003\u0002\u0002\u0002\u0779\u077b\u0003\u0002\u0002\u0002",
    "\u077a\u0769\u0003\u0002\u0002\u0002\u077a\u076d\u0003\u0002\u0002\u0002",
    "\u077b\u077e\u0003\u0002\u0002\u0002\u077c\u077e\u0005\u0084C\u0002",
    "\u077d\u072b\u0003\u0002\u0002\u0002\u077d\u0742\u0003\u0002\u0002\u0002",
    "\u077d\u074c\u0003\u0002\u0002\u0002\u077d\u0752\u0003\u0002\u0002\u0002",
    "\u077d\u0757\u0003\u0002\u0002\u0002\u077d\u075a\u0003\u0002\u0002\u0002",
    "\u077d\u075f\u0003\u0002\u0002\u0002\u077d\u0764\u0003\u0002\u0002\u0002",
    "\u077d\u0768\u0003\u0002\u0002\u0002\u077d\u077c\u0003\u0002\u0002\u0002",
    "\u077e\u0081\u0003\u0002\u0002\u0002\u077f\u0780\t\u0006\u0002\u0002",
    "\u0780\u0781\bB\u0001\u0002\u0781\u0083\u0003\u0002\u0002\u0002\u0782",
    "\u0783\t\u0007\u0002\u0002\u0783\u078c\bC\u0001\u0002\u0784\u0785\t",
    "\b\u0002\u0002\u0785\u0789\bC\u0001\u0002\u0786\u0787\u0005\u0086D\u0002",
    "\u0787\u0788\bC\u0001\u0002\u0788\u078a\u0003\u0002\u0002\u0002\u0789",
    "\u0786\u0003\u0002\u0002\u0002\u0789\u078a\u0003\u0002\u0002\u0002\u078a",
    "\u078c\u0003\u0002\u0002\u0002\u078b\u0782\u0003\u0002\u0002\u0002\u078b",
    "\u0784\u0003\u0002\u0002\u0002\u078c\u0085\u0003\u0002\u0002\u0002\u078d",
    "\u0790\u0007s\u0002\u0002\u078e\u078f\u0007\u00ab\u0002\u0002\u078f",
    "\u0791\bD\u0001\u0002\u0790\u078e\u0003\u0002\u0002\u0002\u0790\u0791",
    "\u0003\u0002\u0002\u0002\u0791\u07a0\u0003\u0002\u0002\u0002\u0792\u0793",
    "\u0007j\u0002\u0002\u0793\u0794\u0007>\u0002\u0002\u0794\u0799\u0007",
    "\u0098\u0002\u0002\u0795\u0796\u0007\u00a6\u0002\u0002\u0796\u0797\u0007",
    "B\u0002\u0002\u0797\u0798\u0007>\u0002\u0002\u0798\u079a\u0007b\u0002",
    "\u0002\u0799\u0795\u0003\u0002\u0002\u0002\u0799\u079a\u0003\u0002\u0002",
    "\u0002\u079a\u079b\u0003\u0002\u0002\u0002\u079b\u07a1\bD\u0001\u0002",
    "\u079c\u079d\u0007B\u0002\u0002\u079d\u079e\u0007>\u0002\u0002\u079e",
    "\u079f\u0007b\u0002\u0002\u079f\u07a1\bD\u0001\u0002\u07a0\u0792\u0003",
    "\u0002\u0002\u0002\u07a0\u079c\u0003\u0002\u0002\u0002\u07a1\u0087\u0003",
    "\u0002\u0002\u0002\u07a2\u07a3\u0007w\u0002\u0002\u07a3\u07a4\u0007",
    "\u00bc\u0002\u0002\u07a4\u07a5\u0007\u0081\u0002\u0002\u07a5\u07a6\u0007",
    "7\u0002\u0002\u07a6\u07a7\u0007\n\u0002\u0002\u07a7\u07a8\u0005\u0108",
    "\u0085\u0002\u07a8\u07a9\u0007\u000b\u0002\u0002\u07a9\u07b2\bE\u0001",
    "\u0002\u07aa\u07ab\u0007w\u0002\u0002\u07ab\u07ac\u0007\u00bc\u0002",
    "\u0002\u07ac\u07ad\u0007\u009c\u0002\u0002\u07ad\u07b0\bE\u0001\u0002",
    "\u07ae\u07af\u0007\"\u0002\u0002\u07af\u07b1\bE\u0001\u0002\u07b0\u07ae",
    "\u0003\u0002\u0002\u0002\u07b0\u07b1\u0003\u0002\u0002\u0002\u07b1\u07b3",
    "\u0003\u0002\u0002\u0002\u07b2\u07aa\u0003\u0002\u0002\u0002\u07b2\u07b3",
    "\u0003\u0002\u0002\u0002\u07b3\u07b4\u0003\u0002\u0002\u0002\u07b4\u07b5",
    "\u0005\u001a\u000e\u0002\u07b5\u0089\u0003\u0002\u0002\u0002\u07b6\u07b7",
    "\u0007\u00ad\u0002\u0002\u07b7\u07b8\u0007*\u0002\u0002\u07b8\u07c5",
    "\bF\u0001\u0002\u07b9\u07ba\u0007\u0087\u0002\u0002\u07ba\u07bb\u0007",
    "n\u0002\u0002\u07bb\u07bc\u0007\u008a\u0002\u0002\u07bc\u07c6\bF\u0001",
    "\u0002\u07bd\u07be\u0005\u008cG\u0002\u07be\u07c3\bF\u0001\u0002\u07bf",
    "\u07c0\u0007\u0005\u0002\u0002\u07c0\u07c1\u0005\u008cG\u0002\u07c1",
    "\u07c2\bF\u0001\u0002\u07c2\u07c4\u0003\u0002\u0002\u0002\u07c3\u07bf",
    "\u0003\u0002\u0002\u0002\u07c3\u07c4\u0003\u0002\u0002\u0002\u07c4\u07c6",
    "\u0003\u0002\u0002\u0002\u07c5\u07b9\u0003\u0002\u0002\u0002\u07c5\u07bd",
    "\u0003\u0002\u0002\u0002\u07c6\u07cf\u0003\u0002\u0002\u0002\u07c7\u07c8",
    "\u0007=\u0002\u0002\u07c8\u07c9\u0007\u00ae\u0002\u0002\u07c9\u07ca",
    "\u00077\u0002\u0002\u07ca\u07cb\u0007(\u0002\u0002\u07cb\u07cc\u0007",
    "S\u0002\u0002\u07cc\u07cd\u0005\u0082B\u0002\u07cd\u07ce\bF\u0001\u0002",
    "\u07ce\u07d0\u0003\u0002\u0002\u0002\u07cf\u07c7\u0003\u0002\u0002\u0002",
    "\u07cf\u07d0\u0003\u0002\u0002\u0002\u07d0\u07d1\u0003\u0002\u0002\u0002",
    "\u07d1\u07d2\u0005\u001a\u000e\u0002\u07d2\u008b\u0003\u0002\u0002\u0002",
    "\u07d3\u07d7\u0005\u008eH\u0002\u07d4\u07d7\u0005\u0090I\u0002\u07d5",
    "\u07d7\u0005\u0096L\u0002\u07d6\u07d3\u0003\u0002\u0002\u0002\u07d6",
    "\u07d4\u0003\u0002\u0002\u0002\u07d6\u07d5\u0003\u0002\u0002\u0002\u07d7",
    "\u008d\u0003\u0002\u0002\u0002\u07d8\u07d9\u0007\u00ba\u0002\u0002\u07d9",
    "\u07da\u0007\u00af\u0002\u0002\u07da\u07db\u0005\u00a2R\u0002\u07db",
    "\u07dc\bH\u0001\u0002\u07dc\u008f\u0003\u0002\u0002\u0002\u07dd\u07de",
    "\u0007|\u0002\u0002\u07de\u07df\u0007\n\u0002\u0002\u07df\u07e0\u0005",
    "\u0092J\u0002\u07e0\u07e1\u0007\u000b\u0002\u0002\u07e1\u07e2\u0007",
    "\u00af\u0002\u0002\u07e2\u07e3\u0005\u00a2R\u0002\u07e3\u07e4\bI\u0001",
    "\u0002\u07e4\u0091\u0003\u0002\u0002\u0002\u07e5\u07e6\u0005\u0094K",
    "\u0002\u07e6\u07ed\bJ\u0001\u0002\u07e7\u07e8\u0007\u0005\u0002\u0002",
    "\u07e8\u07e9\u0005\u0094K\u0002\u07e9\u07ea\bJ\u0001\u0002\u07ea\u07ec",
    "\u0003\u0002\u0002\u0002\u07eb\u07e7\u0003\u0002\u0002\u0002\u07ec\u07ef",
    "\u0003\u0002\u0002\u0002\u07ed\u07eb\u0003\u0002\u0002\u0002\u07ed\u07ee",
    "\u0003\u0002\u0002\u0002\u07ee\u0093\u0003\u0002\u0002\u0002\u07ef\u07ed",
    "\u0003\u0002\u0002\u0002\u07f0\u07f8\u0005\u0108\u0085\u0002\u07f1\u07f2",
    "\t\t\u0002\u0002\u07f2\u07f3\u0007\n\u0002\u0002\u07f3\u07f4\u0005\u0108",
    "\u0085\u0002\u07f4\u07f5\u0007\u000b\u0002\u0002\u07f5\u07f6\bK\u0001",
    "\u0002\u07f6\u07f8\u0003\u0002\u0002\u0002\u07f7\u07f0\u0003\u0002\u0002",
    "\u0002\u07f7\u07f1\u0003\u0002\u0002\u0002\u07f8\u0095\u0003\u0002\u0002",
    "\u0002\u07f9\u07fa\u0007\u00b4\u0002\u0002\u07fa\u07fb\u0007\n\u0002",
    "\u0002\u07fb\u07fc\u0005\u0092J\u0002\u07fc\u07fd\u0007\u000b\u0002",
    "\u0002\u07fd\u07fe\bL\u0001\u0002\u07fe\u0801\u0007\n\u0002\u0002\u07ff",
    "\u0802\u0005\u009cO\u0002\u0800\u0802\u0005\u0098M\u0002\u0801\u07ff",
    "\u0003\u0002\u0002\u0002\u0801\u0800\u0003\u0002\u0002\u0002\u0802\u0803",
    "\u0003\u0002\u0002\u0002\u0803\u0804\u0007\u000b\u0002\u0002\u0804\u0097",
    "\u0003\u0002\u0002\u0002\u0805\u0809\u0005\u009aN\u0002\u0806\u0808",
    "\u0005\u009aN\u0002\u0807\u0806\u0003\u0002\u0002\u0002\u0808\u080b",
    "\u0003\u0002\u0002\u0002\u0809\u0807\u0003\u0002\u0002\u0002\u0809\u080a",
    "\u0003\u0002\u0002\u0002\u080a\u0099\u0003\u0002\u0002\u0002\u080b\u0809",
    "\u0003\u0002\u0002\u0002\u080c\u080d\u0007\u00d3\u0002\u0002\u080d\u080e",
    "\t\n\u0002\u0002\u080e\u080f\u0007\u00c1\u0002\u0002\u080f\u0810\u0007",
    "\n\u0002\u0002\u0810\u0811\u0005\u009cO\u0002\u0811\u0812\u0007\u000b",
    "\u0002\u0002\u0812\u009b\u0003\u0002\u0002\u0002\u0813\u0814\u0005\u009e",
    "P\u0002\u0814\u081b\bO\u0001\u0002\u0815\u0816\u0007\u0005\u0002\u0002",
    "\u0816\u0817\u0005\u009eP\u0002\u0817\u0818\bO\u0001\u0002\u0818\u081a",
    "\u0003\u0002\u0002\u0002\u0819\u0815\u0003\u0002\u0002\u0002\u081a\u081d",
    "\u0003\u0002\u0002\u0002\u081b\u0819\u0003\u0002\u0002\u0002\u081b\u081c",
    "\u0003\u0002\u0002\u0002\u081c\u009d\u0003\u0002\u0002\u0002\u081d\u081b",
    "\u0003\u0002\u0002\u0002\u081e\u0831\u0007\u00ad\u0002\u0002\u081f\u0820",
    "\u0005\u00a0Q\u0002\u0820\u0821\u0007\u000f\u0002\u0002\u0821\u0822",
    "\u0007\u00d5\u0002\u0002\u0822\u0823\u0007\u0010\u0002\u0002\u0823\u0824",
    "\u0005\u00a0Q\u0002\u0824\u0825\bP\u0001\u0002\u0825\u0832\u0003\u0002",
    "\u0002\u0002\u0826\u0827\t\u000b\u0002\u0002\u0827\u0828\u0007\u000e",
    "\u0002\u0002\u0828\u0829\u0005\u00a0Q\u0002\u0829\u082d\bP\u0001\u0002",
    "\u082a\u082b\u0007\u0085\u0002\u0002\u082b\u082c\u0007Y\u0002\u0002",
    "\u082c\u082e\bP\u0001\u0002\u082d\u082a\u0003\u0002\u0002\u0002\u082d",
    "\u082e\u0003\u0002\u0002\u0002\u082e\u0832\u0003\u0002\u0002\u0002\u082f",
    "\u0830\u0007\u00a8\u0002\u0002\u0830\u0832\bP\u0001\u0002\u0831\u081f",
    "\u0003\u0002\u0002\u0002\u0831\u0826\u0003\u0002\u0002\u0002\u0831\u082f",
    "\u0003\u0002\u0002\u0002\u0832\u009f\u0003\u0002\u0002\u0002\u0833\u083b",
    "\u0003\u0002\u0002\u0002\u0834\u0835\u0007>\u0002\u0002\u0835\u083b",
    "\bQ\u0001\u0002\u0836\u0837\u0007\"\u0002\u0002\u0837\u083b\bQ\u0001",
    "\u0002\u0838\u0839\u0007&\u0002\u0002\u0839\u083b\bQ\u0001\u0002\u083a",
    "\u0833\u0003\u0002\u0002\u0002\u083a\u0834\u0003\u0002\u0002\u0002\u083a",
    "\u0836\u0003\u0002\u0002\u0002\u083a\u0838\u0003\u0002\u0002\u0002\u083b",
    "\u00a1\u0003\u0002\u0002\u0002\u083c\u083d\u0007>\u0002\u0002\u083d",
    "\u0843\bR\u0001\u0002\u083e\u083f\u0007y\u0002\u0002\u083f\u0840\u0007",
    "\n\u0002\u0002\u0840\u0841\u0007\u000b\u0002\u0002\u0841\u0843\bR\u0001",
    "\u0002\u0842\u083c\u0003\u0002\u0002\u0002\u0842\u083e\u0003\u0002\u0002",
    "\u0002\u0843\u00a3\u0003\u0002\u0002\u0002\u0844\u0846\u0005\u00a6T",
    "\u0002\u0845\u0844\u0003\u0002\u0002\u0002\u0846\u0847\u0003\u0002\u0002",
    "\u0002\u0847\u0845\u0003\u0002\u0002\u0002\u0847\u0848\u0003\u0002\u0002",
    "\u0002\u0848\u0849\u0003\u0002\u0002\u0002\u0849\u084a\u0005\u001a\u000e",
    "\u0002\u084a\u00a5\u0003\u0002\u0002\u0002\u084b\u084c\u0007z\u0002",
    "\u0002\u084c\u0859\bT\u0001\u0002\u084d\u084e\u0007\u009e\u0002\u0002",
    "\u084e\u084f\u0005\u010c\u0087\u0002\u084f\u0850\bT\u0001\u0002\u0850",
    "\u085a\u0003\u0002\u0002\u0002\u0851\u0852\u0007\u00cf\u0002\u0002\u0852",
    "\u0853\u0005\u010c\u0087\u0002\u0853\u0854\bT\u0001\u0002\u0854\u085a",
    "\u0003\u0002\u0002\u0002\u0855\u0856\u0007\u00c3\u0002\u0002\u0856\u0857",
    "\u0005\u010c\u0087\u0002\u0857\u0858\bT\u0001\u0002\u0858\u085a\u0003",
    "\u0002\u0002\u0002\u0859\u084d\u0003\u0002\u0002\u0002\u0859\u0851\u0003",
    "\u0002\u0002\u0002\u0859\u0855\u0003\u0002\u0002\u0002\u085a\u00a7\u0003",
    "\u0002\u0002\u0002\u085b\u085c\u0007\u00d2\u0002\u0002\u085c\u085d\u0007",
    "\u00b2\u0002\u0002\u085d\u085e\u0007>\u0002\u0002\u085e\u085f\u0005",
    "\u001a\u000e\u0002\u085f\u0860\bU\u0001\u0002\u0860\u00a9\u0003\u0002",
    "\u0002\u0002\u0861\u0863\u0007\u00a0\u0002\u0002\u0862\u0861\u0003\u0002",
    "\u0002\u0002\u0862\u0863\u0003\u0002\u0002\u0002\u0863\u0864\u0003\u0002",
    "\u0002\u0002\u0864\u0865\u0007N\u0002\u0002\u0865\u0866\u0007\u0093",
    "\u0002\u0002\u0866\u0867\u0005\u001a\u000e\u0002\u0867\u0868\bV\u0001",
    "\u0002\u0868\u00ab\u0003\u0002\u0002\u0002\u0869\u086a\u0005\u0108\u0085",
    "\u0002\u086a\u086b\bW\u0001\u0002\u086b\u00ad\u0003\u0002\u0002\u0002",
    "\u086c\u0880\u0005\u00b4[\u0002\u086d\u087d\u0007\t\u0002\u0002\u086e",
    "\u087e\u0005\u00b4[\u0002\u086f\u087e\u0005\u00b8]\u0002\u0870\u087e",
    "\u0005\u00c8e\u0002\u0871\u087b\u0005\u00caf\u0002\u0872\u0873\u0007",
    "h\u0002\u0002\u0873\u0875\u0007\u0004\u0002\u0002\u0874\u0876\u0005",
    "P)\u0002\u0875\u0874\u0003\u0002\u0002\u0002\u0876\u0877\u0003\u0002",
    "\u0002\u0002\u0877\u0875\u0003\u0002\u0002\u0002\u0877\u0878\u0003\u0002",
    "\u0002\u0002\u0878\u0879\u0003\u0002\u0002\u0002\u0879\u087a\u0007\u0006",
    "\u0002\u0002\u087a\u087c\u0003\u0002\u0002\u0002\u087b\u0872\u0003\u0002",
    "\u0002\u0002\u087b\u087c\u0003\u0002\u0002\u0002\u087c\u087e\u0003\u0002",
    "\u0002\u0002\u087d\u086e\u0003\u0002\u0002\u0002\u087d\u086f\u0003\u0002",
    "\u0002\u0002\u087d\u0870\u0003\u0002\u0002\u0002\u087d\u0871\u0003\u0002",
    "\u0002\u0002\u087e\u0880\u0003\u0002\u0002\u0002\u087f\u086c\u0003\u0002",
    "\u0002\u0002\u087f\u086d\u0003\u0002\u0002\u0002\u0880\u00af\u0003\u0002",
    "\u0002\u0002\u0881\u0882\u0007\u00b8\u0002\u0002\u0882\u0893\bY\u0001",
    "\u0002\u0883\u0894\u0005\u00b4[\u0002\u0884\u0894\u0005\u00b8]\u0002",
    "\u0885\u0894\u0005\u00c8e\u0002\u0886\u0891\u0005\u00caf\u0002\u0887",
    "\u0888\u0007h\u0002\u0002\u0888\u088a\u0007\u0004\u0002\u0002\u0889",
    "\u088b\u0005P)\u0002\u088a\u0889\u0003\u0002\u0002\u0002\u088b\u088c",
    "\u0003\u0002\u0002\u0002\u088c\u088a\u0003\u0002\u0002\u0002\u088c\u088d",
    "\u0003\u0002\u0002\u0002\u088d\u088e\u0003\u0002\u0002\u0002\u088e\u088f",
    "\u0007\u0006\u0002\u0002\u088f\u0892\u0003\u0002\u0002\u0002\u0890\u0892",
    "\u0005X-\u0002\u0891\u0887\u0003\u0002\u0002\u0002\u0891\u0890\u0003",
    "\u0002\u0002\u0002\u0891\u0892\u0003\u0002\u0002\u0002\u0892\u0894\u0003",
    "\u0002\u0002\u0002\u0893\u0883\u0003\u0002\u0002\u0002\u0893\u0884\u0003",
    "\u0002\u0002\u0002\u0893\u0885\u0003\u0002\u0002\u0002\u0893\u0886\u0003",
    "\u0002\u0002\u0002\u0894\u0895\u0003\u0002\u0002\u0002\u0895\u0896\u0005",
    "\u001a\u000e\u0002\u0896\u00b1\u0003\u0002\u0002\u0002\u0897\u0898\u0005",
    "\u00b4[\u0002\u0898\u0899\u0005\u001c\u000f\u0002\u0899\u0928\u0003",
    "\u0002\u0002\u0002\u089a\u0925\u0007\t\u0002\u0002\u089b\u089c\u0005",
    "\u00b4[\u0002\u089c\u089d\u0005\u001c\u000f\u0002\u089d\u0926\u0003",
    "\u0002\u0002\u0002\u089e\u08a2\u0005\u00ba^\u0002\u089f\u08a3\u0005",
    "\u00c2b\u0002\u08a0\u08a3\u0005\u00c0a\u0002\u08a1\u08a3\u0005\u0108",
    "\u0085\u0002\u08a2\u089f\u0003\u0002\u0002\u0002\u08a2\u08a0\u0003\u0002",
    "\u0002\u0002\u08a2\u08a1\u0003\u0002\u0002\u0002\u08a3\u08a5\u0003\u0002",
    "\u0002\u0002\u08a4\u08a6\u0005\u00bc_\u0002\u08a5\u08a4\u0003\u0002",
    "\u0002\u0002\u08a5\u08a6\u0003\u0002\u0002\u0002\u08a6\u08a7\u0003\u0002",
    "\u0002\u0002\u08a7\u08a8\u0005\u001a\u000e\u0002\u08a8\u0926\u0003\u0002",
    "\u0002\u0002\u08a9\u08aa\u0007H\u0002\u0002\u08aa\u08ab\u00076\u0002",
    "\u0002\u08ab\u08cc\bZ\u0001\u0002\u08ac\u08ad\u0005\u00b4[\u0002\u08ad",
    "\u08ae\u0005\u001c\u000f\u0002\u08ae\u08cd\u0003\u0002\u0002\u0002\u08af",
    "\u08b3\u0005\u00c8e\u0002\u08b0\u08b2\u0005\u0016\f\u0002\u08b1\u08b0",
    "\u0003\u0002\u0002\u0002\u08b2\u08b5\u0003\u0002\u0002\u0002\u08b3\u08b1",
    "\u0003\u0002\u0002\u0002\u08b3\u08b4\u0003\u0002\u0002\u0002\u08b4\u08b6",
    "\u0003\u0002\u0002\u0002\u08b5\u08b3\u0003\u0002\u0002\u0002\u08b6\u08b7",
    "\u0005\u001a\u000e\u0002\u08b7\u08cd\u0003\u0002\u0002\u0002\u08b8\u08bc",
    "\u0005\u00caf\u0002\u08b9\u08bb\u0005\u0016\f\u0002\u08ba\u08b9\u0003",
    "\u0002\u0002\u0002\u08bb\u08be\u0003\u0002\u0002\u0002\u08bc\u08ba\u0003",
    "\u0002\u0002\u0002\u08bc\u08bd\u0003\u0002\u0002\u0002\u08bd\u08ca\u0003",
    "\u0002\u0002\u0002\u08be\u08bc\u0003\u0002\u0002\u0002\u08bf\u08c0\u0007",
    "h\u0002\u0002\u08c0\u08c2\u0007\u0004\u0002\u0002\u08c1\u08c3\u0005",
    "P)\u0002\u08c2\u08c1\u0003\u0002\u0002\u0002\u08c3\u08c4\u0003\u0002",
    "\u0002\u0002\u08c4\u08c2\u0003\u0002\u0002\u0002\u08c4\u08c5\u0003\u0002",
    "\u0002\u0002\u08c5\u08c6\u0003\u0002\u0002\u0002\u08c6\u08c7\u0007\u0006",
    "\u0002\u0002\u08c7\u08c8\u0005\u001c\u000f\u0002\u08c8\u08cb\u0003\u0002",
    "\u0002\u0002\u08c9\u08cb\u0005\u001a\u000e\u0002\u08ca\u08bf\u0003\u0002",
    "\u0002\u0002\u08ca\u08c9\u0003\u0002\u0002\u0002\u08cb\u08cd\u0003\u0002",
    "\u0002\u0002\u08cc\u08ac\u0003\u0002\u0002\u0002\u08cc\u08af\u0003\u0002",
    "\u0002\u0002\u08cc\u08b8\u0003\u0002\u0002\u0002\u08cd\u0926\u0003\u0002",
    "\u0002\u0002\u08ce\u08d2\u0005\u00c8e\u0002\u08cf\u08d1\u0005\u0016",
    "\f\u0002\u08d0\u08cf\u0003\u0002\u0002\u0002\u08d1\u08d4\u0003\u0002",
    "\u0002\u0002\u08d2\u08d0\u0003\u0002\u0002\u0002\u08d2\u08d3\u0003\u0002",
    "\u0002\u0002\u08d3\u08d5\u0003\u0002\u0002\u0002\u08d4\u08d2\u0003\u0002",
    "\u0002\u0002\u08d5\u08d6\u0005\u001a\u000e\u0002\u08d6\u0926\u0003\u0002",
    "\u0002\u0002\u08d7\u08d8\u0007\u008f\u0002\u0002\u08d8\u08d9\bZ\u0001",
    "\u0002\u08d9\u08dd\u0005\u00caf\u0002\u08da\u08dc\u0005\u0016\f\u0002",
    "\u08db\u08da\u0003\u0002\u0002\u0002\u08dc\u08df\u0003\u0002\u0002\u0002",
    "\u08dd\u08db\u0003\u0002\u0002\u0002\u08dd\u08de\u0003\u0002\u0002\u0002",
    "\u08de\u08e0\u0003\u0002\u0002\u0002\u08df\u08dd\u0003\u0002\u0002\u0002",
    "\u08e0\u08e1\u0005\u001a\u000e\u0002\u08e1\u0926\u0003\u0002\u0002\u0002",
    "\u08e2\u08e3\bZ\u0001\u0002\u08e3\u0923\u0005\u0108\u0085\u0002\u08e4",
    "\u08e5\u0007\n\u0002\u0002\u08e5\u08e6\u0007>\u0002\u0002\u08e6\u08ed",
    "\bZ\u0001\u0002\u08e7\u08e8\u0007\u0005\u0002\u0002\u08e8\u08e9\bZ\u0001",
    "\u0002\u08e9\u08ea\u0007>\u0002\u0002\u08ea\u08ec\bZ\u0001\u0002\u08eb",
    "\u08e7\u0003\u0002\u0002\u0002\u08ec\u08ef\u0003\u0002\u0002\u0002\u08ed",
    "\u08eb\u0003\u0002\u0002\u0002\u08ed\u08ee\u0003\u0002\u0002\u0002\u08ee",
    "\u08f0\u0003\u0002\u0002\u0002\u08ef\u08ed\u0003\u0002\u0002\u0002\u08f0",
    "\u08f4\u0007\u000b\u0002\u0002\u08f1\u08f3\u0005\u0016\f\u0002\u08f2",
    "\u08f1\u0003\u0002\u0002\u0002\u08f3\u08f6\u0003\u0002\u0002\u0002\u08f4",
    "\u08f2\u0003\u0002\u0002\u0002\u08f4\u08f5\u0003\u0002\u0002\u0002\u08f5",
    "\u0902\u0003\u0002\u0002\u0002\u08f6\u08f4\u0003\u0002\u0002\u0002\u08f7",
    "\u08f8\u0007h\u0002\u0002\u08f8\u08fa\u0007\u0004\u0002\u0002\u08f9",
    "\u08fb\u0005P)\u0002\u08fa\u08f9\u0003\u0002\u0002\u0002\u08fb\u08fc",
    "\u0003\u0002\u0002\u0002\u08fc\u08fa\u0003\u0002\u0002\u0002\u08fc\u08fd",
    "\u0003\u0002\u0002\u0002\u08fd\u08fe\u0003\u0002\u0002\u0002\u08fe\u08ff",
    "\u0007\u0006\u0002\u0002\u08ff\u0900\u0005\u001c\u000f\u0002\u0900\u0903",
    "\u0003\u0002\u0002\u0002\u0901\u0903\u0005\u001a\u000e\u0002\u0902\u08f7",
    "\u0003\u0002\u0002\u0002\u0902\u0901\u0003\u0002\u0002\u0002\u0903\u0924",
    "\u0003\u0002\u0002\u0002\u0904\u0906\u0005\u0016\f\u0002\u0905\u0904",
    "\u0003\u0002\u0002\u0002\u0906\u0909\u0003\u0002\u0002\u0002\u0907\u0905",
    "\u0003\u0002\u0002\u0002\u0907\u0908\u0003\u0002\u0002\u0002\u0908\u0915",
    "\u0003\u0002\u0002\u0002\u0909\u0907\u0003\u0002\u0002\u0002\u090a\u090b",
    "\u0007h\u0002\u0002\u090b\u090d\u0007\u0004\u0002\u0002\u090c\u090e",
    "\u0005P)\u0002\u090d\u090c\u0003\u0002\u0002\u0002\u090e\u090f\u0003",
    "\u0002\u0002\u0002\u090f\u090d\u0003\u0002\u0002\u0002\u090f\u0910\u0003",
    "\u0002\u0002\u0002\u0910\u0911\u0003\u0002\u0002\u0002\u0911\u0912\u0007",
    "\u0006\u0002\u0002\u0912\u0913\u0005\u001c\u000f\u0002\u0913\u0916\u0003",
    "\u0002\u0002\u0002\u0914\u0916\u0005\u001a\u000e\u0002\u0915\u090a\u0003",
    "\u0002\u0002\u0002\u0915\u0914\u0003\u0002\u0002\u0002\u0916\u0924\u0003",
    "\u0002\u0002\u0002\u0917\u091d\bZ\u0001\u0002\u0918\u0919\u0007\u0005",
    "\u0002\u0002\u0919\u091a\bZ\u0001\u0002\u091a\u091c\u0005\u00acW\u0002",
    "\u091b\u0918\u0003\u0002\u0002\u0002\u091c\u091f\u0003\u0002\u0002\u0002",
    "\u091d\u091b\u0003\u0002\u0002\u0002\u091d\u091e\u0003\u0002\u0002\u0002",
    "\u091e\u0920\u0003\u0002\u0002\u0002\u091f\u091d\u0003\u0002\u0002\u0002",
    "\u0920\u0921\u0005\u00b4[\u0002\u0921\u0922\u0005\u001c\u000f\u0002",
    "\u0922\u0924\u0003\u0002\u0002\u0002\u0923\u08e4\u0003\u0002\u0002\u0002",
    "\u0923\u0907\u0003\u0002\u0002\u0002\u0923\u0917\u0003\u0002\u0002\u0002",
    "\u0924\u0926\u0003\u0002\u0002\u0002\u0925\u089b\u0003\u0002\u0002\u0002",
    "\u0925\u089e\u0003\u0002\u0002\u0002\u0925\u08a9\u0003\u0002\u0002\u0002",
    "\u0925\u08ce\u0003\u0002\u0002\u0002\u0925\u08d7\u0003\u0002\u0002\u0002",
    "\u0925\u08e2\u0003\u0002\u0002\u0002\u0926\u0928\u0003\u0002\u0002\u0002",
    "\u0927\u0897\u0003\u0002\u0002\u0002\u0927\u089a\u0003\u0002\u0002\u0002",
    "\u0928\u00b3\u0003\u0002\u0002\u0002\u0929\u092a\b[\u0001\u0002\u092a",
    "\u092e\u0007\u0004\u0002\u0002\u092b\u092d\u0005T+\u0002\u092c\u092b",
    "\u0003\u0002\u0002\u0002\u092d\u0930\u0003\u0002\u0002\u0002\u092e\u092c",
    "\u0003\u0002\u0002\u0002\u092e\u092f\u0003\u0002\u0002\u0002\u092f\u0931",
    "\u0003\u0002\u0002\u0002\u0930\u092e\u0003\u0002\u0002\u0002\u0931\u0932",
    "\u0007\u0006\u0002\u0002\u0932\u00b5\u0003\u0002\u0002\u0002\u0933\u0934",
    "\b\\\u0001\u0002\u0934\u0938\u0007\u00dd\u0002\u0002\u0935\u0937\u0005",
    "T+\u0002\u0936\u0935\u0003\u0002\u0002\u0002\u0937\u093a\u0003\u0002",
    "\u0002\u0002\u0938\u0936\u0003\u0002\u0002\u0002\u0938\u0939\u0003\u0002",
    "\u0002\u0002\u0939\u093b\u0003\u0002\u0002\u0002\u093a\u0938\u0003\u0002",
    "\u0002\u0002\u093b\u093c\u0007\u0006\u0002\u0002\u093c\u00b7\u0003\u0002",
    "\u0002\u0002\u093d\u093e\u0007H\u0002\u0002\u093e\u093f\u00076\u0002",
    "\u0002\u093f\u094e\b]\u0001\u0002\u0940\u094f\u0005\u00b4[\u0002\u0941",
    "\u094f\u0005\u00c8e\u0002\u0942\u094c\u0005\u00caf\u0002\u0943\u0944",
    "\u0007h\u0002\u0002\u0944\u0946\u0007\u0004\u0002\u0002\u0945\u0947",
    "\u0005P)\u0002\u0946\u0945\u0003\u0002\u0002\u0002\u0947\u0948\u0003",
    "\u0002\u0002\u0002\u0948\u0946\u0003\u0002\u0002\u0002\u0948\u0949\u0003",
    "\u0002\u0002\u0002\u0949\u094a\u0003\u0002\u0002\u0002\u094a\u094b\u0007",
    "\u0006\u0002\u0002\u094b\u094d\u0003\u0002\u0002\u0002\u094c\u0943\u0003",
    "\u0002\u0002\u0002\u094c\u094d\u0003\u0002\u0002\u0002\u094d\u094f\u0003",
    "\u0002\u0002\u0002\u094e\u0940\u0003\u0002\u0002\u0002\u094e\u0941\u0003",
    "\u0002\u0002\u0002\u094e\u0942\u0003\u0002\u0002\u0002\u094f\u00b9\u0003",
    "\u0002\u0002\u0002\u0950\u0952\u0007K\u0002\u0002\u0951\u0953\u0005",
    "\u00c4c\u0002\u0952\u0951\u0003\u0002\u0002\u0002\u0952\u0953\u0003",
    "\u0002\u0002\u0002\u0953\u0954\u0003\u0002\u0002\u0002\u0954\u0955\u0007",
    "\u00ce\u0002\u0002\u0955\u095d\b^\u0001\u0002\u0956\u0958\u0007T\u0002",
    "\u0002\u0957\u0959\u0005\u00c4c\u0002\u0958\u0957\u0003\u0002\u0002",
    "\u0002\u0958\u0959\u0003\u0002\u0002\u0002\u0959\u095a\u0003\u0002\u0002",
    "\u0002\u095a\u095b\u00076\u0002\u0002\u095b\u095d\b^\u0001\u0002\u095c",
    "\u0950\u0003\u0002\u0002\u0002\u095c\u0956\u0003\u0002\u0002\u0002\u095d",
    "\u095e\u0003\u0002\u0002\u0002\u095e\u095f\b^\u0001\u0002\u095f\u00bb",
    "\u0003\u0002\u0002\u0002\u0960\u0961\u0007\u0004\u0002\u0002\u0961\u0967",
    "\u0005\u00c6d\u0002\u0962\u0963\u0007\u0005\u0002\u0002\u0963\u0964",
    "\b_\u0001\u0002\u0964\u0966\u0005\u00c6d\u0002\u0965\u0962\u0003\u0002",
    "\u0002\u0002\u0966\u0969\u0003\u0002\u0002\u0002\u0967\u0965\u0003\u0002",
    "\u0002\u0002\u0967\u0968\u0003\u0002\u0002\u0002\u0968\u096a\u0003\u0002",
    "\u0002\u0002\u0969\u0967\u0003\u0002\u0002\u0002\u096a\u096b\u0007\u0006",
    "\u0002\u0002\u096b\u0971\u0003\u0002\u0002\u0002\u096c\u096d\u00077",
    "\u0002\u0002\u096d\u096e\u0005\u00dan\u0002\u096e\u096f\b_\u0001\u0002",
    "\u096f\u0971\u0003\u0002\u0002\u0002\u0970\u0960\u0003\u0002\u0002\u0002",
    "\u0970\u096c\u0003\u0002\u0002\u0002\u0971\u00bd\u0003\u0002\u0002\u0002",
    "\u0972\u0973\u0007\u0004\u0002\u0002\u0973\u0979\u0005\u00c6d\u0002",
    "\u0974\u0975\u0007\u0005\u0002\u0002\u0975\u0976\b`\u0001\u0002\u0976",
    "\u0978\u0005\u00c6d\u0002\u0977\u0974\u0003\u0002\u0002\u0002\u0978",
    "\u097b\u0003\u0002\u0002\u0002\u0979\u0977\u0003\u0002\u0002\u0002\u0979",
    "\u097a\u0003\u0002\u0002\u0002\u097a\u097c\u0003\u0002\u0002\u0002\u097b",
    "\u0979\u0003\u0002\u0002\u0002\u097c\u097e\u0007\u0006\u0002\u0002\u097d",
    "\u097f\u0005h5\u0002\u097e\u097d\u0003\u0002\u0002\u0002\u097e\u097f",
    "\u0003\u0002\u0002\u0002\u097f\u0986\u0003\u0002\u0002\u0002\u0980\u0981",
    "\u00077\u0002\u0002\u0981\u0982\u0005\u00dan\u0002\u0982\u0983\b`\u0001",
    "\u0002\u0983\u0986\u0003\u0002\u0002\u0002\u0984\u0986\u0005h5\u0002",
    "\u0985\u0972\u0003\u0002\u0002\u0002\u0985\u0980\u0003\u0002\u0002\u0002",
    "\u0985\u0984\u0003\u0002\u0002\u0002\u0985\u0986\u0003\u0002\u0002\u0002",
    "\u0986\u098a\u0003\u0002\u0002\u0002\u0987\u0989\u0005\u0016\f\u0002",
    "\u0988\u0987\u0003\u0002\u0002\u0002\u0989\u098c\u0003\u0002\u0002\u0002",
    "\u098a\u0988\u0003\u0002\u0002\u0002\u098a\u098b\u0003\u0002\u0002\u0002",
    "\u098b\u098d\u0003\u0002\u0002\u0002\u098c\u098a\u0003\u0002\u0002\u0002",
    "\u098d\u098e\u0005\u001a\u000e\u0002\u098e\u00bf\u0003\u0002\u0002\u0002",
    "\u098f\u0990\u0007\u00a4\u0002\u0002\u0990\u0991\ba\u0001\u0002\u0991",
    "\u0992\u0005\u0108\u0085\u0002\u0992\u00c1\u0003\u0002\u0002\u0002\u0993",
    "\u0994\u0007\u0090\u0002\u0002\u0994\u0995\bb\u0001\u0002\u0995\u0996",
    "\u0005\u0108\u0085\u0002\u0996\u00c3\u0003\u0002\u0002\u0002\u0997\u0998",
    "\u0007\u0011\u0002\u0002\u0998\u09ac\bc\u0001\u0002\u0999\u099a\u0007",
    ">\u0002\u0002\u099a\u099b\u0007\u0005\u0002\u0002\u099b\u09a0\bc\u0001",
    "\u0002\u099c\u099d\u0007\r\u0002\u0002\u099d\u099e\u0007\u0005\u0002",
    "\u0002\u099e\u09a0\bc\u0001\u0002\u099f\u0999\u0003\u0002\u0002\u0002",
    "\u099f\u099c\u0003\u0002\u0002\u0002\u099f\u09a0\u0003\u0002\u0002\u0002",
    "\u09a0\u09a4\u0003\u0002\u0002\u0002\u09a1\u09a2\u0007>\u0002\u0002",
    "\u09a2\u09a3\u0007\u0012\u0002\u0002\u09a3\u09a5\bc\u0001\u0002\u09a4",
    "\u09a1\u0003\u0002\u0002\u0002\u09a4\u09a5\u0003\u0002\u0002\u0002\u09a5",
    "\u09aa\u0003\u0002\u0002\u0002\u09a6\u09a7\u0007>\u0002\u0002\u09a7",
    "\u09ab\bc\u0001\u0002\u09a8\u09a9\u0007\r\u0002\u0002\u09a9\u09ab\b",
    "c\u0001\u0002\u09aa\u09a6\u0003\u0002\u0002\u0002\u09aa\u09a8\u0003",
    "\u0002\u0002\u0002\u09ab\u09ad\u0003\u0002\u0002\u0002\u09ac\u099f\u0003",
    "\u0002\u0002\u0002\u09ac\u09ad\u0003\u0002\u0002\u0002\u09ad\u09ae\u0003",
    "\u0002\u0002\u0002\u09ae\u09af\u0007\u0013\u0002\u0002\u09af\u00c5\u0003",
    "\u0002\u0002\u0002\u09b0\u09b3\u0005\u0108\u0085\u0002\u09b1\u09b2\u0007",
    ")\u0002\u0002\u09b2\u09b4\u0005\u010c\u0087\u0002\u09b3\u09b1\u0003",
    "\u0002\u0002\u0002\u09b3\u09b4\u0003\u0002\u0002\u0002\u09b4\u09b5\u0003",
    "\u0002\u0002\u0002\u09b5\u09b6\bd\u0001\u0002\u09b6\u00c7\u0003\u0002",
    "\u0002\u0002\u09b7\u09b8\u0007\u00cf\u0002\u0002\u09b8\u09b9\u00076",
    "\u0002\u0002\u09b9\u09ba\be\u0001\u0002\u09ba\u09be\u0005\u0108\u0085",
    "\u0002\u09bb\u09bc\u0007\t\u0002\u0002\u09bc\u09bd\be\u0001\u0002\u09bd",
    "\u09bf\u0005\u0108\u0085\u0002\u09be\u09bb\u0003\u0002\u0002\u0002\u09be",
    "\u09bf\u0003\u0002\u0002\u0002\u09bf\u00c9\u0003\u0002\u0002\u0002\u09c0",
    "\u09ce\u0005\u0108\u0085\u0002\u09c1\u09c2\u0007\n\u0002\u0002\u09c2",
    "\u09c3\u0007>\u0002\u0002\u09c3\u09ca\bf\u0001\u0002\u09c4\u09c5\u0007",
    "\u0005\u0002\u0002\u09c5\u09c6\bf\u0001\u0002\u09c6\u09c7\u0007>\u0002",
    "\u0002\u09c7\u09c9\bf\u0001\u0002\u09c8\u09c4\u0003\u0002\u0002\u0002",
    "\u09c9\u09cc\u0003\u0002\u0002\u0002\u09ca\u09c8\u0003\u0002\u0002\u0002",
    "\u09ca\u09cb\u0003\u0002\u0002\u0002\u09cb\u09cd\u0003\u0002\u0002\u0002",
    "\u09cc\u09ca\u0003\u0002\u0002\u0002\u09cd\u09cf\u0007\u000b\u0002\u0002",
    "\u09ce\u09c1\u0003\u0002\u0002\u0002\u09ce\u09cf\u0003\u0002\u0002\u0002",
    "\u09cf\u00cb\u0003\u0002\u0002\u0002\u09d0\u09d1\u0005\u00d0i\u0002",
    "\u09d1\u09ea\bg\u0001\u0002\u09d2\u09d3\u0007\u00d0\u0002\u0002\u09d3",
    "\u09d7\bg\u0001\u0002\u09d4\u09d8\u0007-\u0002\u0002\u09d5\u09d6\u0007",
    "\'\u0002\u0002\u09d6\u09d8\bg\u0001\u0002\u09d7\u09d4\u0003\u0002\u0002",
    "\u0002\u09d7\u09d5\u0003\u0002\u0002\u0002\u09d7\u09d8\u0003\u0002\u0002",
    "\u0002\u09d8\u09e4\u0003\u0002\u0002\u0002\u09d9\u09db\u0007l\u0002",
    "\u0002\u09da\u09dc\u0007-\u0002\u0002\u09db\u09da\u0003\u0002\u0002",
    "\u0002\u09db\u09dc\u0003\u0002\u0002\u0002\u09dc\u09dd\u0003\u0002\u0002",
    "\u0002\u09dd\u09e4\bg\u0001\u0002\u09de\u09e0\u0007\u0096\u0002\u0002",
    "\u09df\u09e1\u0007-\u0002\u0002\u09e0\u09df\u0003\u0002\u0002\u0002",
    "\u09e0\u09e1\u0003\u0002\u0002\u0002\u09e1\u09e2\u0003\u0002\u0002\u0002",
    "\u09e2\u09e4\bg\u0001\u0002\u09e3\u09d2\u0003\u0002\u0002\u0002\u09e3",
    "\u09d9\u0003\u0002\u0002\u0002\u09e3\u09de\u0003\u0002\u0002\u0002\u09e4",
    "\u09e5\u0003\u0002\u0002\u0002\u09e5\u09e6\u0005\u00d0i\u0002\u09e6",
    "\u09e7\bg\u0001\u0002\u09e7\u09e9\u0003\u0002\u0002\u0002\u09e8\u09e3",
    "\u0003\u0002\u0002\u0002\u09e9\u09ec\u0003\u0002\u0002\u0002\u09ea\u09e8",
    "\u0003\u0002\u0002\u0002\u09ea\u09eb\u0003\u0002\u0002\u0002\u09eb\u09fb",
    "\u0003\u0002\u0002\u0002\u09ec\u09ea\u0003\u0002\u0002\u0002\u09ed\u09ee",
    "\u0007\u00a7\u0002\u0002\u09ee\u09ef\u0007*\u0002\u0002\u09ef\u09f0",
    "\bg\u0001\u0002\u09f0\u09f1\u0005\u00ceh\u0002\u09f1\u09f8\bg\u0001",
    "\u0002\u09f2\u09f3\u0007\u0005\u0002\u0002\u09f3\u09f4\u0005\u00ceh",
    "\u0002\u09f4\u09f5\bg\u0001\u0002\u09f5\u09f7\u0003\u0002\u0002\u0002",
    "\u09f6\u09f2\u0003\u0002\u0002\u0002\u09f7\u09fa\u0003\u0002\u0002\u0002",
    "\u09f8\u09f6\u0003\u0002\u0002\u0002\u09f8\u09f9\u0003\u0002\u0002\u0002",
    "\u09f9\u09fc\u0003\u0002\u0002\u0002\u09fa\u09f8\u0003\u0002\u0002\u0002",
    "\u09fb\u09ed\u0003\u0002\u0002\u0002\u09fb\u09fc\u0003\u0002\u0002\u0002",
    "\u09fc\u0a0a\u0003\u0002\u0002\u0002\u09fd\u09fe\u0007\u008e\u0002\u0002",
    "\u09fe\u0a03\bg\u0001\u0002\u09ff\u0a00\u0007>\u0002\u0002\u0a00\u0a04",
    "\bg\u0001\u0002\u0a01\u0a02\u00075\u0002\u0002\u0a02\u0a04\bg\u0001",
    "\u0002\u0a03\u09ff\u0003\u0002\u0002\u0002\u0a03\u0a01\u0003\u0002\u0002",
    "\u0002\u0a04\u0a08\u0003\u0002\u0002\u0002\u0a05\u0a06\u0007\u00a3\u0002",
    "\u0002\u0a06\u0a07\u0007>\u0002\u0002\u0a07\u0a09\bg\u0001\u0002\u0a08",
    "\u0a05\u0003\u0002\u0002\u0002\u0a08\u0a09\u0003\u0002\u0002\u0002\u0a09",
    "\u0a0b\u0003\u0002\u0002\u0002\u0a0a\u09fd\u0003\u0002\u0002\u0002\u0a0a",
    "\u0a0b\u0003\u0002\u0002\u0002\u0a0b\u00cd\u0003\u0002\u0002\u0002\u0a0c",
    "\u0a0d\u0005\u00e2r\u0002\u0a0d\u0a12\bh\u0001\u0002\u0a0e\u0a0f\u0007",
    "I\u0002\u0002\u0a0f\u0a13\bh\u0001\u0002\u0a10\u0a11\u0007_\u0002\u0002",
    "\u0a11\u0a13\bh\u0001\u0002\u0a12\u0a0e\u0003\u0002\u0002\u0002\u0a12",
    "\u0a10\u0003\u0002\u0002\u0002\u0a12\u0a13\u0003\u0002\u0002\u0002\u0a13",
    "\u0a17\u0003\u0002\u0002\u0002\u0a14\u0a15\u0007\u00a1\u0002\u0002\u0a15",
    "\u0a16\t\f\u0002\u0002\u0a16\u0a18\bh\u0001\u0002\u0a17\u0a14\u0003",
    "\u0002\u0002\u0002\u0a17\u0a18\u0003\u0002\u0002\u0002\u0a18\u00cf\u0003",
    "\u0002\u0002\u0002\u0a19\u0a1a\u0005\u00d2j\u0002\u0a1a\u0a24\bi\u0001",
    "\u0002\u0a1b\u0a1d\u0007\u0083\u0002\u0002\u0a1c\u0a1e\u0007-\u0002",
    "\u0002\u0a1d\u0a1c\u0003\u0002\u0002\u0002\u0a1d\u0a1e\u0003\u0002\u0002",
    "\u0002\u0a1e\u0a1f\u0003\u0002\u0002\u0002\u0a1f\u0a20\u0005\u00d2j",
    "\u0002\u0a20\u0a21\bi\u0001\u0002\u0a21\u0a23\u0003\u0002\u0002\u0002",
    "\u0a22\u0a1b\u0003\u0002\u0002\u0002\u0a23\u0a26\u0003\u0002\u0002\u0002",
    "\u0a24\u0a22\u0003\u0002\u0002\u0002\u0a24\u0a25\u0003\u0002\u0002\u0002",
    "\u0a25\u00d1\u0003\u0002\u0002\u0002\u0a26\u0a24\u0003\u0002\u0002\u0002",
    "\u0a27\u0a28\u0007\n\u0002\u0002\u0a28\u0a29\u0005\u00ccg\u0002\u0a29",
    "\u0a2a\u0007\u000b\u0002\u0002\u0a2a\u0a2b\bj\u0001\u0002\u0a2b\u0aac",
    "\u0003\u0002\u0002\u0002\u0a2c\u0a2d\u00078\u0002\u0002\u0a2d\u0a8e",
    "\bj\u0001\u0002\u0a2e\u0a2f\u00070\u0002\u0002\u0a2f\u0a30\u0005\u00d4",
    "k\u0002\u0a30\u0a37\bj\u0001\u0002\u0a31\u0a32\u0007\u0005\u0002\u0002",
    "\u0a32\u0a33\u0005\u00d4k\u0002\u0a33\u0a34\bj\u0001\u0002\u0a34\u0a36",
    "\u0003\u0002\u0002\u0002\u0a35\u0a31\u0003\u0002\u0002\u0002\u0a36\u0a39",
    "\u0003\u0002\u0002\u0002\u0a37\u0a35\u0003\u0002\u0002\u0002\u0a37\u0a38",
    "\u0003\u0002\u0002\u0002\u0a38\u0a44\u0003\u0002\u0002\u0002\u0a39\u0a37",
    "\u0003\u0002\u0002\u0002\u0a3a\u0a3b\u0007\u009b\u0002\u0002\u0a3b\u0a3f",
    "\u0007\u0004\u0002\u0002\u0a3c\u0a3e\u0005V,\u0002\u0a3d\u0a3c\u0003",
    "\u0002\u0002\u0002\u0a3e\u0a41\u0003\u0002\u0002\u0002\u0a3f\u0a3d\u0003",
    "\u0002\u0002\u0002\u0a3f\u0a40\u0003\u0002\u0002\u0002\u0a40\u0a42\u0003",
    "\u0002\u0002\u0002\u0a41\u0a3f\u0003\u0002\u0002\u0002\u0a42\u0a43\u0007",
    "\u0006\u0002\u0002\u0a43\u0a45\u0007\u0084\u0002\u0002\u0a44\u0a3a\u0003",
    "\u0002\u0002\u0002\u0a44\u0a45\u0003\u0002\u0002\u0002\u0a45\u0a49\u0003",
    "\u0002\u0002\u0002\u0a46\u0a47\u0007\u00cc\u0002\u0002\u0a47\u0a48\u0007",
    ">\u0002\u0002\u0a48\u0a4a\bj\u0001\u0002\u0a49\u0a46\u0003\u0002\u0002",
    "\u0002\u0a49\u0a4a\u0003\u0002\u0002\u0002\u0a4a\u0a4d\u0003\u0002\u0002",
    "\u0002\u0a4b\u0a4c\t\r\u0002\u0002\u0a4c\u0a4e\bj\u0001\u0002\u0a4d",
    "\u0a4b\u0003\u0002\u0002\u0002\u0a4d\u0a4e\u0003\u0002\u0002\u0002\u0a4e",
    "\u0a5f\u0003\u0002\u0002\u0002\u0a4f\u0a50\u0007\u0004\u0002\u0002\u0a50",
    "\u0a54\bj\u0001\u0002\u0a51\u0a52\u0007\r\u0002\u0002\u0a52\u0a55\b",
    "j\u0001\u0002\u0a53\u0a55\u0005^0\u0002\u0a54\u0a51\u0003\u0002\u0002",
    "\u0002\u0a54\u0a53\u0003\u0002\u0002\u0002\u0a55\u0a5b\u0003\u0002\u0002",
    "\u0002\u0a56\u0a57\u0007\u0005\u0002\u0002\u0a57\u0a58\bj\u0001\u0002",
    "\u0a58\u0a5a\u0005^0\u0002\u0a59\u0a56\u0003\u0002\u0002\u0002\u0a5a",
    "\u0a5d\u0003\u0002\u0002\u0002\u0a5b\u0a59\u0003\u0002\u0002\u0002\u0a5b",
    "\u0a5c\u0003\u0002\u0002\u0002\u0a5c\u0a5e\u0003\u0002\u0002\u0002\u0a5d",
    "\u0a5b\u0003\u0002\u0002\u0002\u0a5e\u0a60\u0007\u0006\u0002\u0002\u0a5f",
    "\u0a4f\u0003\u0002\u0002\u0002\u0a5f\u0a60\u0003\u0002\u0002\u0002\u0a60",
    "\u0a6e\u0003\u0002\u0002\u0002\u0a61\u0a62\u0007m\u0002\u0002\u0a62",
    "\u0a63\u0007\u0004\u0002\u0002\u0a63\u0a69\u0005(\u0015\u0002\u0a64",
    "\u0a65\u0007\u0005\u0002\u0002\u0a65\u0a66\bj\u0001\u0002\u0a66\u0a68",
    "\u0005(\u0015\u0002\u0a67\u0a64\u0003\u0002\u0002\u0002\u0a68\u0a6b",
    "\u0003\u0002\u0002\u0002\u0a69\u0a67\u0003\u0002\u0002\u0002\u0a69\u0a6a",
    "\u0003\u0002\u0002\u0002\u0a6a\u0a6c\u0003\u0002\u0002\u0002\u0a6b\u0a69",
    "\u0003\u0002\u0002\u0002\u0a6c\u0a6d\u0007\u0006\u0002\u0002\u0a6d\u0a6f",
    "\u0003\u0002\u0002\u0002\u0a6e\u0a61\u0003\u0002\u0002\u0002\u0a6e\u0a6f",
    "\u0003\u0002\u0002\u0002\u0a6f\u0a8f\u0003\u0002\u0002\u0002\u0a70\u0a71",
    "\t\r\u0002\u0002\u0a71\u0a73\bj\u0001\u0002\u0a72\u0a70\u0003\u0002",
    "\u0002\u0002\u0a72\u0a73\u0003\u0002\u0002\u0002\u0a73\u0a74\u0003\u0002",
    "\u0002\u0002\u0a74\u0a78\bj\u0001\u0002\u0a75\u0a76\u0007\r\u0002\u0002",
    "\u0a76\u0a79\bj\u0001\u0002\u0a77\u0a79\u0005^0\u0002\u0a78\u0a75\u0003",
    "\u0002\u0002\u0002\u0a78\u0a77\u0003\u0002\u0002\u0002\u0a79\u0a7f\u0003",
    "\u0002\u0002\u0002\u0a7a\u0a7b\u0007\u0005\u0002\u0002\u0a7b\u0a7c\b",
    "j\u0001\u0002\u0a7c\u0a7e\u0005^0\u0002\u0a7d\u0a7a\u0003\u0002\u0002",
    "\u0002\u0a7e\u0a81\u0003\u0002\u0002\u0002\u0a7f\u0a7d\u0003\u0002\u0002",
    "\u0002\u0a7f\u0a80\u0003\u0002\u0002\u0002\u0a80\u0a82\u0003\u0002\u0002",
    "\u0002\u0a81\u0a7f\u0003\u0002\u0002\u0002\u0a82\u0a83\u00070\u0002",
    "\u0002\u0a83\u0a84\u0005\u00d4k\u0002\u0a84\u0a8b\bj\u0001\u0002\u0a85",
    "\u0a86\u0007\u0005\u0002\u0002\u0a86\u0a87\u0005\u00d4k\u0002\u0a87",
    "\u0a88\bj\u0001\u0002\u0a88\u0a8a\u0003\u0002\u0002\u0002\u0a89\u0a85",
    "\u0003\u0002\u0002\u0002\u0a8a\u0a8d\u0003\u0002\u0002\u0002\u0a8b\u0a89",
    "\u0003\u0002\u0002\u0002\u0a8b\u0a8c\u0003\u0002\u0002\u0002\u0a8c\u0a8f",
    "\u0003\u0002\u0002\u0002\u0a8d\u0a8b\u0003\u0002\u0002\u0002\u0a8e\u0a2e",
    "\u0003\u0002\u0002\u0002\u0a8e\u0a72\u0003\u0002\u0002\u0002\u0a8f\u0a94",
    "\u0003\u0002\u0002\u0002\u0a90\u0a91\u0007<\u0002\u0002\u0a91\u0a92",
    "\u0005\u00dan\u0002\u0a92\u0a93\bj\u0001\u0002\u0a93\u0a95\u0003\u0002",
    "\u0002\u0002\u0a94\u0a90\u0003\u0002\u0002\u0002\u0a94\u0a95\u0003\u0002",
    "\u0002\u0002\u0a95\u0aa3\u0003\u0002\u0002\u0002\u0a96\u0a97\u0007z",
    "\u0002\u0002\u0a97\u0a98\u0007*\u0002\u0002\u0a98\u0a99\u0005\u00e2",
    "r\u0002\u0a99\u0aa0\bj\u0001\u0002\u0a9a\u0a9b\u0007\u0005\u0002\u0002",
    "\u0a9b\u0a9c\u0005\u00e2r\u0002\u0a9c\u0a9d\bj\u0001\u0002\u0a9d\u0a9f",
    "\u0003\u0002\u0002\u0002\u0a9e\u0a9a\u0003\u0002\u0002\u0002\u0a9f\u0aa2",
    "\u0003\u0002\u0002\u0002\u0aa0\u0a9e\u0003\u0002\u0002\u0002\u0aa0\u0aa1",
    "\u0003\u0002\u0002\u0002\u0aa1\u0aa4\u0003\u0002\u0002\u0002\u0aa2\u0aa0",
    "\u0003\u0002\u0002\u0002\u0aa3\u0a96\u0003\u0002\u0002\u0002\u0aa3\u0aa4",
    "\u0003\u0002\u0002\u0002\u0aa4\u0aa9\u0003\u0002\u0002\u0002\u0aa5\u0aa6",
    "\u0007}\u0002\u0002\u0aa6\u0aa7\u0005\u00dan\u0002\u0aa7\u0aa8\bj\u0001",
    "\u0002\u0aa8\u0aaa\u0003\u0002\u0002\u0002\u0aa9\u0aa5\u0003\u0002\u0002",
    "\u0002\u0aa9\u0aaa\u0003\u0002\u0002\u0002\u0aaa\u0aac\u0003\u0002\u0002",
    "\u0002\u0aab\u0a27\u0003\u0002\u0002\u0002\u0aab\u0a2c\u0003\u0002\u0002",
    "\u0002\u0aac\u00d3\u0003\u0002\u0002\u0002\u0aad\u0aae\u0005\u00d6l",
    "\u0002\u0aae\u0ad5\bk\u0001\u0002\u0aaf\u0ab0\u0007\u0086\u0002\u0002",
    "\u0ab0\u0ac7\bk\u0001\u0002\u0ab1\u0ab2\u0007\u0082\u0002\u0002\u0ab2",
    "\u0ab3\u0007\u0086\u0002\u0002\u0ab3\u0ac7\bk\u0001\u0002\u0ab4\u0ab6",
    "\u0007\u008c\u0002\u0002\u0ab5\u0ab7\u0007\u00a9\u0002\u0002\u0ab6\u0ab5",
    "\u0003\u0002\u0002\u0002\u0ab6\u0ab7\u0003\u0002\u0002\u0002\u0ab7\u0ab8",
    "\u0003\u0002\u0002\u0002\u0ab8\u0ab9\u0007\u0086\u0002\u0002\u0ab9\u0ac7",
    "\bk\u0001\u0002\u0aba\u0abc\u0007\u00b9\u0002\u0002\u0abb\u0abd\u0007",
    "\u00a9\u0002\u0002\u0abc\u0abb\u0003\u0002\u0002\u0002\u0abc\u0abd\u0003",
    "\u0002\u0002\u0002\u0abd\u0abe\u0003\u0002\u0002\u0002\u0abe\u0abf\u0007",
    "\u0086\u0002\u0002\u0abf\u0ac7\bk\u0001\u0002\u0ac0\u0ac2\u0007t\u0002",
    "\u0002\u0ac1\u0ac3\u0007\u00a9\u0002\u0002\u0ac2\u0ac1\u0003\u0002\u0002",
    "\u0002\u0ac2\u0ac3\u0003\u0002\u0002\u0002\u0ac3\u0ac4\u0003\u0002\u0002",
    "\u0002\u0ac4\u0ac5\u0007\u0086\u0002\u0002\u0ac5\u0ac7\bk\u0001\u0002",
    "\u0ac6\u0aaf\u0003\u0002\u0002\u0002\u0ac6\u0ab1\u0003\u0002\u0002\u0002",
    "\u0ac6\u0ab4\u0003\u0002\u0002\u0002\u0ac6\u0aba\u0003\u0002\u0002\u0002",
    "\u0ac6\u0ac0\u0003\u0002\u0002\u0002\u0ac7\u0ac8\u0003\u0002\u0002\u0002",
    "\u0ac8\u0ac9\u0005\u00d4k\u0002\u0ac9\u0aca\bk\u0001\u0002\u0aca\u0acb",
    "\u00077\u0002\u0002\u0acb\u0acc\u0005\u00dan\u0002\u0acc\u0acd\bk\u0001",
    "\u0002\u0acd\u0ad4\u0003\u0002\u0002\u0002\u0ace\u0acf\u0007X\u0002",
    "\u0002\u0acf\u0ad0\u0007\u0086\u0002\u0002\u0ad0\u0ad1\u0005\u00d6l",
    "\u0002\u0ad1\u0ad2\bk\u0001\u0002\u0ad2\u0ad4\u0003\u0002\u0002\u0002",
    "\u0ad3\u0ac6\u0003\u0002\u0002\u0002\u0ad3\u0ace\u0003\u0002\u0002\u0002",
    "\u0ad4\u0ad7\u0003\u0002\u0002\u0002\u0ad5\u0ad3\u0003\u0002\u0002\u0002",
    "\u0ad5\u0ad6\u0003\u0002\u0002\u0002\u0ad6\u00d5\u0003\u0002\u0002\u0002",
    "\u0ad7\u0ad5\u0003\u0002\u0002\u0002\u0ad8\u0ad9\bl\u0001\u0002\u0ad9",
    "\u0add\u0005\u00d8m\u0002\u0ada\u0adb\u0007\t\u0002\u0002\u0adb\u0adc",
    "\bl\u0001\u0002\u0adc\u0ade\u0005\u00d8m\u0002\u0add\u0ada\u0003\u0002",
    "\u0002\u0002\u0add\u0ade\u0003\u0002\u0002\u0002\u0ade\u0ae6\u0003\u0002",
    "\u0002\u0002\u0adf\u0ae0\u0007)\u0002\u0002\u0ae0\u0ae1\u0005\u010c",
    "\u0087\u0002\u0ae1\u0ae2\bl\u0001\u0002\u0ae2\u0ae7\u0003\u0002\u0002",
    "\u0002\u0ae3\u0ae4\u0005\u010a\u0086\u0002\u0ae4\u0ae5\bl\u0001\u0002",
    "\u0ae5\u0ae7\u0003\u0002\u0002\u0002\u0ae6\u0adf\u0003\u0002\u0002\u0002",
    "\u0ae6\u0ae3\u0003\u0002\u0002\u0002\u0ae6\u0ae7\u0003\u0002\u0002\u0002",
    "\u0ae7\u0afc\u0003\u0002\u0002\u0002\u0ae8\u0af9\u0007\n\u0002\u0002",
    "\u0ae9\u0aea\u0005\u00ccg\u0002\u0aea\u0aeb\bl\u0001\u0002\u0aeb\u0af3",
    "\u0007\u000b\u0002\u0002\u0aec\u0aed\u0007)\u0002\u0002\u0aed\u0aee",
    "\u0005\u010c\u0087\u0002\u0aee\u0aef\bl\u0001\u0002\u0aef\u0af4\u0003",
    "\u0002\u0002\u0002\u0af0\u0af1\u0005\u010a\u0086\u0002\u0af1\u0af2\b",
    "l\u0001\u0002\u0af2\u0af4\u0003\u0002\u0002\u0002\u0af3\u0aec\u0003",
    "\u0002\u0002\u0002\u0af3\u0af0\u0003\u0002\u0002\u0002\u0af3\u0af4\u0003",
    "\u0002\u0002\u0002\u0af4\u0afa\u0003\u0002\u0002\u0002\u0af5\u0af6\u0005",
    "\u00d4k\u0002\u0af6\u0af7\bl\u0001\u0002\u0af7\u0af8\u0007\u000b\u0002",
    "\u0002\u0af8\u0afa\u0003\u0002\u0002\u0002\u0af9\u0ae9\u0003\u0002\u0002",
    "\u0002\u0af9\u0af5\u0003\u0002\u0002\u0002\u0afa\u0afc\u0003\u0002\u0002",
    "\u0002\u0afb\u0ad8\u0003\u0002\u0002\u0002\u0afb\u0ae8\u0003\u0002\u0002",
    "\u0002\u0afc\u00d7\u0003\u0002\u0002\u0002\u0afd\u0afe\u0005\u010c\u0087",
    "\u0002\u0afe\u0b04\bm\u0001\u0002\u0aff\u0b01\u0005\u00eex\u0002\u0b00",
    "\u0b02\u0005\u00f6|\u0002\u0b01\u0b00\u0003\u0002\u0002\u0002\u0b01",
    "\u0b02\u0003\u0002\u0002\u0002\u0b02\u0b05\u0003\u0002\u0002\u0002\u0b03",
    "\u0b05\u0005\u00f6|\u0002\u0b04\u0aff\u0003\u0002\u0002\u0002\u0b04",
    "\u0b03\u0003\u0002\u0002\u0002\u0b04\u0b05\u0003\u0002\u0002\u0002\u0b05",
    "\u0b12\u0003\u0002\u0002\u0002\u0b06\u0b07\u0007\u0014\u0002\u0002\u0b07",
    "\u0b08\u0005\u010c\u0087\u0002\u0b08\u0b0e\bm\u0001\u0002\u0b09\u0b0b",
    "\u0005\u00eex\u0002\u0b0a\u0b0c\u0005\u00f6|\u0002\u0b0b\u0b0a\u0003",
    "\u0002\u0002\u0002\u0b0b\u0b0c\u0003\u0002\u0002\u0002\u0b0c\u0b0f\u0003",
    "\u0002\u0002\u0002\u0b0d\u0b0f\u0005\u00f6|\u0002\u0b0e\u0b09\u0003",
    "\u0002\u0002\u0002\u0b0e\u0b0d\u0003\u0002\u0002\u0002\u0b0e\u0b0f\u0003",
    "\u0002\u0002\u0002\u0b0f\u0b11\u0003\u0002\u0002\u0002\u0b10\u0b06\u0003",
    "\u0002\u0002\u0002\u0b11\u0b14\u0003\u0002\u0002\u0002\u0b12\u0b10\u0003",
    "\u0002\u0002\u0002\u0b12\u0b13\u0003\u0002\u0002\u0002\u0b13\u00d9\u0003",
    "\u0002\u0002\u0002\u0b14\u0b12\u0003\u0002\u0002\u0002\u0b15\u0b16\u0005",
    "\u00dco\u0002\u0b16\u0b1d\bn\u0001\u0002\u0b17\u0b18\u0007\u00a6\u0002",
    "\u0002\u0b18\u0b19\u0005\u00dco\u0002\u0b19\u0b1a\bn\u0001\u0002\u0b1a",
    "\u0b1c\u0003\u0002\u0002\u0002\u0b1b\u0b17\u0003\u0002\u0002\u0002\u0b1c",
    "\u0b1f\u0003\u0002\u0002\u0002\u0b1d\u0b1b\u0003\u0002\u0002\u0002\u0b1d",
    "\u0b1e\u0003\u0002\u0002\u0002\u0b1e\u00db\u0003\u0002\u0002\u0002\u0b1f",
    "\u0b1d\u0003\u0002\u0002\u0002\u0b20\u0b21\u0005\u00dep\u0002\u0b21",
    "\u0b28\bo\u0001\u0002\u0b22\u0b23\u0007E\u0002\u0002\u0b23\u0b24\u0005",
    "\u00dep\u0002\u0b24\u0b25\bo\u0001\u0002\u0b25\u0b27\u0003\u0002\u0002",
    "\u0002\u0b26\u0b22\u0003\u0002\u0002\u0002\u0b27\u0b2a\u0003\u0002\u0002",
    "\u0002\u0b28\u0b26\u0003\u0002\u0002\u0002\u0b28\u0b29\u0003\u0002\u0002",
    "\u0002\u0b29\u00dd\u0003\u0002\u0002\u0002\u0b2a\u0b28\u0003\u0002\u0002",
    "\u0002\u0b2b\u0b2c\u00074\u0002\u0002\u0b2c\u0b2d\u0005\u00dep\u0002",
    "\u0b2d\u0b2e\bp\u0001\u0002\u0b2e\u0b4e\u0003\u0002\u0002\u0002\u0b2f",
    "\u0b30\u0007.\u0002\u0002\u0b30\u0b31\u0007\n\u0002\u0002\u0b31\u0b32",
    "\u0005\u00ccg\u0002\u0b32\u0b33\u0007\u000b\u0002\u0002\u0b33\u0b34",
    "\bp\u0001\u0002\u0b34\u0b4e\u0003\u0002\u0002\u0002\u0b35\u0b4b\u0005",
    "\u00e2r\u0002\u0b36\u0b37\t\u000e\u0002\u0002\u0b37\u0b3a\bp\u0001\u0002",
    "\u0b38\u0b39\t\u000f\u0002\u0002\u0b39\u0b3b\bp\u0001\u0002\u0b3a\u0b38",
    "\u0003\u0002\u0002\u0002\u0b3a\u0b3b\u0003\u0002\u0002\u0002\u0b3b\u0b3c",
    "\u0003\u0002\u0002\u0002\u0b3c\u0b3d\u0005\u00e2r\u0002\u0b3d\u0b3e",
    "\bp\u0001\u0002\u0b3e\u0b4c\u0003\u0002\u0002\u0002\u0b3f\u0b43\u0007",
    "\u0085\u0002\u0002\u0b40\u0b41\u00074\u0002\u0002\u0b41\u0b44\u0007",
    "5\u0002\u0002\u0b42\u0b44\u00075\u0002\u0002\u0b43\u0b40\u0003\u0002",
    "\u0002\u0002\u0b43\u0b42\u0003\u0002\u0002\u0002\u0b44\u0b45\u0003\u0002",
    "\u0002\u0002\u0b45\u0b4c\bp\u0001\u0002\u0b46\u0b47\bp\u0001\u0002\u0b47",
    "\u0b48\u00074\u0002\u0002\u0b48\u0b4c\u0005\u00e0q\u0002\u0b49\u0b4a",
    "\bp\u0001\u0002\u0b4a\u0b4c\u0005\u00e0q\u0002\u0b4b\u0b36\u0003\u0002",
    "\u0002\u0002\u0b4b\u0b3f\u0003\u0002\u0002\u0002\u0b4b\u0b46\u0003\u0002",
    "\u0002\u0002\u0b4b\u0b49\u0003\u0002\u0002\u0002\u0b4b\u0b4c\u0003\u0002",
    "\u0002\u0002\u0b4c\u0b4e\u0003\u0002\u0002\u0002\u0b4d\u0b2b\u0003\u0002",
    "\u0002\u0002\u0b4d\u0b2f\u0003\u0002\u0002\u0002\u0b4d\u0b35\u0003\u0002",
    "\u0002\u0002\u0b4e\u00df\u0003\u0002\u0002\u0002\u0b4f\u0b50\u00071",
    "\u0002\u0002\u0b50\u0b51\u0005\u00e2r\u0002\u0b51\u0b52\bq\u0001\u0002",
    "\u0b52\u0b64\u0003\u0002\u0002\u0002\u0b53\u0b54\u0007O\u0002\u0002",
    "\u0b54\u0b55\u0005\u00e2r\u0002\u0b55\u0b56\bq\u0001\u0002\u0b56\u0b57",
    "\u0007E\u0002\u0002\u0b57\u0b58\u0005\u00e2r\u0002\u0b58\u0b59\bq\u0001",
    "\u0002\u0b59\u0b64\u0003\u0002\u0002\u0002\u0b5a\u0b5b\u0007\u008d\u0002",
    "\u0002\u0b5b\u0b5c\u0005\u00e2r\u0002\u0b5c\u0b61\bq\u0001\u0002\u0b5d",
    "\u0b5e\u0007k\u0002\u0002\u0b5e\u0b5f\u0005\u00e2r\u0002\u0b5f\u0b60",
    "\bq\u0001\u0002\u0b60\u0b62\u0003\u0002\u0002\u0002\u0b61\u0b5d\u0003",
    "\u0002\u0002\u0002\u0b61\u0b62\u0003\u0002\u0002\u0002\u0b62\u0b64\u0003",
    "\u0002\u0002\u0002\u0b63\u0b4f\u0003\u0002\u0002\u0002\u0b63\u0b53\u0003",
    "\u0002\u0002\u0002\u0b63\u0b5a\u0003\u0002\u0002\u0002\u0b64\u00e1\u0003",
    "\u0002\u0002\u0002\u0b65\u0b66\u0005\u00e4s\u0002\u0b66\u0b6d\br\u0001",
    "\u0002\u0b67\u0b68\u0007\u0019\u0002\u0002\u0b68\u0b69\u0005\u00e4s",
    "\u0002\u0b69\u0b6a\br\u0001\u0002\u0b6a\u0b6c\u0003\u0002\u0002\u0002",
    "\u0b6b\u0b67\u0003\u0002\u0002\u0002\u0b6c\u0b6f\u0003\u0002\u0002\u0002",
    "\u0b6d\u0b6b\u0003\u0002\u0002\u0002\u0b6d\u0b6e\u0003\u0002\u0002\u0002",
    "\u0b6e\u00e3\u0003\u0002\u0002\u0002\u0b6f\u0b6d\u0003\u0002\u0002\u0002",
    "\u0b70\u0b71\u0005\u00e6t\u0002\u0b71\u0b78\bs\u0001\u0002\u0b72\u0b73",
    "\t\u0010\u0002\u0002\u0b73\u0b74\u0005\u00e6t\u0002\u0b74\u0b75\bs\u0001",
    "\u0002\u0b75\u0b77\u0003\u0002\u0002\u0002\u0b76\u0b72\u0003\u0002\u0002",
    "\u0002\u0b77\u0b7a\u0003\u0002\u0002\u0002\u0b78\u0b76\u0003\u0002\u0002",
    "\u0002\u0b78\u0b79\u0003\u0002\u0002\u0002\u0b79\u00e5\u0003\u0002\u0002",
    "\u0002\u0b7a\u0b78\u0003\u0002\u0002\u0002\u0b7b\u0b7c\u0005\u00e8u",
    "\u0002\u0b7c\u0b83\bt\u0001\u0002\u0b7d\u0b7e\t\u0011\u0002\u0002\u0b7e",
    "\u0b7f\u0005\u00e8u\u0002\u0b7f\u0b80\bt\u0001\u0002\u0b80\u0b82\u0003",
    "\u0002\u0002\u0002\u0b81\u0b7d\u0003\u0002\u0002\u0002\u0b82\u0b85\u0003",
    "\u0002\u0002\u0002\u0b83\u0b81\u0003\u0002\u0002\u0002\u0b83\u0b84\u0003",
    "\u0002\u0002\u0002\u0b84\u00e7\u0003\u0002\u0002\u0002\u0b85\u0b83\u0003",
    "\u0002\u0002\u0002\u0b86\u0b87\t\u0010\u0002\u0002\u0b87\u0b88\u0005",
    "\u00e8u\u0002\u0b88\u0b89\bu\u0001\u0002\u0b89\u0bda\u0003\u0002\u0002",
    "\u0002\u0b8a\u0b8b\u0005\u0106\u0084\u0002\u0b8b\u0b8c\bu\u0001\u0002",
    "\u0b8c\u0bd8\u0003\u0002\u0002\u0002\u0b8d\u0b8e\u0005\u00eav\u0002",
    "\u0b8e\u0b8f\bu\u0001\u0002\u0b8f\u0bd8\u0003\u0002\u0002\u0002\u0b90",
    "\u0b91\u0007+\u0002\u0002\u0b91\u0ba8\bu\u0001\u0002\u0b92\u0b93\u0005",
    "\u00e2r\u0002\u0b93\u0b9a\bu\u0001\u0002\u0b94\u0b95\u0007:\u0002\u0002",
    "\u0b95\u0b96\u0005\u00e2r\u0002\u0b96\u0b97\u0007\u00ca\u0002\u0002",
    "\u0b97\u0b98\u0005\u00e2r\u0002\u0b98\u0b99\bu\u0001\u0002\u0b99\u0b9b",
    "\u0003\u0002\u0002\u0002\u0b9a\u0b94\u0003\u0002\u0002\u0002\u0b9b\u0b9c",
    "\u0003\u0002\u0002\u0002\u0b9c\u0b9a\u0003\u0002\u0002\u0002\u0b9c\u0b9d",
    "\u0003\u0002\u0002\u0002\u0b9d\u0ba9\u0003\u0002\u0002\u0002\u0b9e\u0b9f",
    "\u0007:\u0002\u0002\u0b9f\u0ba0\u0005\u00dan\u0002\u0ba0\u0ba1\u0007",
    "\u00ca\u0002\u0002\u0ba1\u0ba2\u0005\u00e2r\u0002\u0ba2\u0ba3\bu\u0001",
    "\u0002\u0ba3\u0ba5\u0003\u0002\u0002\u0002\u0ba4\u0b9e\u0003\u0002\u0002",
    "\u0002\u0ba5\u0ba6\u0003\u0002\u0002\u0002\u0ba6\u0ba4\u0003\u0002\u0002",
    "\u0002\u0ba6\u0ba7\u0003\u0002\u0002\u0002\u0ba7\u0ba9\u0003\u0002\u0002",
    "\u0002\u0ba8\u0b92\u0003\u0002\u0002\u0002\u0ba8\u0ba4\u0003\u0002\u0002",
    "\u0002\u0ba9\u0bae\u0003\u0002\u0002\u0002\u0baa\u0bab\u0007d\u0002",
    "\u0002\u0bab\u0bac\u0005\u00e2r\u0002\u0bac\u0bad\bu\u0001\u0002\u0bad",
    "\u0baf\u0003\u0002\u0002\u0002\u0bae\u0baa\u0003\u0002\u0002\u0002\u0bae",
    "\u0baf\u0003\u0002\u0002\u0002\u0baf\u0bb0\u0003\u0002\u0002\u0002\u0bb0",
    "\u0bb1\u0007f\u0002\u0002\u0bb1\u0bd8\u0003\u0002\u0002\u0002\u0bb2",
    "\u0bb3\u00073\u0002\u0002\u0bb3\u0bb4\u0005\u00ecw\u0002\u0bb4\u0bb5",
    "\bu\u0001\u0002\u0bb5\u0bd8\u0003\u0002\u0002\u0002\u0bb6\u0bb7\u0005",
    "\u00ecw\u0002\u0bb7\u0bb8\bu\u0001\u0002\u0bb8\u0bd8\u0003\u0002\u0002",
    "\u0002\u0bb9\u0bbf\u0007\t\u0002\u0002\u0bba\u0bbb\u0005\u00ecw\u0002",
    "\u0bbb\u0bbc\bu\u0001\u0002\u0bbc\u0bc0\u0003\u0002\u0002\u0002\u0bbd",
    "\u0bbe\u0007>\u0002\u0002\u0bbe\u0bc0\bu\u0001\u0002\u0bbf\u0bba\u0003",
    "\u0002\u0002\u0002\u0bbf\u0bbd\u0003\u0002\u0002\u0002\u0bc0\u0bd8\u0003",
    "\u0002\u0002\u0002\u0bc1\u0bc2\u0007\u001d\u0002\u0002\u0bc2\u0bd8\b",
    "u\u0001\u0002\u0bc3\u0bd3\u0007\n\u0002\u0002\u0bc4\u0bc5\u0005\u00cc",
    "g\u0002\u0bc5\u0bc6\bu\u0001\u0002\u0bc6\u0bd4\u0003\u0002\u0002\u0002",
    "\u0bc7\u0bc8\u0005\u00dan\u0002\u0bc8\u0bd0\bu\u0001\u0002\u0bc9\u0bca",
    "\u0007\u0005\u0002\u0002\u0bca\u0bcb\bu\u0001\u0002\u0bcb\u0bcc\u0005",
    "\u00e2r\u0002\u0bcc\u0bcd\bu\u0001\u0002\u0bcd\u0bcf\u0003\u0002\u0002",
    "\u0002\u0bce\u0bc9\u0003\u0002\u0002\u0002\u0bcf\u0bd2\u0003\u0002\u0002",
    "\u0002\u0bd0\u0bce\u0003\u0002\u0002\u0002\u0bd0\u0bd1\u0003\u0002\u0002",
    "\u0002\u0bd1\u0bd4\u0003\u0002\u0002\u0002\u0bd2\u0bd0\u0003\u0002\u0002",
    "\u0002\u0bd3\u0bc4\u0003\u0002\u0002\u0002\u0bd3\u0bc7\u0003\u0002\u0002",
    "\u0002\u0bd4\u0bd5\u0003\u0002\u0002\u0002\u0bd5\u0bd6\u0007\u000b\u0002",
    "\u0002\u0bd6\u0bd8\u0003\u0002\u0002\u0002\u0bd7\u0b8a\u0003\u0002\u0002",
    "\u0002\u0bd7\u0b8d\u0003\u0002\u0002\u0002\u0bd7\u0b90\u0003\u0002\u0002",
    "\u0002\u0bd7\u0bb2\u0003\u0002\u0002\u0002\u0bd7\u0bb6\u0003\u0002\u0002",
    "\u0002\u0bd7\u0bb9\u0003\u0002\u0002\u0002\u0bd7\u0bc1\u0003\u0002\u0002",
    "\u0002\u0bd7\u0bc3\u0003\u0002\u0002\u0002\u0bd8\u0bda\u0003\u0002\u0002",
    "\u0002\u0bd9\u0b86\u0003\u0002\u0002\u0002\u0bd9\u0bd7\u0003\u0002\u0002",
    "\u0002\u0bda\u00e9\u0003\u0002\u0002\u0002\u0bdb\u0bdc\u0007;\u0002",
    "\u0002\u0bdc\u0bdd\u0007\n\u0002\u0002\u0bdd\u0be9\bv\u0001\u0002\u0bde",
    "\u0be0\t\u0012\u0002\u0002\u0bdf\u0be1\u0005\u00e2r\u0002\u0be0\u0bdf",
    "\u0003\u0002\u0002\u0002\u0be0\u0be1\u0003\u0002\u0002\u0002\u0be1\u0be2",
    "\u0003\u0002\u0002\u0002\u0be2\u0be3\u00070\u0002\u0002\u0be3\u0bea",
    "\u0005\u00e2r\u0002\u0be4\u0be7\u0005\u00e2r\u0002\u0be5\u0be6\u0007",
    "0\u0002\u0002\u0be6\u0be8\u0005\u00e2r\u0002\u0be7\u0be5\u0003\u0002",
    "\u0002\u0002\u0be7\u0be8\u0003\u0002\u0002\u0002\u0be8\u0bea\u0003\u0002",
    "\u0002\u0002\u0be9\u0bde\u0003\u0002\u0002\u0002\u0be9\u0be4\u0003\u0002",
    "\u0002\u0002\u0bea\u0beb\u0003\u0002\u0002\u0002\u0beb\u0bec\u0007\u000b",
    "\u0002\u0002\u0bec\u0bfe\u0003\u0002\u0002\u0002\u0bed\u0bee\u0007/",
    "\u0002\u0002\u0bee\u0bef\u0007\n\u0002\u0002\u0bef\u0bf0\bv\u0001\u0002",
    "\u0bf0\u0bf1\t\u0013\u0002\u0002\u0bf1\u0bf2\u00070\u0002\u0002\u0bf2",
    "\u0bf3\u0005\u00e2r\u0002\u0bf3\u0bf4\u0007\u000b\u0002\u0002\u0bf4",
    "\u0bfe\u0003\u0002\u0002\u0002\u0bf5\u0bf6\u0007,\u0002\u0002\u0bf6",
    "\u0bf7\u0007\n\u0002\u0002\u0bf7\u0bf8\bv\u0001\u0002\u0bf8\u0bf9\u0005",
    "\u00e2r\u0002\u0bf9\u0bfa\u0007)\u0002\u0002\u0bfa\u0bfb\u0005\u00ca",
    "f\u0002\u0bfb\u0bfc\u0007\u000b\u0002\u0002\u0bfc\u0bfe\u0003\u0002",
    "\u0002\u0002\u0bfd\u0bdb\u0003\u0002\u0002\u0002\u0bfd\u0bed\u0003\u0002",
    "\u0002\u0002\u0bfd\u0bf5\u0003\u0002\u0002\u0002\u0bfe\u00eb\u0003\u0002",
    "\u0002\u0002\u0bff\u0c00\u0005\u010c\u0087\u0002\u0c00\u0c06\bw\u0001",
    "\u0002\u0c01\u0c03\u0005\u00f0y\u0002\u0c02\u0c04\u0005\u00f6|\u0002",
    "\u0c03\u0c02\u0003\u0002\u0002\u0002\u0c03\u0c04\u0003\u0002\u0002\u0002",
    "\u0c04\u0c07\u0003\u0002\u0002\u0002\u0c05\u0c07\u0005\u00f6|\u0002",
    "\u0c06\u0c01\u0003\u0002\u0002\u0002\u0c06\u0c05\u0003\u0002\u0002\u0002",
    "\u0c06\u0c07\u0003\u0002\u0002\u0002\u0c07\u0c14\u0003\u0002\u0002\u0002",
    "\u0c08\u0c09\u0007\u0014\u0002\u0002\u0c09\u0c0a\u0005\u010c\u0087\u0002",
    "\u0c0a\u0c10\bw\u0001\u0002\u0c0b\u0c0d\u0005\u00f0y\u0002\u0c0c\u0c0e",
    "\u0005\u00f6|\u0002\u0c0d\u0c0c\u0003\u0002\u0002\u0002\u0c0d\u0c0e",
    "\u0003\u0002\u0002\u0002\u0c0e\u0c11\u0003\u0002\u0002\u0002\u0c0f\u0c11",
    "\u0005\u00f6|\u0002\u0c10\u0c0b\u0003\u0002\u0002\u0002\u0c10\u0c0f",
    "\u0003\u0002\u0002\u0002\u0c10\u0c11\u0003\u0002\u0002\u0002\u0c11\u0c13",
    "\u0003\u0002\u0002\u0002\u0c12\u0c08\u0003\u0002\u0002\u0002\u0c13\u0c16",
    "\u0003\u0002\u0002\u0002\u0c14\u0c12\u0003\u0002\u0002\u0002\u0c14\u0c15",
    "\u0003\u0002\u0002\u0002\u0c15\u00ed\u0003\u0002\u0002\u0002\u0c16\u0c14",
    "\u0003\u0002\u0002\u0002\u0c17\u0c18\u0007\n\u0002\u0002\u0c18\u0c1e",
    "\u0005\u00f2z\u0002\u0c19\u0c1a\u0007\u0005\u0002\u0002\u0c1a\u0c1b",
    "\bx\u0001\u0002\u0c1b\u0c1d\u0005\u00f2z\u0002\u0c1c\u0c19\u0003\u0002",
    "\u0002\u0002\u0c1d\u0c20\u0003\u0002\u0002\u0002\u0c1e\u0c1c\u0003\u0002",
    "\u0002\u0002\u0c1e\u0c1f\u0003\u0002\u0002\u0002\u0c1f\u0c21\u0003\u0002",
    "\u0002\u0002\u0c20\u0c1e\u0003\u0002\u0002\u0002\u0c21\u0c22\u0007\u000b",
    "\u0002\u0002\u0c22\u00ef\u0003\u0002\u0002\u0002\u0c23\u0c58\u0007\n",
    "\u0002\u0002\u0c24\u0c2a\u0005\u00f2z\u0002\u0c25\u0c26\u0007\u0005",
    "\u0002\u0002\u0c26\u0c27\by\u0001\u0002\u0c27\u0c29\u0005\u00f2z\u0002",
    "\u0c28\u0c25\u0003\u0002\u0002\u0002\u0c29\u0c2c\u0003\u0002\u0002\u0002",
    "\u0c2a\u0c28\u0003\u0002\u0002\u0002\u0c2a\u0c2b\u0003\u0002\u0002\u0002",
    "\u0c2b\u0c59\u0003\u0002\u0002\u0002\u0c2c\u0c2a\u0003\u0002\u0002\u0002",
    "\u0c2d\u0c2e\by\u0001\u0002\u0c2e\u0c34\u0005\u00f4{\u0002\u0c2f\u0c30",
    "\u0007\u0005\u0002\u0002\u0c30\u0c31\by\u0001\u0002\u0c31\u0c33\u0005",
    "\u00f4{\u0002\u0c32\u0c2f\u0003\u0002\u0002\u0002\u0c33\u0c36\u0003",
    "\u0002\u0002\u0002\u0c34\u0c32\u0003\u0002\u0002\u0002\u0c34\u0c35\u0003",
    "\u0002\u0002\u0002\u0c35\u0c59\u0003\u0002\u0002\u0002\u0c36\u0c34\u0003",
    "\u0002\u0002\u0002\u0c37\u0c38\u0005\u00e2r\u0002\u0c38\u0c40\by\u0001",
    "\u0002\u0c39\u0c3a\u0007\u0005\u0002\u0002\u0c3a\u0c3b\by\u0001\u0002",
    "\u0c3b\u0c3c\u0005\u00e2r\u0002\u0c3c\u0c3d\by\u0001\u0002\u0c3d\u0c3f",
    "\u0003\u0002\u0002\u0002\u0c3e\u0c39\u0003\u0002\u0002\u0002\u0c3f\u0c42",
    "\u0003\u0002\u0002\u0002\u0c40\u0c3e\u0003\u0002\u0002\u0002\u0c40\u0c41",
    "\u0003\u0002\u0002\u0002\u0c41\u0c59\u0003\u0002\u0002\u0002\u0c42\u0c40",
    "\u0003\u0002\u0002\u0002\u0c43\u0c44\u0007\'\u0002\u0002\u0c44\u0c45",
    "\by\u0001\u0002\u0c45\u0c46\u0005\u00e2r\u0002\u0c46\u0c47\by\u0001",
    "\u0002\u0c47\u0c59\u0003\u0002\u0002\u0002\u0c48\u0c49\u0007-\u0002",
    "\u0002\u0c49\u0c4a\by\u0001\u0002\u0c4a\u0c4b\u0005\u00e2r\u0002\u0c4b",
    "\u0c52\by\u0001\u0002\u0c4c\u0c4d\u0007\u0005\u0002\u0002\u0c4d\u0c4e",
    "\u0005\u00e2r\u0002\u0c4e\u0c4f\by\u0001\u0002\u0c4f\u0c51\u0003\u0002",
    "\u0002\u0002\u0c50\u0c4c\u0003\u0002\u0002\u0002\u0c51\u0c54\u0003\u0002",
    "\u0002\u0002\u0c52\u0c50\u0003\u0002\u0002\u0002\u0c52\u0c53\u0003\u0002",
    "\u0002\u0002\u0c53\u0c59\u0003\u0002\u0002\u0002\u0c54\u0c52\u0003\u0002",
    "\u0002\u0002\u0c55\u0c56\u0007\r\u0002\u0002\u0c56\u0c59\by\u0001\u0002",
    "\u0c57\u0c59\by\u0001\u0002\u0c58\u0c24\u0003\u0002\u0002\u0002\u0c58",
    "\u0c2d\u0003\u0002\u0002\u0002\u0c58\u0c37\u0003\u0002\u0002\u0002\u0c58",
    "\u0c43\u0003\u0002\u0002\u0002\u0c58\u0c48\u0003\u0002\u0002\u0002\u0c58",
    "\u0c55\u0003\u0002\u0002\u0002\u0c58\u0c57\u0003\u0002\u0002\u0002\u0c59",
    "\u0c5a\u0003\u0002\u0002\u0002\u0c5a\u0c5b\u0007\u000b\u0002\u0002\u0c5b",
    "\u00f1\u0003\u0002\u0002\u0002\u0c5c\u0c5d\u0005\u010c\u0087\u0002\u0c5d",
    "\u0c5e\u0007\t\u0002\u0002\u0c5e\u0c5f\u0005\u00e2r\u0002\u0c5f\u0c60",
    "\bz\u0001\u0002\u0c60\u00f3\u0003\u0002\u0002\u0002\u0c61\u0c62\u0005",
    "\u010c\u0087\u0002\u0c62\u0c63\u0007\u001e\u0002\u0002\u0c63\u0c64\u0005",
    "\u00e2r\u0002\u0c64\u0c65\b{\u0001\u0002\u0c65\u00f5\u0003\u0002\u0002",
    "\u0002\u0c66\u0c68\u0007\u0011\u0002\u0002\u0c67\u0c69\u0005\u00f8}",
    "\u0002\u0c68\u0c67\u0003\u0002\u0002\u0002\u0c68\u0c69\u0003\u0002\u0002",
    "\u0002\u0c69\u0c6a\u0003\u0002\u0002\u0002\u0c6a\u0c6b\u0005\u00fa~",
    "\u0002\u0c6b\u0c6c\u0005\u00dan\u0002\u0c6c\u0c6d\b|\u0001\u0002\u0c6d",
    "\u0c6e\u0007\u0013\u0002\u0002\u0c6e\u00f7\u0003\u0002\u0002\u0002\u0c6f",
    "\u0c70\b}\u0001\u0002\u0c70\u0c71\u0007>\u0002\u0002\u0c71\u0c72\u0007",
    "\t\u0002\u0002\u0c72\u0c73\b}\u0001\u0002\u0c73\u00f9\u0003\u0002\u0002",
    "\u0002\u0c74\u0c75\b~\u0001\u0002\u0c75\u0c76\u0007<\u0002\u0002\u0c76",
    "\u00fb\u0003\u0002\u0002\u0002\u0c77\u0c78\u0007\u0004\u0002\u0002\u0c78",
    "\u0c79\b\u007f\u0001\u0002\u0c79\u0c7e\u0005^0\u0002\u0c7a\u0c7b\u0007",
    "\u0005\u0002\u0002\u0c7b\u0c7d\u0005^0\u0002\u0c7c\u0c7a\u0003\u0002",
    "\u0002\u0002\u0c7d\u0c80\u0003\u0002\u0002\u0002\u0c7e\u0c7c\u0003\u0002",
    "\u0002\u0002\u0c7e\u0c7f\u0003\u0002\u0002\u0002\u0c7f\u0c81\u0003\u0002",
    "\u0002\u0002\u0c80\u0c7e\u0003\u0002\u0002\u0002\u0c81\u0c82\u0007\u0006",
    "\u0002\u0002\u0c82\u00fd\u0003\u0002\u0002\u0002\u0c83\u0c84\b\u0080",
    "\u0001\u0002\u0c84\u0c85\u0007\u0004\u0002\u0002\u0c85\u0c8b\u0005\u0100",
    "\u0081\u0002\u0c86\u0c87\u0007\u0005\u0002\u0002\u0c87\u0c88\b\u0080",
    "\u0001\u0002\u0c88\u0c8a\u0005\u0100\u0081\u0002\u0c89\u0c86\u0003\u0002",
    "\u0002\u0002\u0c8a\u0c8d\u0003\u0002\u0002\u0002\u0c8b\u0c89\u0003\u0002",
    "\u0002\u0002\u0c8b\u0c8c\u0003\u0002\u0002\u0002\u0c8c\u0c8e\u0003\u0002",
    "\u0002\u0002\u0c8d\u0c8b\u0003\u0002\u0002\u0002\u0c8e\u0c8f\u0007\u0006",
    "\u0002\u0002\u0c8f\u0cad\u0003\u0002\u0002\u0002\u0c90\u0c91\b\u0080",
    "\u0001\u0002\u0c91\u0c9e\u0007\u0011\u0002\u0002\u0c92\u0c93\u0005\u0102",
    "\u0082\u0002\u0c93\u0c9b\b\u0080\u0001\u0002\u0c94\u0c95\u0007\u0005",
    "\u0002\u0002\u0c95\u0c96\b\u0080\u0001\u0002\u0c96\u0c97\u0005\u0102",
    "\u0082\u0002\u0c97\u0c98\b\u0080\u0001\u0002\u0c98\u0c9a\u0003\u0002",
    "\u0002\u0002\u0c99\u0c94\u0003\u0002\u0002\u0002\u0c9a\u0c9d\u0003\u0002",
    "\u0002\u0002\u0c9b\u0c99\u0003\u0002\u0002\u0002\u0c9b\u0c9c\u0003\u0002",
    "\u0002\u0002\u0c9c\u0c9f\u0003\u0002\u0002\u0002\u0c9d\u0c9b\u0003\u0002",
    "\u0002\u0002\u0c9e\u0c92\u0003\u0002\u0002\u0002\u0c9e\u0c9f\u0003\u0002",
    "\u0002\u0002\u0c9f\u0ca0\u0003\u0002\u0002\u0002\u0ca0\u0cad\u0007\u0013",
    "\u0002\u0002\u0ca1\u0ca2\u0005\u0106\u0084\u0002\u0ca2\u0ca3\b\u0080",
    "\u0001\u0002\u0ca3\u0cad\u0003\u0002\u0002\u0002\u0ca4\u0ca7\u0007\u001a",
    "\u0002\u0002\u0ca5\u0ca7\u0007\u001b\u0002\u0002\u0ca6\u0ca4\u0003\u0002",
    "\u0002\u0002\u0ca6\u0ca5\u0003\u0002\u0002\u0002\u0ca7\u0ca8\u0003\u0002",
    "\u0002\u0002\u0ca8\u0ca9\u0007>\u0002\u0002\u0ca9\u0cad\b\u0080\u0001",
    "\u0002\u0caa\u0cab\b\u0080\u0001\u0002\u0cab\u0cad\u0005\u0108\u0085",
    "\u0002\u0cac\u0c83\u0003\u0002\u0002\u0002\u0cac\u0c90\u0003\u0002\u0002",
    "\u0002\u0cac\u0ca1\u0003\u0002\u0002\u0002\u0cac\u0ca6\u0003\u0002\u0002",
    "\u0002\u0cac\u0caa\u0003\u0002\u0002\u0002\u0cad\u00ff\u0003\u0002\u0002",
    "\u0002\u0cae\u0cb3\u0005\u0108\u0085\u0002\u0caf\u0cb0\u0007\b\u0002",
    "\u0002\u0cb0\u0cb1\u0005\u010c\u0087\u0002\u0cb1\u0cb2\b\u0081\u0001",
    "\u0002\u0cb2\u0cb4\u0003\u0002\u0002\u0002\u0cb3\u0caf\u0003\u0002\u0002",
    "\u0002\u0cb3\u0cb4\u0003\u0002\u0002\u0002\u0cb4\u0cb7\u0003\u0002\u0002",
    "\u0002\u0cb5\u0cb6\u0007\t\u0002\u0002\u0cb6\u0cb8\u0005\u00fe\u0080",
    "\u0002\u0cb7\u0cb5\u0003\u0002\u0002\u0002\u0cb7\u0cb8\u0003\u0002\u0002",
    "\u0002\u0cb8\u0cb9\u0003\u0002\u0002\u0002\u0cb9\u0cba\b\u0081\u0001",
    "\u0002\u0cba\u0101\u0003\u0002\u0002\u0002\u0cbb\u0cbc\b\u0082\u0001",
    "\u0002\u0cbc\u0cbd\u0007\u0004\u0002\u0002\u0cbd\u0cc3\u0005\u0104\u0083",
    "\u0002\u0cbe\u0cbf\u0007\u0005\u0002\u0002\u0cbf\u0cc0\b\u0082\u0001",
    "\u0002\u0cc0\u0cc2\u0005\u0104\u0083\u0002\u0cc1\u0cbe\u0003\u0002\u0002",
    "\u0002\u0cc2\u0cc5\u0003\u0002\u0002\u0002\u0cc3\u0cc1\u0003\u0002\u0002",
    "\u0002\u0cc3\u0cc4\u0003\u0002\u0002\u0002\u0cc4\u0cc6\u0003\u0002\u0002",
    "\u0002\u0cc5\u0cc3\u0003\u0002\u0002\u0002\u0cc6\u0cc7\u0007\u0006\u0002",
    "\u0002\u0cc7\u0ce5\u0003\u0002\u0002\u0002\u0cc8\u0cc9\b\u0082\u0001",
    "\u0002\u0cc9\u0cd6\u0007\u0011\u0002\u0002\u0cca\u0ccb\u0005\u0102\u0082",
    "\u0002\u0ccb\u0cd3\b\u0082\u0001\u0002\u0ccc\u0ccd\u0007\u0005\u0002",
    "\u0002\u0ccd\u0cce\b\u0082\u0001\u0002\u0cce\u0ccf\u0005\u0102\u0082",
    "\u0002\u0ccf\u0cd0\b\u0082\u0001\u0002\u0cd0\u0cd2\u0003\u0002\u0002",
    "\u0002\u0cd1\u0ccc\u0003\u0002\u0002\u0002\u0cd2\u0cd5\u0003\u0002\u0002",
    "\u0002\u0cd3\u0cd1\u0003\u0002\u0002\u0002\u0cd3\u0cd4\u0003\u0002\u0002",
    "\u0002\u0cd4\u0cd7\u0003\u0002\u0002\u0002\u0cd5\u0cd3\u0003\u0002\u0002",
    "\u0002\u0cd6\u0cca\u0003\u0002\u0002\u0002\u0cd6\u0cd7\u0003\u0002\u0002",
    "\u0002\u0cd7\u0cd8\u0003\u0002\u0002\u0002\u0cd8\u0ce5\u0007\u0013\u0002",
    "\u0002\u0cd9\u0cda\u0005\u0106\u0084\u0002\u0cda\u0cdb\b\u0082\u0001",
    "\u0002\u0cdb\u0ce5\u0003\u0002\u0002\u0002\u0cdc\u0cdf\u0007\u001a\u0002",
    "\u0002\u0cdd\u0cdf\u0007\u001b\u0002\u0002\u0cde\u0cdc\u0003\u0002\u0002",
    "\u0002\u0cde\u0cdd\u0003\u0002\u0002\u0002\u0cdf\u0ce0\u0003\u0002\u0002",
    "\u0002\u0ce0\u0ce1\u0007>\u0002\u0002\u0ce1\u0ce5\b\u0082\u0001\u0002",
    "\u0ce2\u0ce3\b\u0082\u0001\u0002\u0ce3\u0ce5\u0005\u0108\u0085\u0002",
    "\u0ce4\u0cbb\u0003\u0002\u0002\u0002\u0ce4\u0cc8\u0003\u0002\u0002\u0002",
    "\u0ce4\u0cd9\u0003\u0002\u0002\u0002\u0ce4\u0cde\u0003\u0002\u0002\u0002",
    "\u0ce4\u0ce2\u0003\u0002\u0002\u0002\u0ce5\u0103\u0003\u0002\u0002\u0002",
    "\u0ce6\u0ce9\u0005\u010c\u0087\u0002\u0ce7\u0ce8\u0007\t\u0002\u0002",
    "\u0ce8\u0cea\u0005\u0102\u0082\u0002\u0ce9\u0ce7\u0003\u0002\u0002\u0002",
    "\u0ce9\u0cea\u0003\u0002\u0002\u0002\u0cea\u0ceb\u0003\u0002\u0002\u0002",
    "\u0ceb\u0cec\b\u0083\u0001\u0002\u0cec\u0105\u0003\u0002\u0002\u0002",
    "\u0ced\u0cee\u0007\b\u0002\u0002\u0cee\u0cef\u0005\u010c\u0087\u0002",
    "\u0cef\u0cf0\b\u0084\u0001\u0002\u0cf0\u0cfc\u0003\u0002\u0002\u0002",
    "\u0cf1\u0cf2\u00075\u0002\u0002\u0cf2\u0cfc\b\u0084\u0001\u0002\u0cf3",
    "\u0cf4\u0007&\u0002\u0002\u0cf4\u0cfc\b\u0084\u0001\u0002\u0cf5\u0cf6",
    "\u0007>\u0002\u0002\u0cf6\u0cfc\b\u0084\u0001\u0002\u0cf7\u0cf8\u0007",
    "\"\u0002\u0002\u0cf8\u0cfc\b\u0084\u0001\u0002\u0cf9\u0cfa\u0007#\u0002",
    "\u0002\u0cfa\u0cfc\b\u0084\u0001\u0002\u0cfb\u0ced\u0003\u0002\u0002",
    "\u0002\u0cfb\u0cf1\u0003\u0002\u0002\u0002\u0cfb\u0cf3\u0003\u0002\u0002",
    "\u0002\u0cfb\u0cf5\u0003\u0002\u0002\u0002\u0cfb\u0cf7\u0003\u0002\u0002",
    "\u0002\u0cfb\u0cf9\u0003\u0002\u0002\u0002\u0cfc\u0107\u0003\u0002\u0002",
    "\u0002\u0cfd\u0cfe\u0005\u010c\u0087\u0002\u0cfe\u0d05\b\u0085\u0001",
    "\u0002\u0cff\u0d00\u0007\u0014\u0002\u0002\u0d00\u0d01\u0005\u010c\u0087",
    "\u0002\u0d01\u0d02\b\u0085\u0001\u0002\u0d02\u0d04\u0003\u0002\u0002",
    "\u0002\u0d03\u0cff\u0003\u0002\u0002\u0002\u0d04\u0d07\u0003\u0002\u0002",
    "\u0002\u0d05\u0d03\u0003\u0002\u0002\u0002\u0d05\u0d06\u0003\u0002\u0002",
    "\u0002\u0d06\u0109\u0003\u0002\u0002\u0002\u0d07\u0d05\u0003\u0002\u0002",
    "\u0002\u0d08\u0d09\u0007\u00d9\u0002\u0002\u0d09\u010b\u0003\u0002\u0002",
    "\u0002\u0d0a\u0d0b\t\u0014\u0002\u0002\u0d0b\u010d\u0003\u0002\u0002",
    "\u0002\u019e\u0111\u0117\u0119\u011f\u0121\u0124\u013f\u0144\u014e\u0155",
    "\u0157\u0161\u0167\u016e\u0174\u017e\u018b\u018f\u0199\u019f\u01a1\u01ab",
    "\u01b1\u01b3\u01b8\u01bc\u01c1\u01c5\u01cf\u01db\u01e0\u01e4\u01e7\u01ee",
    "\u01f8\u01fb\u0201\u0207\u020b\u0211\u0216\u021d\u0223\u0226\u0229\u0231",
    "\u0235\u023e\u0241\u0248\u024a\u0252\u0256\u0259\u0264\u026a\u0273\u0277",
    "\u027b\u027d\u0287\u028e\u0295\u0299\u02a3\u02a8\u02b0\u02b4\u02bb\u02c1",
    "\u02cc\u02cf\u02d9\u02e0\u02e5\u02e9\u02ef\u02f8\u02fc\u02ff\u0307\u030c",
    "\u0313\u031a\u031f\u0329\u0332\u0336\u033f\u0345\u034a\u0353\u0359\u0361",
    "\u0367\u036f\u0375\u037d\u0383\u038b\u038f\u0398\u039f\u03af\u03c2\u03cc",
    "\u03d2\u03d7\u03de\u03e4\u03e6\u03ec\u03f1\u03f8\u0401\u0405\u040d\u0419",
    "\u0422\u0428\u042f\u0435\u043a\u0442\u0449\u044f\u0454\u045c\u0466\u046b",
    "\u0472\u0478\u047d\u0485\u048e\u0492\u049d\u04a2\u04aa\u04b2\u04bb\u04be",
    "\u04c5\u04cb\u04d0\u04dc\u04df\u04e6\u04e8\u04ee\u04f5\u04fa\u04fd\u0500",
    "\u0503\u050a\u0512\u0517\u051a\u0535\u053c\u0542\u0549\u0551\u0555\u0557",
    "\u0559\u055f\u0564\u056f\u0576\u0579\u0581\u0589\u058d\u0590\u0596\u0599",
    "\u059d\u05a1\u05a8\u05ad\u05b0\u05b9\u05bd\u05c7\u05cd\u05d7\u05db\u05e0",
    "\u05ea\u05ee\u05f7\u05fa\u0601\u0609\u060e\u0613\u061d\u0620\u0627\u062f",
    "\u0639\u0640\u0647\u064f\u0652\u0659\u065b\u065f\u0663\u0687\u0689\u068b",
    "\u0691\u069b\u06a6\u06a9\u06b4\u06bd\u06c2\u06c7\u06ca\u06d9\u06db\u06f2",
    "\u06fc\u0706\u070c\u0713\u0726\u073c\u0740\u074a\u0774\u0778\u077a\u077d",
    "\u0789\u078b\u0790\u0799\u07a0\u07b0\u07b2\u07c3\u07c5\u07cf\u07d6\u07ed",
    "\u07f7\u0801\u0809\u081b\u082d\u0831\u083a\u0842\u0847\u0859\u0862\u0877",
    "\u087b\u087d\u087f\u088c\u0891\u0893\u08a2\u08a5\u08b3\u08bc\u08c4\u08ca",
    "\u08cc\u08d2\u08dd\u08ed\u08f4\u08fc\u0902\u0907\u090f\u0915\u091d\u0923",
    "\u0925\u0927\u092e\u0938\u0948\u094c\u094e\u0952\u0958\u095c\u0967\u0970",
    "\u0979\u097e\u0985\u098a\u099f\u09a4\u09aa\u09ac\u09b3\u09be\u09ca\u09ce",
    "\u09d7\u09db\u09e0\u09e3\u09ea\u09f8\u09fb\u0a03\u0a08\u0a0a\u0a12\u0a17",
    "\u0a1d\u0a24\u0a37\u0a3f\u0a44\u0a49\u0a4d\u0a54\u0a5b\u0a5f\u0a69\u0a6e",
    "\u0a72\u0a78\u0a7f\u0a8b\u0a8e\u0a94\u0aa0\u0aa3\u0aa9\u0aab\u0ab6\u0abc",
    "\u0ac2\u0ac6\u0ad3\u0ad5\u0add\u0ae6\u0af3\u0af9\u0afb\u0b01\u0b04\u0b0b",
    "\u0b0e\u0b12\u0b1d\u0b28\u0b3a\u0b43\u0b4b\u0b4d\u0b61\u0b63\u0b6d\u0b78",
    "\u0b83\u0b9c\u0ba6\u0ba8\u0bae\u0bbf\u0bd0\u0bd3\u0bd7\u0bd9\u0be0\u0be7",
    "\u0be9\u0bfd\u0c03\u0c06\u0c0d\u0c10\u0c14\u0c1e\u0c2a\u0c34\u0c40\u0c52",
    "\u0c58\u0c68\u0c7e\u0c8b\u0c9b\u0c9e\u0ca6\u0cac\u0cb3\u0cb7\u0cc3\u0cd3",
    "\u0cd6\u0cde\u0ce4\u0ce9\u0cfb\u0d05"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "';'", "'{'", "','", "'}'", "'::'", "'#'", "':'", 
                     "'('", "')'", "'@'", "'*'", "'='", "'<='", "'<'", "'['", 
                     "'..'", "']'", "'.'", "'<>'", "'>'", "'>='", "'!='", 
                     "'||'", "'+'", "'-'", "'/'", "'?'", "'=>'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, "WhiteSpace", "Comment", "LineComment", 
                      "String", "QuotedLiteral", "UnterminatedLiteral", 
                      "UnterminatedQuotedIdentifier", "Boolean", "ALL", 
                      "ANY", "AS", "BY", "CASE", "CAST", "DISTINCT", "EXISTS", 
                      "EXTRACT", "FROM", "IN", "KEY", "NEW", "NOT", "NULL", 
                      "OF", "ON", "SELECT", "SOME", "WHEN", "TRIM", "WHERE", 
                      "WITH", "Number", "ABSTRACT", "ACTION", "ACTIONS", 
                      "AFTER", "ALWAYS", "ANALYSIS", "AND", "ANNOTATE", 
                      "ANNOTATION", "ARRAY", "ASC", "ASPECT", "ASSOCIATION", 
                      "ASYNC", "ASYNCHRONOUS", "AUTO", "BETWEEN", "BOTH", 
                      "CACHE", "COLUMN", "COLUMNS", "COMPOSITION", "CONFIGURATION", 
                      "CONST", "CONTEXT", "CROSS", "CURRENT", "CYCLE", "DAY", 
                      "DEFAULT", "DEFINE", "DEPENDS", "DESC", "DETECTION", 
                      "DISABLED", "DOCUMENTS", "ELEMENT", "ELSE", "ENABLED", 
                      "END", "ENTITY", "ENUM", "EVENT", "EVERY", "ESCAPE", 
                      "EXCEPT", "EXCLUDING", "EXISTING", "EXTEND", "EXTENDED", 
                      "FAST", "FIRST", "FLUSH", "FULL", "FULLTEXT", "FUNCTION", 
                      "FUZZY", "GENERATED", "GETNUMSERVERS", "GROUP", "HANA", 
                      "HASH", "HAVING", "HOUR", "IDENTITY", "INCREMENT", 
                      "INDEX", "INNER", "INTERSECT", "INTO", "IS", "JOIN", 
                      "KEEPING", "LANGUAGE", "LAST", "LAYOUT", "LEADING", 
                      "LEFT", "LIKE", "LIMIT", "LOCALIZED", "MANY", "MASKED", 
                      "MAXVALUE", "MERGE", "MIGRATION", "MINING", "MINUS", 
                      "MINUTE", "MINUTES", "MINVALUE", "MIME", "MIXIN", 
                      "MODE", "MONTH", "NAME", "NAMESPACE", "NO", "NULLS", 
                      "OFF", "OFFSET", "ONE", "ONLY", "OR", "ORDER", "OTHERS", 
                      "OUTER", "OVERLAY", "QUEUE", "PARAMETERS", "PARTITION", 
                      "PARTITIONING", "PARTITIONS", "PHRASE", "PREPROCESS", 
                      "PRIORITY", "PROJECTION", "RANGE", "RATIO", "REDIRECTED", 
                      "RESET", "RETURNS", "RIGHT", "ROUNDROBIN", "ROW", 
                      "SEARCH", "SECOND", "SEPARATORS", "SERVICE", "START", 
                      "STORAGE", "STORE", "SUBTYPE", "SYNC", "SYNCHRONOUS", 
                      "TABLE", "TECHNICAL", "TEMPORARY", "TEXT", "THEN", 
                      "TOKEN", "TOP", "TRAILING", "TO", "TYPE", "UNION", 
                      "UNIQUE", "UNLOAD", "USING", "VALUE", "VALUES", "VIEW", 
                      "VIRTUAL", "YEAR", "Identifier", "IllegalToken", "HideAlternatives", 
                      "DOTbeforeBRACE", "COMPOSITIONofBRACE" ];

var ruleNames =  [ "start", "queryEOF", "conditionEOF", "namespaceDeclaration", 
                   "usingDeclaration", "innerUsing", "externalPath", "annotationAssignment_1", 
                   "annotationAssignment_paren", "annotationAssignment_fix", 
                   "annotationAssignment_ll1", "annotationAssignment_atn", 
                   "requiredSemi", "optionalSemi", "artifactDef", "contextDef", 
                   "extendContext", "entityDef", "projectionSpec", "projectionExclusion", 
                   "projectionWithOptAlias", "extendEntity", "extendForEntity", 
                   "extendProjection", "actionFunctionDef", "actionFunctionMainDef", 
                   "eventDef", "typeDef", "extendType", "annotationDef", 
                   "extendAnnotation", "extendArtifact", "extendWithOptElements", 
                   "annotateArtifact", "annotateElement", "annotateAction", 
                   "annotateParam", "constDef", "extendConst", "enumSymbolDef", 
                   "elementDefOrExtend", "elementDef", "mixinElementDef", 
                   "misplacedAnnotations", "elementDefInner", "extendElement", 
                   "selectItemDef", "parameterListDef", "parameterDef", 
                   "entityParameters", "entityParameterDef", "nullability", 
                   "elementProperties", "sequenceOptions", "viewDef", "extendView", 
                   "technicalConfiguration", "migration", "storeType", "usingExtendedStorage", 
                   "index", "ascDesc", "fullTextIndex", "fulltextIndexParameters", 
                   "onOff", "fullTextChangeTracking", "asyncSpec", "fuzzyIndex", 
                   "partition", "partitionSpec", "roundRobinPartition", 
                   "hashPartition", "partitionColumns", "partitionColumn", 
                   "rangePartition", "storePartitionRanges", "storePartitionSpec", 
                   "partitionRanges", "rangeSpec", "rangeValue", "numberPartitions", 
                   "tableGroup", "tableGroupSpec", "unloadPriority", "autoMerge", 
                   "includeRef", "typeSpec", "returnTypeSpec", "typeSpecSemi", 
                   "typeStruct", "typeCompoStruct", "typeArray", "typeAssociationBase", 
                   "typeAssociationCont", "typeAssociationElementCont", 
                   "typeToOne", "typeToMany", "cardinality", "foreignKey", 
                   "typeTypeOf", "typeRefOptArgs", "queryExpression", "orderBySpec", 
                   "queryTerm", "queryPrimary", "tableExpression", "tableTerm", 
                   "fromPath", "condition", "conditionAnd", "conditionTerm", 
                   "predicate", "expression", "expressionSum", "expressionFactor", 
                   "expressionTerm", "specialFunction", "valuePath", "fromArguments", 
                   "pathArguments", "namedExpression", "arrowedExpression", 
                   "cardinalityAndFilter", "optionalCardinality", "optionalWhereForFilter", 
                   "selectItemInline", "value", "namedValue", "arrayValue", 
                   "namedValueInArray", "literalValue", "simplePath", "identNoKeyword", 
                   "ident" ];

function languageParser (input) {
	genericAntlrParser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

languageParser.prototype = Object.create(genericAntlrParser.prototype);
languageParser.prototype.constructor = languageParser;

Object.defineProperty(languageParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

languageParser.EOF = antlr4.Token.EOF;
languageParser.T__0 = 1;
languageParser.T__1 = 2;
languageParser.T__2 = 3;
languageParser.T__3 = 4;
languageParser.T__4 = 5;
languageParser.T__5 = 6;
languageParser.T__6 = 7;
languageParser.T__7 = 8;
languageParser.T__8 = 9;
languageParser.T__9 = 10;
languageParser.T__10 = 11;
languageParser.T__11 = 12;
languageParser.T__12 = 13;
languageParser.T__13 = 14;
languageParser.T__14 = 15;
languageParser.T__15 = 16;
languageParser.T__16 = 17;
languageParser.T__17 = 18;
languageParser.T__18 = 19;
languageParser.T__19 = 20;
languageParser.T__20 = 21;
languageParser.T__21 = 22;
languageParser.T__22 = 23;
languageParser.T__23 = 24;
languageParser.T__24 = 25;
languageParser.T__25 = 26;
languageParser.T__26 = 27;
languageParser.T__27 = 28;
languageParser.WhiteSpace = 29;
languageParser.Comment = 30;
languageParser.LineComment = 31;
languageParser.String = 32;
languageParser.QuotedLiteral = 33;
languageParser.UnterminatedLiteral = 34;
languageParser.UnterminatedQuotedIdentifier = 35;
languageParser.Boolean = 36;
languageParser.ALL = 37;
languageParser.ANY = 38;
languageParser.AS = 39;
languageParser.BY = 40;
languageParser.CASE = 41;
languageParser.CAST = 42;
languageParser.DISTINCT = 43;
languageParser.EXISTS = 44;
languageParser.EXTRACT = 45;
languageParser.FROM = 46;
languageParser.IN = 47;
languageParser.KEY = 48;
languageParser.NEW = 49;
languageParser.NOT = 50;
languageParser.NULL = 51;
languageParser.OF = 52;
languageParser.ON = 53;
languageParser.SELECT = 54;
languageParser.SOME = 55;
languageParser.WHEN = 56;
languageParser.TRIM = 57;
languageParser.WHERE = 58;
languageParser.WITH = 59;
languageParser.Number = 60;
languageParser.ABSTRACT = 61;
languageParser.ACTION = 62;
languageParser.ACTIONS = 63;
languageParser.AFTER = 64;
languageParser.ALWAYS = 65;
languageParser.ANALYSIS = 66;
languageParser.AND = 67;
languageParser.ANNOTATE = 68;
languageParser.ANNOTATION = 69;
languageParser.ARRAY = 70;
languageParser.ASC = 71;
languageParser.ASPECT = 72;
languageParser.ASSOCIATION = 73;
languageParser.ASYNC = 74;
languageParser.ASYNCHRONOUS = 75;
languageParser.AUTO = 76;
languageParser.BETWEEN = 77;
languageParser.BOTH = 78;
languageParser.CACHE = 79;
languageParser.COLUMN = 80;
languageParser.COLUMNS = 81;
languageParser.COMPOSITION = 82;
languageParser.CONFIGURATION = 83;
languageParser.CONST = 84;
languageParser.CONTEXT = 85;
languageParser.CROSS = 86;
languageParser.CURRENT = 87;
languageParser.CYCLE = 88;
languageParser.DAY = 89;
languageParser.DEFAULT = 90;
languageParser.DEFINE = 91;
languageParser.DEPENDS = 92;
languageParser.DESC = 93;
languageParser.DETECTION = 94;
languageParser.DISABLED = 95;
languageParser.DOCUMENTS = 96;
languageParser.ELEMENT = 97;
languageParser.ELSE = 98;
languageParser.ENABLED = 99;
languageParser.END = 100;
languageParser.ENTITY = 101;
languageParser.ENUM = 102;
languageParser.EVENT = 103;
languageParser.EVERY = 104;
languageParser.ESCAPE = 105;
languageParser.EXCEPT = 106;
languageParser.EXCLUDING = 107;
languageParser.EXISTING = 108;
languageParser.EXTEND = 109;
languageParser.EXTENDED = 110;
languageParser.FAST = 111;
languageParser.FIRST = 112;
languageParser.FLUSH = 113;
languageParser.FULL = 114;
languageParser.FULLTEXT = 115;
languageParser.FUNCTION = 116;
languageParser.FUZZY = 117;
languageParser.GENERATED = 118;
languageParser.GETNUMSERVERS = 119;
languageParser.GROUP = 120;
languageParser.HANA = 121;
languageParser.HASH = 122;
languageParser.HAVING = 123;
languageParser.HOUR = 124;
languageParser.IDENTITY = 125;
languageParser.INCREMENT = 126;
languageParser.INDEX = 127;
languageParser.INNER = 128;
languageParser.INTERSECT = 129;
languageParser.INTO = 130;
languageParser.IS = 131;
languageParser.JOIN = 132;
languageParser.KEEPING = 133;
languageParser.LANGUAGE = 134;
languageParser.LAST = 135;
languageParser.LAYOUT = 136;
languageParser.LEADING = 137;
languageParser.LEFT = 138;
languageParser.LIKE = 139;
languageParser.LIMIT = 140;
languageParser.LOCALIZED = 141;
languageParser.MANY = 142;
languageParser.MASKED = 143;
languageParser.MAXVALUE = 144;
languageParser.MERGE = 145;
languageParser.MIGRATION = 146;
languageParser.MINING = 147;
languageParser.MINUS = 148;
languageParser.MINUTE = 149;
languageParser.MINUTES = 150;
languageParser.MINVALUE = 151;
languageParser.MIME = 152;
languageParser.MIXIN = 153;
languageParser.MODE = 154;
languageParser.MONTH = 155;
languageParser.NAME = 156;
languageParser.NAMESPACE = 157;
languageParser.NO = 158;
languageParser.NULLS = 159;
languageParser.OFF = 160;
languageParser.OFFSET = 161;
languageParser.ONE = 162;
languageParser.ONLY = 163;
languageParser.OR = 164;
languageParser.ORDER = 165;
languageParser.OTHERS = 166;
languageParser.OUTER = 167;
languageParser.OVERLAY = 168;
languageParser.QUEUE = 169;
languageParser.PARAMETERS = 170;
languageParser.PARTITION = 171;
languageParser.PARTITIONING = 172;
languageParser.PARTITIONS = 173;
languageParser.PHRASE = 174;
languageParser.PREPROCESS = 175;
languageParser.PRIORITY = 176;
languageParser.PROJECTION = 177;
languageParser.RANGE = 178;
languageParser.RATIO = 179;
languageParser.REDIRECTED = 180;
languageParser.RESET = 181;
languageParser.RETURNS = 182;
languageParser.RIGHT = 183;
languageParser.ROUNDROBIN = 184;
languageParser.ROW = 185;
languageParser.SEARCH = 186;
languageParser.SECOND = 187;
languageParser.SEPARATORS = 188;
languageParser.SERVICE = 189;
languageParser.START = 190;
languageParser.STORAGE = 191;
languageParser.STORE = 192;
languageParser.SUBTYPE = 193;
languageParser.SYNC = 194;
languageParser.SYNCHRONOUS = 195;
languageParser.TABLE = 196;
languageParser.TECHNICAL = 197;
languageParser.TEMPORARY = 198;
languageParser.TEXT = 199;
languageParser.THEN = 200;
languageParser.TOKEN = 201;
languageParser.TOP = 202;
languageParser.TRAILING = 203;
languageParser.TO = 204;
languageParser.TYPE = 205;
languageParser.UNION = 206;
languageParser.UNIQUE = 207;
languageParser.UNLOAD = 208;
languageParser.USING = 209;
languageParser.VALUE = 210;
languageParser.VALUES = 211;
languageParser.VIEW = 212;
languageParser.VIRTUAL = 213;
languageParser.YEAR = 214;
languageParser.Identifier = 215;
languageParser.IllegalToken = 216;
languageParser.HideAlternatives = 217;
languageParser.DOTbeforeBRACE = 218;
languageParser.COMPOSITIONofBRACE = 219;

languageParser.RULE_start = 0;
languageParser.RULE_queryEOF = 1;
languageParser.RULE_conditionEOF = 2;
languageParser.RULE_namespaceDeclaration = 3;
languageParser.RULE_usingDeclaration = 4;
languageParser.RULE_innerUsing = 5;
languageParser.RULE_externalPath = 6;
languageParser.RULE_annotationAssignment_1 = 7;
languageParser.RULE_annotationAssignment_paren = 8;
languageParser.RULE_annotationAssignment_fix = 9;
languageParser.RULE_annotationAssignment_ll1 = 10;
languageParser.RULE_annotationAssignment_atn = 11;
languageParser.RULE_requiredSemi = 12;
languageParser.RULE_optionalSemi = 13;
languageParser.RULE_artifactDef = 14;
languageParser.RULE_contextDef = 15;
languageParser.RULE_extendContext = 16;
languageParser.RULE_entityDef = 17;
languageParser.RULE_projectionSpec = 18;
languageParser.RULE_projectionExclusion = 19;
languageParser.RULE_projectionWithOptAlias = 20;
languageParser.RULE_extendEntity = 21;
languageParser.RULE_extendForEntity = 22;
languageParser.RULE_extendProjection = 23;
languageParser.RULE_actionFunctionDef = 24;
languageParser.RULE_actionFunctionMainDef = 25;
languageParser.RULE_eventDef = 26;
languageParser.RULE_typeDef = 27;
languageParser.RULE_extendType = 28;
languageParser.RULE_annotationDef = 29;
languageParser.RULE_extendAnnotation = 30;
languageParser.RULE_extendArtifact = 31;
languageParser.RULE_extendWithOptElements = 32;
languageParser.RULE_annotateArtifact = 33;
languageParser.RULE_annotateElement = 34;
languageParser.RULE_annotateAction = 35;
languageParser.RULE_annotateParam = 36;
languageParser.RULE_constDef = 37;
languageParser.RULE_extendConst = 38;
languageParser.RULE_enumSymbolDef = 39;
languageParser.RULE_elementDefOrExtend = 40;
languageParser.RULE_elementDef = 41;
languageParser.RULE_mixinElementDef = 42;
languageParser.RULE_misplacedAnnotations = 43;
languageParser.RULE_elementDefInner = 44;
languageParser.RULE_extendElement = 45;
languageParser.RULE_selectItemDef = 46;
languageParser.RULE_parameterListDef = 47;
languageParser.RULE_parameterDef = 48;
languageParser.RULE_entityParameters = 49;
languageParser.RULE_entityParameterDef = 50;
languageParser.RULE_nullability = 51;
languageParser.RULE_elementProperties = 52;
languageParser.RULE_sequenceOptions = 53;
languageParser.RULE_viewDef = 54;
languageParser.RULE_extendView = 55;
languageParser.RULE_technicalConfiguration = 56;
languageParser.RULE_migration = 57;
languageParser.RULE_storeType = 58;
languageParser.RULE_usingExtendedStorage = 59;
languageParser.RULE_index = 60;
languageParser.RULE_ascDesc = 61;
languageParser.RULE_fullTextIndex = 62;
languageParser.RULE_fulltextIndexParameters = 63;
languageParser.RULE_onOff = 64;
languageParser.RULE_fullTextChangeTracking = 65;
languageParser.RULE_asyncSpec = 66;
languageParser.RULE_fuzzyIndex = 67;
languageParser.RULE_partition = 68;
languageParser.RULE_partitionSpec = 69;
languageParser.RULE_roundRobinPartition = 70;
languageParser.RULE_hashPartition = 71;
languageParser.RULE_partitionColumns = 72;
languageParser.RULE_partitionColumn = 73;
languageParser.RULE_rangePartition = 74;
languageParser.RULE_storePartitionRanges = 75;
languageParser.RULE_storePartitionSpec = 76;
languageParser.RULE_partitionRanges = 77;
languageParser.RULE_rangeSpec = 78;
languageParser.RULE_rangeValue = 79;
languageParser.RULE_numberPartitions = 80;
languageParser.RULE_tableGroup = 81;
languageParser.RULE_tableGroupSpec = 82;
languageParser.RULE_unloadPriority = 83;
languageParser.RULE_autoMerge = 84;
languageParser.RULE_includeRef = 85;
languageParser.RULE_typeSpec = 86;
languageParser.RULE_returnTypeSpec = 87;
languageParser.RULE_typeSpecSemi = 88;
languageParser.RULE_typeStruct = 89;
languageParser.RULE_typeCompoStruct = 90;
languageParser.RULE_typeArray = 91;
languageParser.RULE_typeAssociationBase = 92;
languageParser.RULE_typeAssociationCont = 93;
languageParser.RULE_typeAssociationElementCont = 94;
languageParser.RULE_typeToOne = 95;
languageParser.RULE_typeToMany = 96;
languageParser.RULE_cardinality = 97;
languageParser.RULE_foreignKey = 98;
languageParser.RULE_typeTypeOf = 99;
languageParser.RULE_typeRefOptArgs = 100;
languageParser.RULE_queryExpression = 101;
languageParser.RULE_orderBySpec = 102;
languageParser.RULE_queryTerm = 103;
languageParser.RULE_queryPrimary = 104;
languageParser.RULE_tableExpression = 105;
languageParser.RULE_tableTerm = 106;
languageParser.RULE_fromPath = 107;
languageParser.RULE_condition = 108;
languageParser.RULE_conditionAnd = 109;
languageParser.RULE_conditionTerm = 110;
languageParser.RULE_predicate = 111;
languageParser.RULE_expression = 112;
languageParser.RULE_expressionSum = 113;
languageParser.RULE_expressionFactor = 114;
languageParser.RULE_expressionTerm = 115;
languageParser.RULE_specialFunction = 116;
languageParser.RULE_valuePath = 117;
languageParser.RULE_fromArguments = 118;
languageParser.RULE_pathArguments = 119;
languageParser.RULE_namedExpression = 120;
languageParser.RULE_arrowedExpression = 121;
languageParser.RULE_cardinalityAndFilter = 122;
languageParser.RULE_optionalCardinality = 123;
languageParser.RULE_optionalWhereForFilter = 124;
languageParser.RULE_selectItemInline = 125;
languageParser.RULE_value = 126;
languageParser.RULE_namedValue = 127;
languageParser.RULE_arrayValue = 128;
languageParser.RULE_namedValueInArray = 129;
languageParser.RULE_literalValue = 130;
languageParser.RULE_simplePath = 131;
languageParser.RULE_identNoKeyword = 132;
languageParser.RULE_ident = 133;

function StartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_start;
    this.source = { kind: 'source' }
    this._sync = 'recover'
    return this;
}

StartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartContext.prototype.constructor = StartContext;

StartContext.prototype.EOF = function() {
    return this.getToken(languageParser.EOF, 0);
};

StartContext.prototype.usingDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UsingDeclarationContext);
    } else {
        return this.getTypedRuleContext(UsingDeclarationContext,i);
    }
};

StartContext.prototype.namespaceDeclaration = function() {
    return this.getTypedRuleContext(NamespaceDeclarationContext,0);
};

StartContext.prototype.artifactDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArtifactDefContext);
    } else {
        return this.getTypedRuleContext(ArtifactDefContext,i);
    }
};




languageParser.StartContext = StartContext;

languageParser.prototype.start = function() {

    var localctx = new StartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, languageParser.RULE_start);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.USING) {
            this.state = 268;
            this.usingDeclaration(localctx.source);
            this.state = 273;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 290;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.NAMESPACE:
        	this.state = 274;
        	this.namespaceDeclaration(localctx.source);
        	this.state = 279;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.DEFINE - 61)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (languageParser.ENTITY - 101)) | (1 << (languageParser.EVENT - 101)) | (1 << (languageParser.EXTEND - 101)) | (1 << (languageParser.FUNCTION - 101)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VIEW - 189)))) !== 0)) {
        	    this.state = 277;
        	    this._errHandler.sync(this);
        	    switch(this._input.LA(1)) {
        	    case languageParser.USING:
        	        this.state = 275;
        	        this.usingDeclaration(localctx.source);
        	        break;
        	    case languageParser.T__9:
        	    case languageParser.ABSTRACT:
        	    case languageParser.ACTION:
        	    case languageParser.ANNOTATE:
        	    case languageParser.ANNOTATION:
        	    case languageParser.ASPECT:
        	    case languageParser.CONST:
        	    case languageParser.CONTEXT:
        	    case languageParser.DEFINE:
        	    case languageParser.ENTITY:
        	    case languageParser.EVENT:
        	    case languageParser.EXTEND:
        	    case languageParser.FUNCTION:
        	    case languageParser.SERVICE:
        	    case languageParser.TABLE:
        	    case languageParser.TEMPORARY:
        	    case languageParser.TYPE:
        	    case languageParser.VIEW:
        	        this.state = 276;
        	        this.artifactDef(localctx.source);
        	        break;
        	    default:
        	        throw new antlr4.error.NoViableAltException(this);
        	    }
        	    this.state = 281;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	break;
        case languageParser.T__9:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ASPECT:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.DEFINE:
        case languageParser.ENTITY:
        case languageParser.EVENT:
        case languageParser.EXTEND:
        case languageParser.FUNCTION:
        case languageParser.SERVICE:
        case languageParser.TABLE:
        case languageParser.TEMPORARY:
        case languageParser.TYPE:
        case languageParser.VIEW:
        	this.state = 282;
        	this.artifactDef(localctx.source);
        	this.state = 287;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.DEFINE - 61)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (languageParser.ENTITY - 101)) | (1 << (languageParser.EVENT - 101)) | (1 << (languageParser.EXTEND - 101)) | (1 << (languageParser.FUNCTION - 101)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VIEW - 189)))) !== 0)) {
        	    this.state = 285;
        	    this._errHandler.sync(this);
        	    switch(this._input.LA(1)) {
        	    case languageParser.USING:
        	        this.state = 283;
        	        this.usingDeclaration(localctx.source);
        	        break;
        	    case languageParser.T__9:
        	    case languageParser.ABSTRACT:
        	    case languageParser.ACTION:
        	    case languageParser.ANNOTATE:
        	    case languageParser.ANNOTATION:
        	    case languageParser.ASPECT:
        	    case languageParser.CONST:
        	    case languageParser.CONTEXT:
        	    case languageParser.DEFINE:
        	    case languageParser.ENTITY:
        	    case languageParser.EVENT:
        	    case languageParser.EXTEND:
        	    case languageParser.FUNCTION:
        	    case languageParser.SERVICE:
        	    case languageParser.TABLE:
        	    case languageParser.TEMPORARY:
        	    case languageParser.TYPE:
        	    case languageParser.VIEW:
        	        this.state = 284;
        	        this.artifactDef(localctx.source);
        	        break;
        	    default:
        	        throw new antlr4.error.NoViableAltException(this);
        	    }
        	    this.state = 289;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	break;
        case languageParser.EOF:
        	break;
        default:
        	break;
        }
        this.state = 292;
        this.match(languageParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryEOFContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryEOF;
    this.query = null
    this.q = null; // QueryExpressionContext
    return this;
}

QueryEOFContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryEOFContext.prototype.constructor = QueryEOFContext;

QueryEOFContext.prototype.EOF = function() {
    return this.getToken(languageParser.EOF, 0);
};

QueryEOFContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};




languageParser.QueryEOFContext = QueryEOFContext;

languageParser.prototype.queryEOF = function() {

    var localctx = new QueryEOFContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, languageParser.RULE_queryEOF);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 294;
        localctx.q = this.queryExpression();
         localctx.query =  localctx.q.query 
        this.state = 296;
        this.match(languageParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionEOFContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_conditionEOF;
    this.cond = null
    this.c = null; // ConditionContext
    return this;
}

ConditionEOFContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionEOFContext.prototype.constructor = ConditionEOFContext;

ConditionEOFContext.prototype.EOF = function() {
    return this.getToken(languageParser.EOF, 0);
};

ConditionEOFContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};




languageParser.ConditionEOFContext = ConditionEOFContext;

languageParser.prototype.conditionEOF = function() {

    var localctx = new ConditionEOFContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, languageParser.RULE_conditionEOF);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 298;
        localctx.c = this.condition();
         localctx.cond =  localctx.c.cond 
        this.state = 300;
        this.match(languageParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespaceDeclarationContext(parser, parent, invokingState, source) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namespaceDeclaration;
    this.source = null
    this.decl = {}
    this.source = source || null;
    return this;
}

NamespaceDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceDeclarationContext.prototype.constructor = NamespaceDeclarationContext;

NamespaceDeclarationContext.prototype.NAMESPACE = function() {
    return this.getToken(languageParser.NAMESPACE, 0);
};

NamespaceDeclarationContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};




languageParser.NamespaceDeclarationContext = NamespaceDeclarationContext;

languageParser.prototype.namespaceDeclaration = function(source) {

    var localctx = new NamespaceDeclarationContext(this, this._ctx, this.state, source);
    this.enterRule(localctx, 6, languageParser.RULE_namespaceDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 302;
        this.match(languageParser.NAMESPACE);
        this.state = 303;
        this.simplePath( localctx.decl, 'Namespace' );
        this.state = 304;
        this.match(languageParser.T__0);
         if (this.options.hanaFlavor) { localctx.decl.dcPath = localctx.decl.path; delete localctx.decl.path; } 
        this._ctx.stop = this._input.LT(-1);
         localctx.source.namespace = this.attachLocation(localctx.decl); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingDeclarationContext(parser, parent, invokingState, source) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_usingDeclaration;
    this.source = null
    this.decl = null
    this.str = null; // Token
    this.path = null; // ExternalPathContext
    this.name = null; // IdentContext
    this.source = source || null;
    return this;
}

UsingDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingDeclarationContext.prototype.constructor = UsingDeclarationContext;

UsingDeclarationContext.prototype.USING = function() {
    return this.getToken(languageParser.USING, 0);
};

UsingDeclarationContext.prototype.FROM = function() {
    return this.getToken(languageParser.FROM, 0);
};

UsingDeclarationContext.prototype.innerUsing = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InnerUsingContext);
    } else {
        return this.getTypedRuleContext(InnerUsingContext,i);
    }
};

UsingDeclarationContext.prototype.String = function() {
    return this.getToken(languageParser.String, 0);
};

UsingDeclarationContext.prototype.externalPath = function() {
    return this.getTypedRuleContext(ExternalPathContext,0);
};

UsingDeclarationContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

UsingDeclarationContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.UsingDeclarationContext = UsingDeclarationContext;

languageParser.prototype.usingDeclaration = function(source) {

    var localctx = new UsingDeclarationContext(this, this._ctx, this.state, source);
    this.enterRule(localctx, 8, languageParser.RULE_usingDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 307;
        this.match(languageParser.USING);
        this.state = 341;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.FROM:
            this.state = 308;
            this.match(languageParser.FROM);
            this.state = 309;
            localctx.str = this.match(languageParser.String);

                     if (!localctx.source.dependencies) localctx.source.dependencies = [];
                     localctx.source.dependencies.push( this.quotedLiteral( localctx.str, 'string' ) );
                  
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.state = 311;
            localctx.path = this.externalPath();
             localctx.decl =  this.addItem( localctx.source, 'usings', 'using', [], { extern: localctx.path.extern } ) 
            this.state = 317;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.AS) {
                this.state = 313;
                this.match(languageParser.AS);
                this.state = 314;
                localctx.name = this.ident('Using');
                 localctx.decl.name = localctx.name.id; 
            }

            this.state = 322;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.FROM) {
                this.state = 319;
                this.match(languageParser.FROM);
                this.state = 320;
                localctx.str = this.match(languageParser.String);

                          if (!localctx.source.dependencies) localctx.source.dependencies = [];
                          localctx.source.dependencies.push( localctx.decl.fileDep = this.quotedLiteral( localctx.str, 'string' ) );
                        
            }

            break;
        case languageParser.T__1:
             localctx.decl =  this.addItem( localctx.source, 'usings', 'using', [] ) 
            this.state = 325;
            this.match(languageParser.T__1);
            this.state = 326;
            this.innerUsing( localctx.decl );
            this.state = 332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 327;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore('}')) break; 
                this.state = 329;
                this.innerUsing( localctx.decl );
                this.state = 334;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 335;
            this.match(languageParser.T__3);
            this.state = 339;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.FROM) {
                this.state = 336;
                this.match(languageParser.FROM);
                this.state = 337;
                localctx.str = this.match(languageParser.String);

                          if (!localctx.source.dependencies) localctx.source.dependencies = [];
                          localctx.source.dependencies.push( localctx.decl.fileDep = this.quotedLiteral( localctx.str, 'string' ) );
                        
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 343;
        this.match(languageParser.T__0);
        this._ctx.stop = this._input.LT(-1);
         if (localctx.decl) this.attachLocation(localctx.decl); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InnerUsingContext(parser, parent, invokingState, using) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_innerUsing;
    this.using = null
    this.decl = null
    this.path = null; // ExternalPathContext
    this.name = null; // IdentContext
    this.using = using || null;
    return this;
}

InnerUsingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InnerUsingContext.prototype.constructor = InnerUsingContext;

InnerUsingContext.prototype.externalPath = function() {
    return this.getTypedRuleContext(ExternalPathContext,0);
};

InnerUsingContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

InnerUsingContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.InnerUsingContext = InnerUsingContext;

languageParser.prototype.innerUsing = function(using) {

    var localctx = new InnerUsingContext(this, this._ctx, this.state, using);
    this.enterRule(localctx, 10, languageParser.RULE_innerUsing);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 345;
        localctx.path = this.externalPath();
         localctx.decl =  this.addItem( localctx.using, 'usings', 'using', null, { extern: localctx.path.extern } ) 
        this.state = 351;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.AS) {
            this.state = 347;
            this.match(languageParser.AS);
            this.state = 348;
            localctx.name = this.ident('Using');
             localctx.decl.name = localctx.name.id; 
        }

        this._ctx.stop = this._input.LT(-1);
         if (localctx.decl) this.attachLocation(localctx.decl); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExternalPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_externalPath;
    this.extern = {}
    return this;
}

ExternalPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExternalPathContext.prototype.constructor = ExternalPathContext;

ExternalPathContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};




languageParser.ExternalPathContext = ExternalPathContext;

languageParser.prototype.externalPath = function() {

    var localctx = new ExternalPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, languageParser.RULE_externalPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 353;
        this.simplePath( localctx.extern, 'global' );
        this.state = 357;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__4) {
            this.state = 354;
            this.match(languageParser.T__4);
             localctx.extern.dcPath = localctx.extern.path; delete localctx.extern.path; 
            this.state = 356;
            this.simplePath( localctx.extern, 'global' );
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationAssignment_1Context(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_1;
    this.annos = null
    this.assignment = { name: {} }
    this.variant = null; // IdentContext
    this.val = null; // ValueContext
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_1Context.prototype.constructor = AnnotationAssignment_1Context;

AnnotationAssignment_1Context.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AnnotationAssignment_1Context.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotationAssignment_1Context.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};




languageParser.AnnotationAssignment_1Context = AnnotationAssignment_1Context;

languageParser.prototype.annotationAssignment_1 = function(annos) {

    var localctx = new AnnotationAssignment_1Context(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 14, languageParser.RULE_annotationAssignment_1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 359;
        this.simplePath( localctx.assignment.name, 'anno' );
        this.state = 364;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__5) {
            this.state = 360;
            this.match(languageParser.T__5);
            this.state = 361;
            localctx.variant = this.ident('variant');
             localctx.assignment.name.variant = localctx.variant.id; 
        }

        this.state = 370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__6) {
            this.state = 366;
            this.match(languageParser.T__6);
            this.state = 367;
            localctx.val = this.value();
             localctx.assignment.value = localctx.val.val; 
        }

        this._ctx.stop = this._input.LT(-1);
         localctx.annos.push( this.attachLocation(localctx.assignment) ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationAssignment_parenContext(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_paren;
    this.annos = null
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_parenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_parenContext.prototype.constructor = AnnotationAssignment_parenContext;

AnnotationAssignment_parenContext.prototype.annotationAssignment_1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_1Context,i);
    }
};




languageParser.AnnotationAssignment_parenContext = AnnotationAssignment_parenContext;

languageParser.prototype.annotationAssignment_paren = function(annos) {

    var localctx = new AnnotationAssignment_parenContext(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 16, languageParser.RULE_annotationAssignment_paren);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 372;
        this.match(languageParser.T__7);

              if (this.isStraightBefore(')')) {
                this.message( 'syntax-anno-useless',
                              this.tokenLocation( this._input.LT(-2), this.getCurrentToken() ),
                              { code: '@()' },
                              'Warning', 'Ignored useless $(CODE)' );
                this.matchWildcard();   // we know it is the ')' - we do not reach the final match
                return localctx;
              }
            
        this.state = 374;
        this.annotationAssignment_1( localctx.annos );
        this.state = 380;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 375;
            this.match(languageParser.T__2);
             if (this.isStraightBefore(')')) break; 
            this.state = 377;
            this.annotationAssignment_1( localctx.annos );
            this.state = 382;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 383;
        this.match(languageParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationAssignment_fixContext(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_fix;
    this.annos = null
    this.assignment = null
    this.variant = null; // IdentContext
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_fixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_fixContext.prototype.constructor = AnnotationAssignment_fixContext;

AnnotationAssignment_fixContext.prototype.annotationAssignment_paren = function() {
    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
};

AnnotationAssignment_fixContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AnnotationAssignment_fixContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.AnnotationAssignment_fixContext = AnnotationAssignment_fixContext;

languageParser.prototype.annotationAssignment_fix = function(annos) {

    var localctx = new AnnotationAssignment_fixContext(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 18, languageParser.RULE_annotationAssignment_fix);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 385;
        this.match(languageParser.T__9);
        this.state = 397;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__7:
            this.state = 386;
            this.annotationAssignment_paren( annos );
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
             localctx.assignment =  { name: {} } 
            this.state = 388;
            this.simplePath( localctx.assignment.name, 'anno' );
            this.state = 393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__5) {
                this.state = 389;
                this.match(languageParser.T__5);
                this.state = 390;
                localctx.variant = this.ident('variant');
                 localctx.assignment.name.variant = localctx.variant.id;
                          if (localctx.variant.id) localctx.assignment.name.location.end = localctx.variant.id.location.end; 
            }


                    var t = this.getCurrentToken();
                    if (t.text === ':')
                      this.message( 'syntax-anno-short', localctx.assignment.name.location,
                                    { code: '@(...)' },
                                    'Warning', 'Better use $(CODE) for annotation assignments here' );
                  
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         if (localctx.assignment) localctx.annos.push( this.attachLocation(localctx.assignment) ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationAssignment_ll1Context(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_ll1;
    this.annos = null
    this.assignment = null
    this.variant = null; // IdentContext
    this.val = null; // ValueContext
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_ll1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_ll1Context.prototype.constructor = AnnotationAssignment_ll1Context;

AnnotationAssignment_ll1Context.prototype.annotationAssignment_paren = function() {
    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
};

AnnotationAssignment_ll1Context.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AnnotationAssignment_ll1Context.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotationAssignment_ll1Context.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};




languageParser.AnnotationAssignment_ll1Context = AnnotationAssignment_ll1Context;

languageParser.prototype.annotationAssignment_ll1 = function(annos) {

    var localctx = new AnnotationAssignment_ll1Context(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 20, languageParser.RULE_annotationAssignment_ll1);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 399;
        this.match(languageParser.T__9);
        this.state = 415;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__7:
            this.state = 400;
            this.annotationAssignment_paren( annos );
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
             localctx.assignment =  { name: {} } 
            this.state = 402;
            this.simplePath( localctx.assignment.name, 'anno' );
            this.state = 407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__5) {
                this.state = 403;
                this.match(languageParser.T__5);
                this.state = 404;
                localctx.variant = this.ident('variant');
                 localctx.assignment.name.variant = localctx.variant.id; 
            }

            this.state = 413;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__6) {
                this.state = 409;
                this.match(languageParser.T__6);
                this.state = 410;
                localctx.val = this.value();
                 localctx.assignment.value = localctx.val.val; 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         if (localctx.assignment) localctx.annos.push( this.attachLocation(localctx.assignment) ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationAssignment_atnContext(parser, parent, invokingState, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationAssignment_atn;
    this.annos = null
    this.assignment = null
    this.variant = null; // IdentContext
    this.val = null; // ValueContext
    this.annos = annos || null;
    return this;
}

AnnotationAssignment_atnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationAssignment_atnContext.prototype.constructor = AnnotationAssignment_atnContext;

AnnotationAssignment_atnContext.prototype.annotationAssignment_paren = function() {
    return this.getTypedRuleContext(AnnotationAssignment_parenContext,0);
};

AnnotationAssignment_atnContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AnnotationAssignment_atnContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotationAssignment_atnContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};




languageParser.AnnotationAssignment_atnContext = AnnotationAssignment_atnContext;

languageParser.prototype.annotationAssignment_atn = function(annos) {

    var localctx = new AnnotationAssignment_atnContext(this, this._ctx, this.state, annos);
    this.enterRule(localctx, 22, languageParser.RULE_annotationAssignment_atn);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 417;
        this.match(languageParser.T__9);
        this.state = 433;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__7:
            this.state = 418;
            this.annotationAssignment_paren( annos );
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
             localctx.assignment =  { name: {} } 
            this.state = 420;
            this.simplePath( localctx.assignment.name, 'anno' );
            this.state = 425;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
            if(la_===1) {
                this.state = 421;
                this.match(languageParser.T__5);
                this.state = 422;
                localctx.variant = this.ident('variant');
                 localctx.assignment.name.variant = localctx.variant.id; 

            }
            this.state = 431;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            if(la_===1) {
                this.state = 427;
                this.match(languageParser.T__6);
                this.state = 428;
                localctx.val = this.value();
                 localctx.assignment.value = localctx.val.val; 

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 2 */ if (localctx.assignment) localctx.annos.push( this.attachLocation(localctx.assignment) ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RequiredSemiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_requiredSemi;
    return this;
}

RequiredSemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequiredSemiContext.prototype.constructor = RequiredSemiContext;





languageParser.RequiredSemiContext = RequiredSemiContext;

languageParser.prototype.requiredSemi = function() {

    var localctx = new RequiredSemiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, languageParser.RULE_requiredSemi);
    try {
        this.state = 438;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__0:
            this.enterOuterAlt(localctx, 1);
            this.state = 435;
            this.match(languageParser.T__0);
            break;
        case languageParser.T__3:
            this.enterOuterAlt(localctx, 2);
             return localctx; 
            this.state = 437;
            this.match(languageParser.T__3);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionalSemiContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_optionalSemi;
    return this;
}

OptionalSemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalSemiContext.prototype.constructor = OptionalSemiContext;





languageParser.OptionalSemiContext = OptionalSemiContext;

languageParser.prototype.optionalSemi = function() {

    var localctx = new OptionalSemiContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, languageParser.RULE_optionalSemi);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         this.noAssignmentInSameLine(); 
        this.state = 442;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__0) {
            this.state = 441;
            this.match(languageParser.T__0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArtifactDefContext(parser, parent, invokingState, outer, defOnly) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_artifactDef;
    this.outer = null
    this.defOnly = false
    this.annos = []
    this.extend = null; // Token
    this.annotate = null; // Token
    this.outer = outer || null;
    this.defOnly = defOnly || null;
    return this;
}

ArtifactDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArtifactDefContext.prototype.constructor = ArtifactDefContext;

ArtifactDefContext.prototype.annotateArtifact = function() {
    return this.getTypedRuleContext(AnnotateArtifactContext,0);
};

ArtifactDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ArtifactDefContext.prototype.EXTEND = function() {
    return this.getToken(languageParser.EXTEND, 0);
};

ArtifactDefContext.prototype.ANNOTATE = function() {
    return this.getToken(languageParser.ANNOTATE, 0);
};

ArtifactDefContext.prototype.contextDef = function() {
    return this.getTypedRuleContext(ContextDefContext,0);
};

ArtifactDefContext.prototype.entityDef = function() {
    return this.getTypedRuleContext(EntityDefContext,0);
};

ArtifactDefContext.prototype.typeDef = function() {
    return this.getTypedRuleContext(TypeDefContext,0);
};

ArtifactDefContext.prototype.annotationDef = function() {
    return this.getTypedRuleContext(AnnotationDefContext,0);
};

ArtifactDefContext.prototype.constDef = function() {
    return this.getTypedRuleContext(ConstDefContext,0);
};

ArtifactDefContext.prototype.viewDef = function() {
    return this.getTypedRuleContext(ViewDefContext,0);
};

ArtifactDefContext.prototype.eventDef = function() {
    return this.getTypedRuleContext(EventDefContext,0);
};

ArtifactDefContext.prototype.actionFunctionMainDef = function() {
    return this.getTypedRuleContext(ActionFunctionMainDefContext,0);
};

ArtifactDefContext.prototype.extendContext = function() {
    return this.getTypedRuleContext(ExtendContextContext,0);
};

ArtifactDefContext.prototype.extendEntity = function() {
    return this.getTypedRuleContext(ExtendEntityContext,0);
};

ArtifactDefContext.prototype.extendProjection = function() {
    return this.getTypedRuleContext(ExtendProjectionContext,0);
};

ArtifactDefContext.prototype.extendType = function() {
    return this.getTypedRuleContext(ExtendTypeContext,0);
};

ArtifactDefContext.prototype.extendAnnotation = function() {
    return this.getTypedRuleContext(ExtendAnnotationContext,0);
};

ArtifactDefContext.prototype.extendConst = function() {
    return this.getTypedRuleContext(ExtendConstContext,0);
};

ArtifactDefContext.prototype.extendView = function() {
    return this.getTypedRuleContext(ExtendViewContext,0);
};

ArtifactDefContext.prototype.extendArtifact = function() {
    return this.getTypedRuleContext(ExtendArtifactContext,0);
};

ArtifactDefContext.prototype.DEFINE = function() {
    return this.getToken(languageParser.DEFINE, 0);
};




languageParser.ArtifactDefContext = ArtifactDefContext;

languageParser.prototype.artifactDef = function(outer, defOnly) {

    var localctx = new ArtifactDefContext(this, this._ctx, this.state, outer, defOnly);
    this.enterRule(localctx, 28, languageParser.RULE_artifactDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 447;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 444;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 449;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 478;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ANNOTATION:
        case languageParser.ASPECT:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.DEFINE:
        case languageParser.ENTITY:
        case languageParser.EVENT:
        case languageParser.FUNCTION:
        case languageParser.SERVICE:
        case languageParser.TABLE:
        case languageParser.TEMPORARY:
        case languageParser.TYPE:
        case languageParser.VIEW:
            this.state = 451;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.DEFINE) {
                this.state = 450;
                this.match(languageParser.DEFINE);
            }

            this.state = 461;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
            switch(la_) {
            case 1:
                this.state = 453;
                this.contextDef( localctx.outer, this.startLocation(), localctx.annos, defOnly );
                break;

            case 2:
                this.state = 454;
                this.entityDef( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 3:
                this.state = 455;
                this.typeDef( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 4:
                this.state = 456;
                this.annotationDef( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 5:
                this.state = 457;
                this.constDef( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 6:
                this.state = 458;
                this.viewDef( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 7:
                this.state = 459;
                this.eventDef( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 8:
                this.state = 460;
                this.actionFunctionMainDef( localctx.outer, this.startLocation(), localctx.annos );
                break;

            }
            break;
        case languageParser.EXTEND:
            this.state = 463;
            localctx.extend = this.match(languageParser.EXTEND);
             if (defOnly) // this is a syntax restriction which is ensured in CSN in
                                 // another way
                      this.message( 'syntax-extend-context', localctx.extend,
                                    { code: 'EXTEND artifact', kind: defOnly },
                                    'Error', 'No $(CODE) within $(KIND) extensions' ); 
            this.state = 473;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
            switch(la_) {
            case 1:
                this.state = 465;
                this.extendContext( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 2:
                this.state = 466;
                this.extendEntity( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 3:
                this.state = 467;
                this.extendProjection( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 4:
                this.state = 468;
                this.extendType( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 5:
                this.state = 469;
                this.extendAnnotation( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 6:
                this.state = 470;
                this.extendConst( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 7:
                this.state = 471;
                this.extendView( localctx.outer, this.startLocation(), localctx.annos );
                break;

            case 8:
                this.state = 472;
                this.extendArtifact( localctx.outer, this.startLocation(), localctx.annos );
                break;

            }
            break;
        case languageParser.ANNOTATE:
            this.state = 475;
            localctx.annotate = this.match(languageParser.ANNOTATE);
             if (defOnly) // this is a syntax restriction which is ensured in CSN in
                                 // another way
                      this.message( 'syntax-extend-context', localctx.annotate,
                                    { code: 'ANNOTATE artifact', kind: defOnly },
                                    'Error', 'No $(CODE) within $(KIND) extensions' ); 
            this.state = 477;
            this.annotateArtifact( localctx.outer, this.startLocation(), localctx.annos );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 2 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContextDefContext(parser, parent, invokingState, outer, loc, annos, defOnly) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_contextDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.defOnly = false
    this.art = null
    this.name = {}
    this.abs = null; // Token
    this.service = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    this.defOnly = defOnly || null;
    return this;
}

ContextDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContextDefContext.prototype.constructor = ContextDefContext;

ContextDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ContextDefContext.prototype.CONTEXT = function() {
    return this.getToken(languageParser.CONTEXT, 0);
};

ContextDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ContextDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ContextDefContext.prototype.SERVICE = function() {
    return this.getToken(languageParser.SERVICE, 0);
};

ContextDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ContextDefContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

ContextDefContext.prototype.artifactDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArtifactDefContext);
    } else {
        return this.getTypedRuleContext(ArtifactDefContext,i);
    }
};

ContextDefContext.prototype.ABSTRACT = function() {
    return this.getToken(languageParser.ABSTRACT, 0);
};




languageParser.ContextDefContext = ContextDefContext;

languageParser.prototype.contextDef = function(outer, loc, annos, defOnly) {

    var localctx = new ContextDefContext(this, this._ctx, this.state, outer, loc, annos, defOnly);
    this.enterRule(localctx, 30, languageParser.RULE_contextDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 485;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.CONTEXT:
            this.state = 480;
            this.match(languageParser.CONTEXT);
            break;
        case languageParser.ABSTRACT:
        case languageParser.SERVICE:
            this.state = 482;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ABSTRACT) {
                this.state = 481;
                localctx.abs = this.match(languageParser.ABSTRACT);
            }

            this.state = 484;
            localctx.service = this.match(languageParser.SERVICE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 487;
        this.simplePath( localctx.name, localctx.service ? 'Service' : 'Context' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', localctx.service ? 'service' : 'context', localctx.name, localctx.annos,
                                  { abstract: localctx.abs }, localctx.loc ) 
        this.state = 492;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 489;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 494;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 505;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__6) {
            this.state = 495;
            this.match(languageParser.T__6);
            this.state = 496;
            this.includeRef( localctx.art );
            this.state = 502;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 497;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore('{')) break; 
                this.state = 499;
                this.includeRef( localctx.art );
                this.state = 504;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 517;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 507;
            this.match(languageParser.T__1);
            this.state = 511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.DEFINE - 61)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (languageParser.ENTITY - 101)) | (1 << (languageParser.EVENT - 101)) | (1 << (languageParser.EXTEND - 101)) | (1 << (languageParser.FUNCTION - 101)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.VIEW - 189)))) !== 0)) {
                this.state = 508;
                this.artifactDef( localctx.art, defOnly );
                this.state = 513;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 514;
            this.match(languageParser.T__3);
            this.state = 515;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 516;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendContextContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendContext;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.service = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendContextContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendContextContext.prototype.constructor = ExtendContextContext;

ExtendContextContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendContextContext.prototype.CONTEXT = function() {
    return this.getToken(languageParser.CONTEXT, 0);
};

ExtendContextContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendContextContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendContextContext.prototype.SERVICE = function() {
    return this.getToken(languageParser.SERVICE, 0);
};

ExtendContextContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendContextContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ExtendContextContext.prototype.artifactDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArtifactDefContext);
    } else {
        return this.getTypedRuleContext(ArtifactDefContext,i);
    }
};




languageParser.ExtendContextContext = ExtendContextContext;

languageParser.prototype.extendContext = function(outer, loc, annos) {

    var localctx = new ExtendContextContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 32, languageParser.RULE_extendContext);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 521;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.CONTEXT:
            this.state = 519;
            this.match(languageParser.CONTEXT);
            break;
        case languageParser.SERVICE:
            this.state = 520;
            localctx.service = this.match(languageParser.SERVICE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 523;
        this.simplePath( localctx.name, localctx.service ? 'Service' : 'Context' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: localctx.service ? 'service' : 'context' },
                                   localctx.loc )  
        this.state = 527;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 525;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
        }

        this.state = 532;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 529;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 534;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 545;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 535;
            this.match(languageParser.T__1);
            this.state = 539;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.DEFINE - 61)))) !== 0) || ((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (languageParser.ENTITY - 101)) | (1 << (languageParser.EVENT - 101)) | (1 << (languageParser.EXTEND - 101)) | (1 << (languageParser.FUNCTION - 101)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.VIEW - 189)))) !== 0)) {
                this.state = 536;
                this.artifactDef( localctx.art, localctx.service ? 'SERVICE' : 'CONTEXT' );
                this.state = 541;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 542;
            this.match(languageParser.T__3);
            this.state = 543;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 544;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EntityDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_entityDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.tmp = null; // Token
    this.abs = null; // Token
    this.qe = null; // QueryExpressionContext
    this.qp = null; // ProjectionSpecContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

EntityDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityDefContext.prototype.constructor = EntityDefContext;

EntityDefContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

EntityDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

EntityDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

EntityDefContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

EntityDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

EntityDefContext.prototype.entityParameters = function() {
    return this.getTypedRuleContext(EntityParametersContext,0);
};

EntityDefContext.prototype.TEMPORARY = function() {
    return this.getToken(languageParser.TEMPORARY, 0);
};

EntityDefContext.prototype.ABSTRACT = function() {
    return this.getToken(languageParser.ABSTRACT, 0);
};

EntityDefContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

EntityDefContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

EntityDefContext.prototype.technicalConfiguration = function() {
    return this.getTypedRuleContext(TechnicalConfigurationContext,0);
};

EntityDefContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

EntityDefContext.prototype.projectionSpec = function() {
    return this.getTypedRuleContext(ProjectionSpecContext,0);
};

EntityDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

EntityDefContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};

EntityDefContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};




languageParser.EntityDefContext = EntityDefContext;

languageParser.prototype.entityDef = function(outer, loc, annos) {

    var localctx = new EntityDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 34, languageParser.RULE_entityDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.TEMPORARY) {
            this.state = 547;
            localctx.tmp = this.match(languageParser.TEMPORARY);
        }

        this.state = 551;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.ABSTRACT) {
            this.state = 550;
            localctx.abs = this.match(languageParser.ABSTRACT);
        }

        this.state = 553;
        this.match(languageParser.ENTITY);
        this.state = 554;
        this.simplePath( localctx.name, 'Entity' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'entity', localctx.name, localctx.annos,
                                  { abstract: localctx.abs }, localctx.loc )
              this.hanaFlavorOnly( localctx.tmp ); 
        this.state = 559;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 556;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 561;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 563;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7) {
            this.state = 562;
            this.entityParameters( localctx.art );
        }

        this.state = 635;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
        case languageParser.T__6:
            this.state = 575;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__6) {
                this.state = 565;
                this.match(languageParser.T__6);
                this.state = 566;
                this.includeRef( localctx.art );
                this.state = 572;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 567;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore('{')) break; 
                    this.state = 569;
                    this.includeRef( localctx.art );
                    this.state = 574;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 577;
            this.match(languageParser.T__1);
             localctx.art.elements = Object.create(null); 
            this.state = 584;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__9 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AFTER - 48)) | (1 << (languageParser.ALWAYS - 48)) | (1 << (languageParser.ANALYSIS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.ASYNC - 48)) | (1 << (languageParser.ASYNCHRONOUS - 48)) | (1 << (languageParser.AUTO - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.CACHE - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.COLUMN - 80)) | (1 << (languageParser.COLUMNS - 80)) | (1 << (languageParser.COMPOSITION - 80)) | (1 << (languageParser.CONFIGURATION - 80)) | (1 << (languageParser.CONST - 80)) | (1 << (languageParser.CONTEXT - 80)) | (1 << (languageParser.CROSS - 80)) | (1 << (languageParser.CURRENT - 80)) | (1 << (languageParser.CYCLE - 80)) | (1 << (languageParser.DAY - 80)) | (1 << (languageParser.DEFAULT - 80)) | (1 << (languageParser.DEFINE - 80)) | (1 << (languageParser.DEPENDS - 80)) | (1 << (languageParser.DESC - 80)) | (1 << (languageParser.DETECTION - 80)) | (1 << (languageParser.DISABLED - 80)) | (1 << (languageParser.DOCUMENTS - 80)) | (1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.ENABLED - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.EVERY - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXISTING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.EXTENDED - 80)) | (1 << (languageParser.FAST - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.FIRST - 112)) | (1 << (languageParser.FLUSH - 112)) | (1 << (languageParser.FULL - 112)) | (1 << (languageParser.FULLTEXT - 112)) | (1 << (languageParser.FUNCTION - 112)) | (1 << (languageParser.FUZZY - 112)) | (1 << (languageParser.GENERATED - 112)) | (1 << (languageParser.GETNUMSERVERS - 112)) | (1 << (languageParser.GROUP - 112)) | (1 << (languageParser.HANA - 112)) | (1 << (languageParser.HASH - 112)) | (1 << (languageParser.HAVING - 112)) | (1 << (languageParser.HOUR - 112)) | (1 << (languageParser.IDENTITY - 112)) | (1 << (languageParser.INCREMENT - 112)) | (1 << (languageParser.INDEX - 112)) | (1 << (languageParser.INNER - 112)) | (1 << (languageParser.INTERSECT - 112)) | (1 << (languageParser.INTO - 112)) | (1 << (languageParser.IS - 112)) | (1 << (languageParser.JOIN - 112)) | (1 << (languageParser.KEEPING - 112)) | (1 << (languageParser.LANGUAGE - 112)) | (1 << (languageParser.LAST - 112)) | (1 << (languageParser.LAYOUT - 112)) | (1 << (languageParser.LEADING - 112)) | (1 << (languageParser.LEFT - 112)) | (1 << (languageParser.LIKE - 112)) | (1 << (languageParser.LIMIT - 112)) | (1 << (languageParser.LOCALIZED - 112)) | (1 << (languageParser.MANY - 112)) | (1 << (languageParser.MASKED - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (languageParser.MAXVALUE - 144)) | (1 << (languageParser.MERGE - 144)) | (1 << (languageParser.MIGRATION - 144)) | (1 << (languageParser.MINING - 144)) | (1 << (languageParser.MINUS - 144)) | (1 << (languageParser.MINUTE - 144)) | (1 << (languageParser.MINUTES - 144)) | (1 << (languageParser.MINVALUE - 144)) | (1 << (languageParser.MIME - 144)) | (1 << (languageParser.MIXIN - 144)) | (1 << (languageParser.MODE - 144)) | (1 << (languageParser.MONTH - 144)) | (1 << (languageParser.NAME - 144)) | (1 << (languageParser.NAMESPACE - 144)) | (1 << (languageParser.NO - 144)) | (1 << (languageParser.NULLS - 144)) | (1 << (languageParser.OFF - 144)) | (1 << (languageParser.OFFSET - 144)) | (1 << (languageParser.ONE - 144)) | (1 << (languageParser.ONLY - 144)) | (1 << (languageParser.OR - 144)) | (1 << (languageParser.ORDER - 144)) | (1 << (languageParser.OTHERS - 144)) | (1 << (languageParser.OUTER - 144)) | (1 << (languageParser.OVERLAY - 144)) | (1 << (languageParser.QUEUE - 144)) | (1 << (languageParser.PARAMETERS - 144)) | (1 << (languageParser.PARTITION - 144)) | (1 << (languageParser.PARTITIONING - 144)) | (1 << (languageParser.PARTITIONS - 144)) | (1 << (languageParser.PHRASE - 144)) | (1 << (languageParser.PREPROCESS - 144)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (languageParser.PRIORITY - 176)) | (1 << (languageParser.PROJECTION - 176)) | (1 << (languageParser.RANGE - 176)) | (1 << (languageParser.RATIO - 176)) | (1 << (languageParser.REDIRECTED - 176)) | (1 << (languageParser.RESET - 176)) | (1 << (languageParser.RETURNS - 176)) | (1 << (languageParser.RIGHT - 176)) | (1 << (languageParser.ROUNDROBIN - 176)) | (1 << (languageParser.ROW - 176)) | (1 << (languageParser.SEARCH - 176)) | (1 << (languageParser.SECOND - 176)) | (1 << (languageParser.SEPARATORS - 176)) | (1 << (languageParser.SERVICE - 176)) | (1 << (languageParser.START - 176)) | (1 << (languageParser.STORAGE - 176)) | (1 << (languageParser.STORE - 176)) | (1 << (languageParser.SUBTYPE - 176)) | (1 << (languageParser.SYNC - 176)) | (1 << (languageParser.SYNCHRONOUS - 176)) | (1 << (languageParser.TABLE - 176)) | (1 << (languageParser.TECHNICAL - 176)) | (1 << (languageParser.TEMPORARY - 176)) | (1 << (languageParser.TEXT - 176)) | (1 << (languageParser.THEN - 176)) | (1 << (languageParser.TOKEN - 176)) | (1 << (languageParser.TOP - 176)) | (1 << (languageParser.TRAILING - 176)) | (1 << (languageParser.TO - 176)) | (1 << (languageParser.TYPE - 176)) | (1 << (languageParser.UNION - 176)) | (1 << (languageParser.UNIQUE - 176)))) !== 0) || ((((_la - 208)) & ~0x1f) == 0 && ((1 << (_la - 208)) & ((1 << (languageParser.UNLOAD - 208)) | (1 << (languageParser.USING - 208)) | (1 << (languageParser.VALUE - 208)) | (1 << (languageParser.VALUES - 208)) | (1 << (languageParser.VIEW - 208)) | (1 << (languageParser.VIRTUAL - 208)) | (1 << (languageParser.YEAR - 208)) | (1 << (languageParser.Identifier - 208)))) !== 0)) {
                this.state = 580; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 579;
                    this.elementDef( localctx.art );
                    this.state = 582; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===languageParser.T__9 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AFTER - 48)) | (1 << (languageParser.ALWAYS - 48)) | (1 << (languageParser.ANALYSIS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.ASYNC - 48)) | (1 << (languageParser.ASYNCHRONOUS - 48)) | (1 << (languageParser.AUTO - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.CACHE - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.COLUMN - 80)) | (1 << (languageParser.COLUMNS - 80)) | (1 << (languageParser.COMPOSITION - 80)) | (1 << (languageParser.CONFIGURATION - 80)) | (1 << (languageParser.CONST - 80)) | (1 << (languageParser.CONTEXT - 80)) | (1 << (languageParser.CROSS - 80)) | (1 << (languageParser.CURRENT - 80)) | (1 << (languageParser.CYCLE - 80)) | (1 << (languageParser.DAY - 80)) | (1 << (languageParser.DEFAULT - 80)) | (1 << (languageParser.DEFINE - 80)) | (1 << (languageParser.DEPENDS - 80)) | (1 << (languageParser.DESC - 80)) | (1 << (languageParser.DETECTION - 80)) | (1 << (languageParser.DISABLED - 80)) | (1 << (languageParser.DOCUMENTS - 80)) | (1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.ENABLED - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.EVERY - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXISTING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.EXTENDED - 80)) | (1 << (languageParser.FAST - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.FIRST - 112)) | (1 << (languageParser.FLUSH - 112)) | (1 << (languageParser.FULL - 112)) | (1 << (languageParser.FULLTEXT - 112)) | (1 << (languageParser.FUNCTION - 112)) | (1 << (languageParser.FUZZY - 112)) | (1 << (languageParser.GENERATED - 112)) | (1 << (languageParser.GETNUMSERVERS - 112)) | (1 << (languageParser.GROUP - 112)) | (1 << (languageParser.HANA - 112)) | (1 << (languageParser.HASH - 112)) | (1 << (languageParser.HAVING - 112)) | (1 << (languageParser.HOUR - 112)) | (1 << (languageParser.IDENTITY - 112)) | (1 << (languageParser.INCREMENT - 112)) | (1 << (languageParser.INDEX - 112)) | (1 << (languageParser.INNER - 112)) | (1 << (languageParser.INTERSECT - 112)) | (1 << (languageParser.INTO - 112)) | (1 << (languageParser.IS - 112)) | (1 << (languageParser.JOIN - 112)) | (1 << (languageParser.KEEPING - 112)) | (1 << (languageParser.LANGUAGE - 112)) | (1 << (languageParser.LAST - 112)) | (1 << (languageParser.LAYOUT - 112)) | (1 << (languageParser.LEADING - 112)) | (1 << (languageParser.LEFT - 112)) | (1 << (languageParser.LIKE - 112)) | (1 << (languageParser.LIMIT - 112)) | (1 << (languageParser.LOCALIZED - 112)) | (1 << (languageParser.MANY - 112)) | (1 << (languageParser.MASKED - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (languageParser.MAXVALUE - 144)) | (1 << (languageParser.MERGE - 144)) | (1 << (languageParser.MIGRATION - 144)) | (1 << (languageParser.MINING - 144)) | (1 << (languageParser.MINUS - 144)) | (1 << (languageParser.MINUTE - 144)) | (1 << (languageParser.MINUTES - 144)) | (1 << (languageParser.MINVALUE - 144)) | (1 << (languageParser.MIME - 144)) | (1 << (languageParser.MIXIN - 144)) | (1 << (languageParser.MODE - 144)) | (1 << (languageParser.MONTH - 144)) | (1 << (languageParser.NAME - 144)) | (1 << (languageParser.NAMESPACE - 144)) | (1 << (languageParser.NO - 144)) | (1 << (languageParser.NULLS - 144)) | (1 << (languageParser.OFF - 144)) | (1 << (languageParser.OFFSET - 144)) | (1 << (languageParser.ONE - 144)) | (1 << (languageParser.ONLY - 144)) | (1 << (languageParser.OR - 144)) | (1 << (languageParser.ORDER - 144)) | (1 << (languageParser.OTHERS - 144)) | (1 << (languageParser.OUTER - 144)) | (1 << (languageParser.OVERLAY - 144)) | (1 << (languageParser.QUEUE - 144)) | (1 << (languageParser.PARAMETERS - 144)) | (1 << (languageParser.PARTITION - 144)) | (1 << (languageParser.PARTITIONING - 144)) | (1 << (languageParser.PARTITIONS - 144)) | (1 << (languageParser.PHRASE - 144)) | (1 << (languageParser.PREPROCESS - 144)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (languageParser.PRIORITY - 176)) | (1 << (languageParser.PROJECTION - 176)) | (1 << (languageParser.RANGE - 176)) | (1 << (languageParser.RATIO - 176)) | (1 << (languageParser.REDIRECTED - 176)) | (1 << (languageParser.RESET - 176)) | (1 << (languageParser.RETURNS - 176)) | (1 << (languageParser.RIGHT - 176)) | (1 << (languageParser.ROUNDROBIN - 176)) | (1 << (languageParser.ROW - 176)) | (1 << (languageParser.SEARCH - 176)) | (1 << (languageParser.SECOND - 176)) | (1 << (languageParser.SEPARATORS - 176)) | (1 << (languageParser.SERVICE - 176)) | (1 << (languageParser.START - 176)) | (1 << (languageParser.STORAGE - 176)) | (1 << (languageParser.STORE - 176)) | (1 << (languageParser.SUBTYPE - 176)) | (1 << (languageParser.SYNC - 176)) | (1 << (languageParser.SYNCHRONOUS - 176)) | (1 << (languageParser.TABLE - 176)) | (1 << (languageParser.TECHNICAL - 176)) | (1 << (languageParser.TEMPORARY - 176)) | (1 << (languageParser.TEXT - 176)) | (1 << (languageParser.THEN - 176)) | (1 << (languageParser.TOKEN - 176)) | (1 << (languageParser.TOP - 176)) | (1 << (languageParser.TRAILING - 176)) | (1 << (languageParser.TO - 176)) | (1 << (languageParser.TYPE - 176)) | (1 << (languageParser.UNION - 176)) | (1 << (languageParser.UNIQUE - 176)))) !== 0) || ((((_la - 208)) & ~0x1f) == 0 && ((1 << (_la - 208)) & ((1 << (languageParser.UNLOAD - 208)) | (1 << (languageParser.USING - 208)) | (1 << (languageParser.VALUE - 208)) | (1 << (languageParser.VALUES - 208)) | (1 << (languageParser.VIEW - 208)) | (1 << (languageParser.VIRTUAL - 208)) | (1 << (languageParser.YEAR - 208)) | (1 << (languageParser.Identifier - 208)))) !== 0));
            }

            this.state = 586;
            this.match(languageParser.T__3);
            this.state = 596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 587;
                this.match(languageParser.ACTIONS);
                this.state = 588;
                this.match(languageParser.T__1);
                this.state = 590; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 589;
                    this.actionFunctionDef( localctx.art );
                    this.state = 592; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===languageParser.T__9 || _la===languageParser.ACTION || _la===languageParser.FUNCTION);
                this.state = 594;
                this.match(languageParser.T__3);
            }

            this.state = 599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.CONFIGURATION || _la===languageParser.HANA || _la===languageParser.TECHNICAL) {
                this.state = 598;
                this.technicalConfiguration( localctx.art );
            }

            this.state = 601;
            this.optionalSemi();
            break;
        case languageParser.AS:
            this.state = 602;
            this.match(languageParser.AS);
            this.state = 633;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__7:
            case languageParser.SELECT:
                this.state = 603;
                localctx.qe = this.queryExpression();
                 localctx.art.query = localctx.qe.query; localctx.art.kind = 'view'; localctx.art['$'+'syntax'] = 'entity' 
                this.state = 616;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ACTIONS:
                    this.state = 605;
                    this.match(languageParser.ACTIONS);
                    this.state = 606;
                    this.match(languageParser.T__1);
                    this.state = 608; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 607;
                        this.actionFunctionDef( localctx.art );
                        this.state = 610; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===languageParser.T__9 || _la===languageParser.ACTION || _la===languageParser.FUNCTION);
                    this.state = 612;
                    this.match(languageParser.T__3);
                    this.state = 613;
                    this.optionalSemi();
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                    this.state = 615;
                    this.requiredSemi();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case languageParser.PROJECTION:
                this.state = 618;
                localctx.qp = this.projectionSpec();
                 localctx.art.query = localctx.qp.query; localctx.art.projection = {}; localctx.art['$'+'syntax'] = 'projection' 
                this.state = 629;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ACTIONS) {
                    this.state = 620;
                    this.match(languageParser.ACTIONS);
                    this.state = 621;
                    this.match(languageParser.T__1);
                    this.state = 623; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 622;
                        this.actionFunctionDef( localctx.art );
                        this.state = 625; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===languageParser.T__9 || _la===languageParser.ACTION || _la===languageParser.FUNCTION);
                    this.state = 627;
                    this.match(languageParser.T__3);
                }

                this.state = 631;
                this.optionalSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProjectionSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_projectionSpec;
    this.query = null
    this.src = {}
    this.proj = null; // Token
    this.aliasName = null; // IdentContext
    this.star = null; // Token
    return this;
}

ProjectionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionSpecContext.prototype.constructor = ProjectionSpecContext;

ProjectionSpecContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

ProjectionSpecContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ProjectionSpecContext.prototype.PROJECTION = function() {
    return this.getToken(languageParser.PROJECTION, 0);
};

ProjectionSpecContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ProjectionSpecContext.prototype.EXCLUDING = function() {
    return this.getToken(languageParser.EXCLUDING, 0);
};

ProjectionSpecContext.prototype.projectionExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectionExclusionContext);
    } else {
        return this.getTypedRuleContext(ProjectionExclusionContext,i);
    }
};

ProjectionSpecContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ProjectionSpecContext.prototype.projectionWithOptAlias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectionWithOptAliasContext);
    } else {
        return this.getTypedRuleContext(ProjectionWithOptAliasContext,i);
    }
};




languageParser.ProjectionSpecContext = ProjectionSpecContext;

languageParser.prototype.projectionSpec = function() {

    var localctx = new ProjectionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, languageParser.RULE_projectionSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 637;
        localctx.proj = this.match(languageParser.PROJECTION);
        this.state = 638;
        this.match(languageParser.ON);
         localctx.query =  { op: this.tokenLocation( localctx.proj, undefined, 'query' ), from: [ localctx.src ] } 
        this.state = 640;
        this.simplePath( localctx.src, 'artref' );
        this.state = 645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.AS) {
            this.state = 641;
            this.match(languageParser.AS);
            this.state = 642;
            localctx.aliasName = this.ident('FromAlias');
             localctx.src.name = localctx.aliasName.id 
        }

        this.state = 663;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__1) {
            this.state = 647;
            this.match(languageParser.T__1);
             localctx.query.columns = []; 
            this.state = 652;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__10:
                this.state = 649;
                localctx.star = this.match(languageParser.T__10);

                          localctx.query.columns = [ { location: this.tokenLocation(localctx.star), val: '*', literal: 'token' } ];
                        
                break;
            case languageParser.T__9:
            case languageParser.KEY:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AFTER:
            case languageParser.ALWAYS:
            case languageParser.ANALYSIS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.ASYNC:
            case languageParser.ASYNCHRONOUS:
            case languageParser.AUTO:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.CACHE:
            case languageParser.COLUMN:
            case languageParser.COLUMNS:
            case languageParser.COMPOSITION:
            case languageParser.CONFIGURATION:
            case languageParser.CONST:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.CURRENT:
            case languageParser.CYCLE:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DEPENDS:
            case languageParser.DESC:
            case languageParser.DETECTION:
            case languageParser.DISABLED:
            case languageParser.DOCUMENTS:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.ENABLED:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.EVERY:
            case languageParser.ESCAPE:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXISTING:
            case languageParser.EXTEND:
            case languageParser.EXTENDED:
            case languageParser.FAST:
            case languageParser.FIRST:
            case languageParser.FLUSH:
            case languageParser.FULL:
            case languageParser.FULLTEXT:
            case languageParser.FUNCTION:
            case languageParser.FUZZY:
            case languageParser.GENERATED:
            case languageParser.GETNUMSERVERS:
            case languageParser.GROUP:
            case languageParser.HANA:
            case languageParser.HASH:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.IDENTITY:
            case languageParser.INCREMENT:
            case languageParser.INDEX:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.KEEPING:
            case languageParser.LANGUAGE:
            case languageParser.LAST:
            case languageParser.LAYOUT:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MAXVALUE:
            case languageParser.MERGE:
            case languageParser.MIGRATION:
            case languageParser.MINING:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MINUTES:
            case languageParser.MINVALUE:
            case languageParser.MIME:
            case languageParser.MIXIN:
            case languageParser.MODE:
            case languageParser.MONTH:
            case languageParser.NAME:
            case languageParser.NAMESPACE:
            case languageParser.NO:
            case languageParser.NULLS:
            case languageParser.OFF:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.ONLY:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OTHERS:
            case languageParser.OUTER:
            case languageParser.OVERLAY:
            case languageParser.QUEUE:
            case languageParser.PARAMETERS:
            case languageParser.PARTITION:
            case languageParser.PARTITIONING:
            case languageParser.PARTITIONS:
            case languageParser.PHRASE:
            case languageParser.PREPROCESS:
            case languageParser.PRIORITY:
            case languageParser.PROJECTION:
            case languageParser.RANGE:
            case languageParser.RATIO:
            case languageParser.REDIRECTED:
            case languageParser.RESET:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.ROUNDROBIN:
            case languageParser.ROW:
            case languageParser.SEARCH:
            case languageParser.SECOND:
            case languageParser.SEPARATORS:
            case languageParser.SERVICE:
            case languageParser.START:
            case languageParser.STORAGE:
            case languageParser.STORE:
            case languageParser.SUBTYPE:
            case languageParser.SYNC:
            case languageParser.SYNCHRONOUS:
            case languageParser.TABLE:
            case languageParser.TECHNICAL:
            case languageParser.TEMPORARY:
            case languageParser.TEXT:
            case languageParser.THEN:
            case languageParser.TOKEN:
            case languageParser.TOP:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.UNIQUE:
            case languageParser.UNLOAD:
            case languageParser.USING:
            case languageParser.VALUE:
            case languageParser.VALUES:
            case languageParser.VIEW:
            case languageParser.VIRTUAL:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 651;
                this.projectionWithOptAlias( localctx.query );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 659;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 654;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore('}')) break; 
                this.state = 656;
                this.projectionWithOptAlias( localctx.query );
                this.state = 661;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 662;
            this.match(languageParser.T__3);
        }

        this.state = 678;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.EXCLUDING) {
            this.state = 665;
            this.match(languageParser.EXCLUDING);
            this.state = 666;
            this.match(languageParser.T__1);
            this.state = 667;
            this.projectionExclusion( localctx.query );
            this.state = 673;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 668;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore('}')) break; 
                this.state = 670;
                this.projectionExclusion( localctx.query );
                this.state = 675;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 676;
            this.match(languageParser.T__3);
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProjectionExclusionContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_projectionExclusion;
    this.outer = null
    this.art = null
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ProjectionExclusionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionExclusionContext.prototype.constructor = ProjectionExclusionContext;

ProjectionExclusionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.ProjectionExclusionContext = ProjectionExclusionContext;

languageParser.prototype.projectionExclusion = function(outer) {

    var localctx = new ProjectionExclusionContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 38, languageParser.RULE_projectionExclusion);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 680;
        localctx.name = this.ident('ref');
         localctx.art =  this.addDef( localctx.outer, 'exclude', '', localctx.name.id ) 
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProjectionWithOptAliasContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_projectionWithOptAlias;
    this.outer = null
    this.art = null
    this.alias = null
    this.annos = []
    this.item = {}
    this.key = null; // Token
    this.aident = null; // IdentContext
    this.re = null; // Token
    this.to = null; // Token
    this.outer = outer || null;
    return this;
}

ProjectionWithOptAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionWithOptAliasContext.prototype.constructor = ProjectionWithOptAliasContext;

ProjectionWithOptAliasContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};

ProjectionWithOptAliasContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ProjectionWithOptAliasContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ProjectionWithOptAliasContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ProjectionWithOptAliasContext.prototype.KEY = function() {
    return this.getToken(languageParser.KEY, 0);
};

ProjectionWithOptAliasContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ProjectionWithOptAliasContext.prototype.REDIRECTED = function() {
    return this.getToken(languageParser.REDIRECTED, 0);
};

ProjectionWithOptAliasContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};




languageParser.ProjectionWithOptAliasContext = ProjectionWithOptAliasContext;

languageParser.prototype.projectionWithOptAlias = function(outer) {

    var localctx = new ProjectionWithOptAliasContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 40, languageParser.RULE_projectionWithOptAlias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 686;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 683;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 688;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 690;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.KEY) {
            this.state = 689;
            localctx.key = this.match(languageParser.KEY);
        }

        this.state = 692;
        this.simplePath( localctx.item, 'ref' );
        this.state = 697;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.AS) {
            this.state = 693;
            this.match(languageParser.AS);
            this.state = 694;
            localctx.aident = this.ident('Item');
             localctx.alias=localctx.aident.id 
        }

         localctx.art =  this.addItem( localctx.outer, 'columns', null,
                                   localctx.annos, { value: localctx.item, name: localctx.alias, key: localctx.key }) 
        this.state = 703;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 700;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 705;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 717;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__6) {
            this.state = 706;
            this.match(languageParser.T__6);
            this.state = 707;
            localctx.re = this.match(languageParser.REDIRECTED);
            this.state = 708;
            localctx.to = this.match(languageParser.TO);
             localctx.art.redirected = this.tokenLocation(localctx.re,localctx.to,true); localctx.art.target = {}; 
            this.state = 710;
            this.simplePath( localctx.art.target, 'artref' );
            this.state = 714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 711;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 716;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendEntityContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendEntity;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendEntityContext.prototype.constructor = ExtendEntityContext;

ExtendEntityContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

ExtendEntityContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendEntityContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendEntityContext.prototype.extendForEntity = function() {
    return this.getTypedRuleContext(ExtendForEntityContext,0);
};

ExtendEntityContext.prototype.includeRef = function() {
    return this.getTypedRuleContext(IncludeRefContext,0);
};

ExtendEntityContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendEntityContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.ExtendEntityContext = ExtendEntityContext;

languageParser.prototype.extendEntity = function(outer, loc, annos) {

    var localctx = new ExtendEntityContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 42, languageParser.RULE_extendEntity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this.match(languageParser.ENTITY);
        this.state = 720;
        this.simplePath( localctx.name, 'Entity' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'entity' }, localctx.loc )  
        this.state = 743;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.WITH:
            this.state = 722;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
            this.state = 727;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 724;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 729;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 734;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
            switch(la_) {
            case 1:
                this.state = 730;
                this.includeRef( localctx.art );
                this.state = 731;
                this.requiredSemi();
                break;

            case 2:
                this.state = 733;
                this.extendForEntity( localctx.art );
                break;

            }
            break;
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__3:
        case languageParser.T__9:
        case languageParser.ACTIONS:
        case languageParser.CONFIGURATION:
        case languageParser.HANA:
        case languageParser.TECHNICAL:
            this.state = 739;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 736;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 741;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 742;
            this.extendForEntity( localctx.art );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendForEntityContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendForEntity;
    this.art = null
    this.art = art || null;
    return this;
}

ExtendForEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendForEntityContext.prototype.constructor = ExtendForEntityContext;

ExtendForEntityContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendForEntityContext.prototype.elementDefOrExtend = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefOrExtendContext);
    } else {
        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
    }
};

ExtendForEntityContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

ExtendForEntityContext.prototype.technicalConfiguration = function() {
    return this.getTypedRuleContext(TechnicalConfigurationContext,0);
};

ExtendForEntityContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};

ExtendForEntityContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};




languageParser.ExtendForEntityContext = ExtendForEntityContext;

languageParser.prototype.extendForEntity = function(art) {

    var localctx = new ExtendForEntityContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 44, languageParser.RULE_extendForEntity);
    var _la = 0; // Token type
    try {
        this.state = 785;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 745;
            this.match(languageParser.T__1);
            this.state = 749;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AFTER - 48)) | (1 << (languageParser.ALWAYS - 48)) | (1 << (languageParser.ANALYSIS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.ASYNC - 48)) | (1 << (languageParser.ASYNCHRONOUS - 48)) | (1 << (languageParser.AUTO - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.CACHE - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.COLUMN - 80)) | (1 << (languageParser.COLUMNS - 80)) | (1 << (languageParser.COMPOSITION - 80)) | (1 << (languageParser.CONFIGURATION - 80)) | (1 << (languageParser.CONST - 80)) | (1 << (languageParser.CONTEXT - 80)) | (1 << (languageParser.CROSS - 80)) | (1 << (languageParser.CURRENT - 80)) | (1 << (languageParser.CYCLE - 80)) | (1 << (languageParser.DAY - 80)) | (1 << (languageParser.DEFAULT - 80)) | (1 << (languageParser.DEFINE - 80)) | (1 << (languageParser.DEPENDS - 80)) | (1 << (languageParser.DESC - 80)) | (1 << (languageParser.DETECTION - 80)) | (1 << (languageParser.DISABLED - 80)) | (1 << (languageParser.DOCUMENTS - 80)) | (1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.ENABLED - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.EVERY - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXISTING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.EXTENDED - 80)) | (1 << (languageParser.FAST - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.FIRST - 112)) | (1 << (languageParser.FLUSH - 112)) | (1 << (languageParser.FULL - 112)) | (1 << (languageParser.FULLTEXT - 112)) | (1 << (languageParser.FUNCTION - 112)) | (1 << (languageParser.FUZZY - 112)) | (1 << (languageParser.GENERATED - 112)) | (1 << (languageParser.GETNUMSERVERS - 112)) | (1 << (languageParser.GROUP - 112)) | (1 << (languageParser.HANA - 112)) | (1 << (languageParser.HASH - 112)) | (1 << (languageParser.HAVING - 112)) | (1 << (languageParser.HOUR - 112)) | (1 << (languageParser.IDENTITY - 112)) | (1 << (languageParser.INCREMENT - 112)) | (1 << (languageParser.INDEX - 112)) | (1 << (languageParser.INNER - 112)) | (1 << (languageParser.INTERSECT - 112)) | (1 << (languageParser.INTO - 112)) | (1 << (languageParser.IS - 112)) | (1 << (languageParser.JOIN - 112)) | (1 << (languageParser.KEEPING - 112)) | (1 << (languageParser.LANGUAGE - 112)) | (1 << (languageParser.LAST - 112)) | (1 << (languageParser.LAYOUT - 112)) | (1 << (languageParser.LEADING - 112)) | (1 << (languageParser.LEFT - 112)) | (1 << (languageParser.LIKE - 112)) | (1 << (languageParser.LIMIT - 112)) | (1 << (languageParser.LOCALIZED - 112)) | (1 << (languageParser.MANY - 112)) | (1 << (languageParser.MASKED - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (languageParser.MAXVALUE - 144)) | (1 << (languageParser.MERGE - 144)) | (1 << (languageParser.MIGRATION - 144)) | (1 << (languageParser.MINING - 144)) | (1 << (languageParser.MINUS - 144)) | (1 << (languageParser.MINUTE - 144)) | (1 << (languageParser.MINUTES - 144)) | (1 << (languageParser.MINVALUE - 144)) | (1 << (languageParser.MIME - 144)) | (1 << (languageParser.MIXIN - 144)) | (1 << (languageParser.MODE - 144)) | (1 << (languageParser.MONTH - 144)) | (1 << (languageParser.NAME - 144)) | (1 << (languageParser.NAMESPACE - 144)) | (1 << (languageParser.NO - 144)) | (1 << (languageParser.NULLS - 144)) | (1 << (languageParser.OFF - 144)) | (1 << (languageParser.OFFSET - 144)) | (1 << (languageParser.ONE - 144)) | (1 << (languageParser.ONLY - 144)) | (1 << (languageParser.OR - 144)) | (1 << (languageParser.ORDER - 144)) | (1 << (languageParser.OTHERS - 144)) | (1 << (languageParser.OUTER - 144)) | (1 << (languageParser.OVERLAY - 144)) | (1 << (languageParser.QUEUE - 144)) | (1 << (languageParser.PARAMETERS - 144)) | (1 << (languageParser.PARTITION - 144)) | (1 << (languageParser.PARTITIONING - 144)) | (1 << (languageParser.PARTITIONS - 144)) | (1 << (languageParser.PHRASE - 144)) | (1 << (languageParser.PREPROCESS - 144)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (languageParser.PRIORITY - 176)) | (1 << (languageParser.PROJECTION - 176)) | (1 << (languageParser.RANGE - 176)) | (1 << (languageParser.RATIO - 176)) | (1 << (languageParser.REDIRECTED - 176)) | (1 << (languageParser.RESET - 176)) | (1 << (languageParser.RETURNS - 176)) | (1 << (languageParser.RIGHT - 176)) | (1 << (languageParser.ROUNDROBIN - 176)) | (1 << (languageParser.ROW - 176)) | (1 << (languageParser.SEARCH - 176)) | (1 << (languageParser.SECOND - 176)) | (1 << (languageParser.SEPARATORS - 176)) | (1 << (languageParser.SERVICE - 176)) | (1 << (languageParser.START - 176)) | (1 << (languageParser.STORAGE - 176)) | (1 << (languageParser.STORE - 176)) | (1 << (languageParser.SUBTYPE - 176)) | (1 << (languageParser.SYNC - 176)) | (1 << (languageParser.SYNCHRONOUS - 176)) | (1 << (languageParser.TABLE - 176)) | (1 << (languageParser.TECHNICAL - 176)) | (1 << (languageParser.TEMPORARY - 176)) | (1 << (languageParser.TEXT - 176)) | (1 << (languageParser.THEN - 176)) | (1 << (languageParser.TOKEN - 176)) | (1 << (languageParser.TOP - 176)) | (1 << (languageParser.TRAILING - 176)) | (1 << (languageParser.TO - 176)) | (1 << (languageParser.TYPE - 176)) | (1 << (languageParser.UNION - 176)) | (1 << (languageParser.UNIQUE - 176)))) !== 0) || ((((_la - 208)) & ~0x1f) == 0 && ((1 << (_la - 208)) & ((1 << (languageParser.UNLOAD - 208)) | (1 << (languageParser.USING - 208)) | (1 << (languageParser.VALUE - 208)) | (1 << (languageParser.VALUES - 208)) | (1 << (languageParser.VIEW - 208)) | (1 << (languageParser.VIRTUAL - 208)) | (1 << (languageParser.YEAR - 208)) | (1 << (languageParser.Identifier - 208)))) !== 0)) {
                this.state = 746;
                this.elementDefOrExtend( localctx.art );
                this.state = 751;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 752;
            this.match(languageParser.T__3);
            this.state = 762;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 753;
                this.match(languageParser.ACTIONS);
                this.state = 754;
                this.match(languageParser.T__1);
                this.state = 758;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__9 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                    this.state = 755;
                    this.actionFunctionDef( localctx.art );
                    this.state = 760;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 761;
                this.match(languageParser.T__3);
            }

            this.state = 765;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.CONFIGURATION || _la===languageParser.HANA || _la===languageParser.TECHNICAL) {
                this.state = 764;
                this.technicalConfiguration( localctx.art );
            }

            this.state = 767;
            this.optionalSemi();
            break;
        case languageParser.ACTIONS:
            this.enterOuterAlt(localctx, 2);
            this.state = 768;
            this.match(languageParser.ACTIONS);
            this.state = 769;
            this.match(languageParser.T__1);
            this.state = 773;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9 || _la===languageParser.ACTION || _la===languageParser.FUNCTION) {
                this.state = 770;
                this.actionFunctionDef( localctx.art );
                this.state = 775;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 776;
            this.match(languageParser.T__3);
            this.state = 778;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.CONFIGURATION || _la===languageParser.HANA || _la===languageParser.TECHNICAL) {
                this.state = 777;
                this.technicalConfiguration( localctx.art );
            }

            this.state = 780;
            this.optionalSemi();
            break;
        case languageParser.CONFIGURATION:
        case languageParser.HANA:
        case languageParser.TECHNICAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 781;
            this.technicalConfiguration( localctx.art );
            this.state = 782;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.enterOuterAlt(localctx, 4);
            this.state = 784;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendProjectionContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendProjection;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.expected = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendProjectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendProjectionContext.prototype.constructor = ExtendProjectionContext;

ExtendProjectionContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendProjectionContext.prototype.PROJECTION = function() {
    return this.getToken(languageParser.PROJECTION, 0);
};

ExtendProjectionContext.prototype.projectionWithOptAlias = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectionWithOptAliasContext);
    } else {
        return this.getTypedRuleContext(ProjectionWithOptAliasContext,i);
    }
};

ExtendProjectionContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendProjectionContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

ExtendProjectionContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendProjectionContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendProjectionContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ExtendProjectionContext.prototype.actionFunctionDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ActionFunctionDefContext);
    } else {
        return this.getTypedRuleContext(ActionFunctionDefContext,i);
    }
};




languageParser.ExtendProjectionContext = ExtendProjectionContext;

languageParser.prototype.extendProjection = function(outer, loc, annos) {

    var localctx = new ExtendProjectionContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 46, languageParser.RULE_extendProjection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 787;
        localctx.expected = this.match(languageParser.PROJECTION);
        this.state = 788;
        this.simplePath( localctx.name, 'Entity' );

              localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'entity' }, // or 'projection'?
                                   localctx.loc )  
        this.state = 792;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 790;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
        }

        this.state = 797;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 794;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 799;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 835;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 800;
            this.match(languageParser.T__1);
            this.state = 801;
            this.projectionWithOptAlias( localctx.art );
            this.state = 807;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 802;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore('}')) break; 
                this.state = 804;
                this.projectionWithOptAlias( localctx.art );
                this.state = 809;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 810;
            this.match(languageParser.T__3);
            this.state = 820;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 811;
                this.match(languageParser.ACTIONS);
                this.state = 812;
                this.match(languageParser.T__1);
                this.state = 814; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 813;
                    this.actionFunctionDef( localctx.art );
                    this.state = 816; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===languageParser.T__9 || _la===languageParser.ACTION || _la===languageParser.FUNCTION);
                this.state = 818;
                this.match(languageParser.T__3);
            }

            this.state = 822;
            this.optionalSemi();
            break;
        case languageParser.ACTIONS:
            this.state = 824;
            this.match(languageParser.ACTIONS);
            this.state = 825;
            this.match(languageParser.T__1);
            this.state = 827; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 826;
                this.actionFunctionDef( localctx.art );
                this.state = 829; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===languageParser.T__9 || _la===languageParser.ACTION || _la===languageParser.FUNCTION);
            this.state = 831;
            this.match(languageParser.T__3);
            this.state = 832;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 834;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ActionFunctionDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_actionFunctionDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ActionFunctionDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionFunctionDefContext.prototype.constructor = ActionFunctionDefContext;

ActionFunctionDefContext.prototype.ACTION = function() {
    return this.getToken(languageParser.ACTION, 0);
};

ActionFunctionDefContext.prototype.parameterListDef = function() {
    return this.getTypedRuleContext(ParameterListDefContext,0);
};

ActionFunctionDefContext.prototype.FUNCTION = function() {
    return this.getToken(languageParser.FUNCTION, 0);
};

ActionFunctionDefContext.prototype.returnTypeSpec = function() {
    return this.getTypedRuleContext(ReturnTypeSpecContext,0);
};

ActionFunctionDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ActionFunctionDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ActionFunctionDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ActionFunctionDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.ActionFunctionDefContext = ActionFunctionDefContext;

languageParser.prototype.actionFunctionDef = function(outer) {

    var localctx = new ActionFunctionDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 48, languageParser.RULE_actionFunctionDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 840;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 837;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 842;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 869;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ACTION:
            this.state = 843;
            this.match(languageParser.ACTION);
            this.state = 844;
            localctx.name = this.ident('BoundAction');
             localctx.art =  this.addDef( localctx.outer, 'actions', 'action', localctx.name.id, localctx.annos ) 
            this.state = 849;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 846;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 851;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 852;
            this.parameterListDef( localctx.art );
            this.state = 855;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.RETURNS:
                this.state = 853;
                this.returnTypeSpec( localctx.art, localctx.annos );
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 854;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.FUNCTION:
            this.state = 857;
            this.match(languageParser.FUNCTION);
            this.state = 858;
            localctx.name = this.ident('BoundAction');
             localctx.art =  this.addDef( localctx.outer, 'actions', 'function', localctx.name.id, localctx.annos ) 
            this.state = 863;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 860;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 865;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 866;
            this.parameterListDef( localctx.art );
            this.state = 867;
            this.returnTypeSpec( localctx.art, localctx.annos );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ActionFunctionMainDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_actionFunctionMainDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ActionFunctionMainDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ActionFunctionMainDefContext.prototype.constructor = ActionFunctionMainDefContext;

ActionFunctionMainDefContext.prototype.ACTION = function() {
    return this.getToken(languageParser.ACTION, 0);
};

ActionFunctionMainDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ActionFunctionMainDefContext.prototype.parameterListDef = function() {
    return this.getTypedRuleContext(ParameterListDefContext,0);
};

ActionFunctionMainDefContext.prototype.returnTypeSpec = function() {
    return this.getTypedRuleContext(ReturnTypeSpecContext,0);
};

ActionFunctionMainDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ActionFunctionMainDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ActionFunctionMainDefContext.prototype.FUNCTION = function() {
    return this.getToken(languageParser.FUNCTION, 0);
};




languageParser.ActionFunctionMainDefContext = ActionFunctionMainDefContext;

languageParser.prototype.actionFunctionMainDef = function(outer, loc, annos) {

    var localctx = new ActionFunctionMainDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 50, languageParser.RULE_actionFunctionMainDef);
    var _la = 0; // Token type
    try {
        this.state = 897;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ACTION:
            this.enterOuterAlt(localctx, 1);
            this.state = 871;
            this.match(languageParser.ACTION);
            this.state = 872;
            this.simplePath( localctx.name, 'Action' );
             localctx.art =  this.addDef( localctx.outer, 'artifacts', 'action', localctx.name, localctx.annos, {}, localctx.loc ) 
            this.state = 877;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 874;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 879;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 880;
            this.parameterListDef( localctx.art );
            this.state = 883;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.RETURNS:
                this.state = 881;
                this.returnTypeSpec( localctx.art, localctx.annos );
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 882;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.FUNCTION:
            this.enterOuterAlt(localctx, 2);
            this.state = 885;
            this.match(languageParser.FUNCTION);
            this.state = 886;
            this.simplePath( localctx.name, 'Action' );
             localctx.art =  this.addDef( localctx.outer, 'artifacts', 'function', localctx.name, localctx.annos, {}, localctx.loc ) 
            this.state = 891;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 888;
                this.annotationAssignment_fix( localctx.annos );
                this.state = 893;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 894;
            this.parameterListDef( localctx.art );
            this.state = 895;
            this.returnTypeSpec( localctx.art, localctx.annos );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_eventDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

EventDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefContext.prototype.constructor = EventDefContext;

EventDefContext.prototype.EVENT = function() {
    return this.getToken(languageParser.EVENT, 0);
};

EventDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

EventDefContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

EventDefContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

EventDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.EventDefContext = EventDefContext;

languageParser.prototype.eventDef = function(outer, loc, annos) {

    var localctx = new EventDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 52, languageParser.RULE_eventDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 899;
        this.match(languageParser.EVENT);
        this.state = 900;
        this.simplePath( localctx.name, 'Event' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'event', localctx.name, localctx.annos, {}, localctx.loc ) 
        this.state = 905;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 902;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__6) {
            this.state = 908;
            this.match(languageParser.T__6);
        }

        this.state = 911;
        this.typeStruct( localctx.art );
        this.state = 912;
        this.optionalSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.db = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

TypeDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeDefContext.prototype.constructor = TypeDefContext;

TypeDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeDefContext.prototype.typeSpecSemi = function() {
    return this.getTypedRuleContext(TypeSpecSemiContext,0);
};

TypeDefContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

TypeDefContext.prototype.ASPECT = function() {
    return this.getToken(languageParser.ASPECT, 0);
};

TypeDefContext.prototype.TABLE = function() {
    return this.getToken(languageParser.TABLE, 0);
};

TypeDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.TypeDefContext = TypeDefContext;

languageParser.prototype.typeDef = function(outer, loc, annos) {

    var localctx = new TypeDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 54, languageParser.RULE_typeDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.TYPE:
            this.state = 914;
            this.match(languageParser.TYPE);
            break;
        case languageParser.TABLE:
            this.state = 915;
            localctx.db = this.match(languageParser.TABLE);
            this.state = 916;
            this.match(languageParser.TYPE);
            break;
        case languageParser.ASPECT:
            this.state = 917;
            this.match(languageParser.ASPECT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 920;
        this.simplePath( localctx.name, 'Type' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'type', localctx.name, localctx.annos, { dbType: localctx.db }, localctx.loc ) 
        this.state = 925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 922;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 928;
        this.typeSpecSemi( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendTypeContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendType;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendTypeContext.prototype.constructor = ExtendTypeContext;

ExtendTypeContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

ExtendTypeContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendTypeContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};




languageParser.ExtendTypeContext = ExtendTypeContext;

languageParser.prototype.extendType = function(outer, loc, annos) {

    var localctx = new ExtendTypeContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 56, languageParser.RULE_extendType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 930;
        this.match(languageParser.TYPE);
        this.state = 931;
        this.simplePath( localctx.name, 'Type' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'type' },
                                   localctx.loc )  
        this.state = 933;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotationDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

AnnotationDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationDefContext.prototype.constructor = AnnotationDefContext;

AnnotationDefContext.prototype.ANNOTATION = function() {
    return this.getToken(languageParser.ANNOTATION, 0);
};

AnnotationDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AnnotationDefContext.prototype.typeSpecSemi = function() {
    return this.getTypedRuleContext(TypeSpecSemiContext,0);
};

AnnotationDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.AnnotationDefContext = AnnotationDefContext;

languageParser.prototype.annotationDef = function(outer, loc, annos) {

    var localctx = new AnnotationDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 58, languageParser.RULE_annotationDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 935;
        this.match(languageParser.ANNOTATION);
        this.state = 936;
        this.simplePath( localctx.name, 'AnnoDef' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'annotation', localctx.name, localctx.annos, {}, localctx.loc ) 
        this.state = 941;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 938;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 943;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 944;
        this.typeSpecSemi( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendAnnotationContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendAnnotation;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendAnnotationContext.prototype.constructor = ExtendAnnotationContext;

ExtendAnnotationContext.prototype.ANNOTATION = function() {
    return this.getToken(languageParser.ANNOTATION, 0);
};

ExtendAnnotationContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendAnnotationContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};




languageParser.ExtendAnnotationContext = ExtendAnnotationContext;

languageParser.prototype.extendAnnotation = function(outer, loc, annos) {

    var localctx = new ExtendAnnotationContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 60, languageParser.RULE_extendAnnotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 946;
        this.match(languageParser.ANNOTATION);
        this.state = 947;
        this.simplePath( localctx.name, 'AnnoDef' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'annotation' },
                                   localctx.loc )  
        this.state = 949;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendArtifactContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendArtifact;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendArtifactContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendArtifactContext.prototype.constructor = ExtendArtifactContext;

ExtendArtifactContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendArtifactContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};




languageParser.ExtendArtifactContext = ExtendArtifactContext;

languageParser.prototype.extendArtifact = function(outer, loc, annos) {

    var localctx = new ExtendArtifactContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 62, languageParser.RULE_extendArtifact);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 951;
        this.simplePath( localctx.name, 'Extend' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name }, localctx.loc )  
        this.state = 953;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendWithOptElementsContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendWithOptElements;
    this.art = null
    this.annos = null
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

ExtendWithOptElementsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendWithOptElementsContext.prototype.constructor = ExtendWithOptElementsContext;

ExtendWithOptElementsContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendWithOptElementsContext.prototype.includeRef = function() {
    return this.getTypedRuleContext(IncludeRefContext,0);
};

ExtendWithOptElementsContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendWithOptElementsContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ExtendWithOptElementsContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ExtendWithOptElementsContext.prototype.elementDefOrExtend = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefOrExtendContext);
    } else {
        return this.getTypedRuleContext(ElementDefOrExtendContext,i);
    }
};




languageParser.ExtendWithOptElementsContext = ExtendWithOptElementsContext;

languageParser.prototype.extendWithOptElements = function(art, annos) {

    var localctx = new ExtendWithOptElementsContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 64, languageParser.RULE_extendWithOptElements);
    var _la = 0; // Token type
    try {
        this.state = 996;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.WITH:
            this.enterOuterAlt(localctx, 1);
            this.state = 955;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
            this.state = 960;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 957;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 962;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 976;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AFTER:
            case languageParser.ALWAYS:
            case languageParser.ANALYSIS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.ASYNC:
            case languageParser.ASYNCHRONOUS:
            case languageParser.AUTO:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.CACHE:
            case languageParser.COLUMN:
            case languageParser.COLUMNS:
            case languageParser.COMPOSITION:
            case languageParser.CONFIGURATION:
            case languageParser.CONST:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.CURRENT:
            case languageParser.CYCLE:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DEPENDS:
            case languageParser.DESC:
            case languageParser.DETECTION:
            case languageParser.DISABLED:
            case languageParser.DOCUMENTS:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.ENABLED:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.EVERY:
            case languageParser.ESCAPE:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXISTING:
            case languageParser.EXTEND:
            case languageParser.EXTENDED:
            case languageParser.FAST:
            case languageParser.FIRST:
            case languageParser.FLUSH:
            case languageParser.FULL:
            case languageParser.FULLTEXT:
            case languageParser.FUNCTION:
            case languageParser.FUZZY:
            case languageParser.GENERATED:
            case languageParser.GETNUMSERVERS:
            case languageParser.GROUP:
            case languageParser.HANA:
            case languageParser.HASH:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.IDENTITY:
            case languageParser.INCREMENT:
            case languageParser.INDEX:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.KEEPING:
            case languageParser.LANGUAGE:
            case languageParser.LAST:
            case languageParser.LAYOUT:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MAXVALUE:
            case languageParser.MERGE:
            case languageParser.MIGRATION:
            case languageParser.MINING:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MINUTES:
            case languageParser.MINVALUE:
            case languageParser.MIME:
            case languageParser.MIXIN:
            case languageParser.MODE:
            case languageParser.MONTH:
            case languageParser.NAME:
            case languageParser.NAMESPACE:
            case languageParser.NO:
            case languageParser.NULLS:
            case languageParser.OFF:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.ONLY:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OTHERS:
            case languageParser.OUTER:
            case languageParser.OVERLAY:
            case languageParser.QUEUE:
            case languageParser.PARAMETERS:
            case languageParser.PARTITION:
            case languageParser.PARTITIONING:
            case languageParser.PARTITIONS:
            case languageParser.PHRASE:
            case languageParser.PREPROCESS:
            case languageParser.PRIORITY:
            case languageParser.PROJECTION:
            case languageParser.RANGE:
            case languageParser.RATIO:
            case languageParser.REDIRECTED:
            case languageParser.RESET:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.ROUNDROBIN:
            case languageParser.ROW:
            case languageParser.SEARCH:
            case languageParser.SECOND:
            case languageParser.SEPARATORS:
            case languageParser.SERVICE:
            case languageParser.START:
            case languageParser.STORAGE:
            case languageParser.STORE:
            case languageParser.SUBTYPE:
            case languageParser.SYNC:
            case languageParser.SYNCHRONOUS:
            case languageParser.TABLE:
            case languageParser.TECHNICAL:
            case languageParser.TEMPORARY:
            case languageParser.TEXT:
            case languageParser.THEN:
            case languageParser.TOKEN:
            case languageParser.TOP:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.UNIQUE:
            case languageParser.UNLOAD:
            case languageParser.USING:
            case languageParser.VALUE:
            case languageParser.VALUES:
            case languageParser.VIEW:
            case languageParser.VIRTUAL:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 963;
                this.includeRef( localctx.art );
                this.state = 964;
                this.requiredSemi();
                break;
            case languageParser.T__1:
                this.state = 966;
                this.match(languageParser.T__1);
                this.state = 970;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__9 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AFTER - 48)) | (1 << (languageParser.ALWAYS - 48)) | (1 << (languageParser.ANALYSIS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.ASYNC - 48)) | (1 << (languageParser.ASYNCHRONOUS - 48)) | (1 << (languageParser.AUTO - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.CACHE - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.COLUMN - 80)) | (1 << (languageParser.COLUMNS - 80)) | (1 << (languageParser.COMPOSITION - 80)) | (1 << (languageParser.CONFIGURATION - 80)) | (1 << (languageParser.CONST - 80)) | (1 << (languageParser.CONTEXT - 80)) | (1 << (languageParser.CROSS - 80)) | (1 << (languageParser.CURRENT - 80)) | (1 << (languageParser.CYCLE - 80)) | (1 << (languageParser.DAY - 80)) | (1 << (languageParser.DEFAULT - 80)) | (1 << (languageParser.DEFINE - 80)) | (1 << (languageParser.DEPENDS - 80)) | (1 << (languageParser.DESC - 80)) | (1 << (languageParser.DETECTION - 80)) | (1 << (languageParser.DISABLED - 80)) | (1 << (languageParser.DOCUMENTS - 80)) | (1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.ENABLED - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.EVERY - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXISTING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.EXTENDED - 80)) | (1 << (languageParser.FAST - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.FIRST - 112)) | (1 << (languageParser.FLUSH - 112)) | (1 << (languageParser.FULL - 112)) | (1 << (languageParser.FULLTEXT - 112)) | (1 << (languageParser.FUNCTION - 112)) | (1 << (languageParser.FUZZY - 112)) | (1 << (languageParser.GENERATED - 112)) | (1 << (languageParser.GETNUMSERVERS - 112)) | (1 << (languageParser.GROUP - 112)) | (1 << (languageParser.HANA - 112)) | (1 << (languageParser.HASH - 112)) | (1 << (languageParser.HAVING - 112)) | (1 << (languageParser.HOUR - 112)) | (1 << (languageParser.IDENTITY - 112)) | (1 << (languageParser.INCREMENT - 112)) | (1 << (languageParser.INDEX - 112)) | (1 << (languageParser.INNER - 112)) | (1 << (languageParser.INTERSECT - 112)) | (1 << (languageParser.INTO - 112)) | (1 << (languageParser.IS - 112)) | (1 << (languageParser.JOIN - 112)) | (1 << (languageParser.KEEPING - 112)) | (1 << (languageParser.LANGUAGE - 112)) | (1 << (languageParser.LAST - 112)) | (1 << (languageParser.LAYOUT - 112)) | (1 << (languageParser.LEADING - 112)) | (1 << (languageParser.LEFT - 112)) | (1 << (languageParser.LIKE - 112)) | (1 << (languageParser.LIMIT - 112)) | (1 << (languageParser.LOCALIZED - 112)) | (1 << (languageParser.MANY - 112)) | (1 << (languageParser.MASKED - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (languageParser.MAXVALUE - 144)) | (1 << (languageParser.MERGE - 144)) | (1 << (languageParser.MIGRATION - 144)) | (1 << (languageParser.MINING - 144)) | (1 << (languageParser.MINUS - 144)) | (1 << (languageParser.MINUTE - 144)) | (1 << (languageParser.MINUTES - 144)) | (1 << (languageParser.MINVALUE - 144)) | (1 << (languageParser.MIME - 144)) | (1 << (languageParser.MIXIN - 144)) | (1 << (languageParser.MODE - 144)) | (1 << (languageParser.MONTH - 144)) | (1 << (languageParser.NAME - 144)) | (1 << (languageParser.NAMESPACE - 144)) | (1 << (languageParser.NO - 144)) | (1 << (languageParser.NULLS - 144)) | (1 << (languageParser.OFF - 144)) | (1 << (languageParser.OFFSET - 144)) | (1 << (languageParser.ONE - 144)) | (1 << (languageParser.ONLY - 144)) | (1 << (languageParser.OR - 144)) | (1 << (languageParser.ORDER - 144)) | (1 << (languageParser.OTHERS - 144)) | (1 << (languageParser.OUTER - 144)) | (1 << (languageParser.OVERLAY - 144)) | (1 << (languageParser.QUEUE - 144)) | (1 << (languageParser.PARAMETERS - 144)) | (1 << (languageParser.PARTITION - 144)) | (1 << (languageParser.PARTITIONING - 144)) | (1 << (languageParser.PARTITIONS - 144)) | (1 << (languageParser.PHRASE - 144)) | (1 << (languageParser.PREPROCESS - 144)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (languageParser.PRIORITY - 176)) | (1 << (languageParser.PROJECTION - 176)) | (1 << (languageParser.RANGE - 176)) | (1 << (languageParser.RATIO - 176)) | (1 << (languageParser.REDIRECTED - 176)) | (1 << (languageParser.RESET - 176)) | (1 << (languageParser.RETURNS - 176)) | (1 << (languageParser.RIGHT - 176)) | (1 << (languageParser.ROUNDROBIN - 176)) | (1 << (languageParser.ROW - 176)) | (1 << (languageParser.SEARCH - 176)) | (1 << (languageParser.SECOND - 176)) | (1 << (languageParser.SEPARATORS - 176)) | (1 << (languageParser.SERVICE - 176)) | (1 << (languageParser.START - 176)) | (1 << (languageParser.STORAGE - 176)) | (1 << (languageParser.STORE - 176)) | (1 << (languageParser.SUBTYPE - 176)) | (1 << (languageParser.SYNC - 176)) | (1 << (languageParser.SYNCHRONOUS - 176)) | (1 << (languageParser.TABLE - 176)) | (1 << (languageParser.TECHNICAL - 176)) | (1 << (languageParser.TEMPORARY - 176)) | (1 << (languageParser.TEXT - 176)) | (1 << (languageParser.THEN - 176)) | (1 << (languageParser.TOKEN - 176)) | (1 << (languageParser.TOP - 176)) | (1 << (languageParser.TRAILING - 176)) | (1 << (languageParser.TO - 176)) | (1 << (languageParser.TYPE - 176)) | (1 << (languageParser.UNION - 176)) | (1 << (languageParser.UNIQUE - 176)))) !== 0) || ((((_la - 208)) & ~0x1f) == 0 && ((1 << (_la - 208)) & ((1 << (languageParser.UNLOAD - 208)) | (1 << (languageParser.USING - 208)) | (1 << (languageParser.VALUE - 208)) | (1 << (languageParser.VALUES - 208)) | (1 << (languageParser.VIEW - 208)) | (1 << (languageParser.VIRTUAL - 208)) | (1 << (languageParser.YEAR - 208)) | (1 << (languageParser.Identifier - 208)))) !== 0)) {
                    this.state = 967;
                    this.elementDefOrExtend( localctx.art );
                    this.state = 972;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 973;
                this.match(languageParser.T__3);
                this.state = 974;
                this.optionalSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 975;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__3:
        case languageParser.T__9:
            this.enterOuterAlt(localctx, 2);
            this.state = 981;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 978;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 983;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 994;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__1:
                this.state = 984;
                this.match(languageParser.T__1);
                this.state = 988;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__9 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AFTER - 48)) | (1 << (languageParser.ALWAYS - 48)) | (1 << (languageParser.ANALYSIS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.ASYNC - 48)) | (1 << (languageParser.ASYNCHRONOUS - 48)) | (1 << (languageParser.AUTO - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.CACHE - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.COLUMN - 80)) | (1 << (languageParser.COLUMNS - 80)) | (1 << (languageParser.COMPOSITION - 80)) | (1 << (languageParser.CONFIGURATION - 80)) | (1 << (languageParser.CONST - 80)) | (1 << (languageParser.CONTEXT - 80)) | (1 << (languageParser.CROSS - 80)) | (1 << (languageParser.CURRENT - 80)) | (1 << (languageParser.CYCLE - 80)) | (1 << (languageParser.DAY - 80)) | (1 << (languageParser.DEFAULT - 80)) | (1 << (languageParser.DEFINE - 80)) | (1 << (languageParser.DEPENDS - 80)) | (1 << (languageParser.DESC - 80)) | (1 << (languageParser.DETECTION - 80)) | (1 << (languageParser.DISABLED - 80)) | (1 << (languageParser.DOCUMENTS - 80)) | (1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.ENABLED - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.EVERY - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXISTING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.EXTENDED - 80)) | (1 << (languageParser.FAST - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.FIRST - 112)) | (1 << (languageParser.FLUSH - 112)) | (1 << (languageParser.FULL - 112)) | (1 << (languageParser.FULLTEXT - 112)) | (1 << (languageParser.FUNCTION - 112)) | (1 << (languageParser.FUZZY - 112)) | (1 << (languageParser.GENERATED - 112)) | (1 << (languageParser.GETNUMSERVERS - 112)) | (1 << (languageParser.GROUP - 112)) | (1 << (languageParser.HANA - 112)) | (1 << (languageParser.HASH - 112)) | (1 << (languageParser.HAVING - 112)) | (1 << (languageParser.HOUR - 112)) | (1 << (languageParser.IDENTITY - 112)) | (1 << (languageParser.INCREMENT - 112)) | (1 << (languageParser.INDEX - 112)) | (1 << (languageParser.INNER - 112)) | (1 << (languageParser.INTERSECT - 112)) | (1 << (languageParser.INTO - 112)) | (1 << (languageParser.IS - 112)) | (1 << (languageParser.JOIN - 112)) | (1 << (languageParser.KEEPING - 112)) | (1 << (languageParser.LANGUAGE - 112)) | (1 << (languageParser.LAST - 112)) | (1 << (languageParser.LAYOUT - 112)) | (1 << (languageParser.LEADING - 112)) | (1 << (languageParser.LEFT - 112)) | (1 << (languageParser.LIKE - 112)) | (1 << (languageParser.LIMIT - 112)) | (1 << (languageParser.LOCALIZED - 112)) | (1 << (languageParser.MANY - 112)) | (1 << (languageParser.MASKED - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (languageParser.MAXVALUE - 144)) | (1 << (languageParser.MERGE - 144)) | (1 << (languageParser.MIGRATION - 144)) | (1 << (languageParser.MINING - 144)) | (1 << (languageParser.MINUS - 144)) | (1 << (languageParser.MINUTE - 144)) | (1 << (languageParser.MINUTES - 144)) | (1 << (languageParser.MINVALUE - 144)) | (1 << (languageParser.MIME - 144)) | (1 << (languageParser.MIXIN - 144)) | (1 << (languageParser.MODE - 144)) | (1 << (languageParser.MONTH - 144)) | (1 << (languageParser.NAME - 144)) | (1 << (languageParser.NAMESPACE - 144)) | (1 << (languageParser.NO - 144)) | (1 << (languageParser.NULLS - 144)) | (1 << (languageParser.OFF - 144)) | (1 << (languageParser.OFFSET - 144)) | (1 << (languageParser.ONE - 144)) | (1 << (languageParser.ONLY - 144)) | (1 << (languageParser.OR - 144)) | (1 << (languageParser.ORDER - 144)) | (1 << (languageParser.OTHERS - 144)) | (1 << (languageParser.OUTER - 144)) | (1 << (languageParser.OVERLAY - 144)) | (1 << (languageParser.QUEUE - 144)) | (1 << (languageParser.PARAMETERS - 144)) | (1 << (languageParser.PARTITION - 144)) | (1 << (languageParser.PARTITIONING - 144)) | (1 << (languageParser.PARTITIONS - 144)) | (1 << (languageParser.PHRASE - 144)) | (1 << (languageParser.PREPROCESS - 144)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (languageParser.PRIORITY - 176)) | (1 << (languageParser.PROJECTION - 176)) | (1 << (languageParser.RANGE - 176)) | (1 << (languageParser.RATIO - 176)) | (1 << (languageParser.REDIRECTED - 176)) | (1 << (languageParser.RESET - 176)) | (1 << (languageParser.RETURNS - 176)) | (1 << (languageParser.RIGHT - 176)) | (1 << (languageParser.ROUNDROBIN - 176)) | (1 << (languageParser.ROW - 176)) | (1 << (languageParser.SEARCH - 176)) | (1 << (languageParser.SECOND - 176)) | (1 << (languageParser.SEPARATORS - 176)) | (1 << (languageParser.SERVICE - 176)) | (1 << (languageParser.START - 176)) | (1 << (languageParser.STORAGE - 176)) | (1 << (languageParser.STORE - 176)) | (1 << (languageParser.SUBTYPE - 176)) | (1 << (languageParser.SYNC - 176)) | (1 << (languageParser.SYNCHRONOUS - 176)) | (1 << (languageParser.TABLE - 176)) | (1 << (languageParser.TECHNICAL - 176)) | (1 << (languageParser.TEMPORARY - 176)) | (1 << (languageParser.TEXT - 176)) | (1 << (languageParser.THEN - 176)) | (1 << (languageParser.TOKEN - 176)) | (1 << (languageParser.TOP - 176)) | (1 << (languageParser.TRAILING - 176)) | (1 << (languageParser.TO - 176)) | (1 << (languageParser.TYPE - 176)) | (1 << (languageParser.UNION - 176)) | (1 << (languageParser.UNIQUE - 176)))) !== 0) || ((((_la - 208)) & ~0x1f) == 0 && ((1 << (_la - 208)) & ((1 << (languageParser.UNLOAD - 208)) | (1 << (languageParser.USING - 208)) | (1 << (languageParser.VALUE - 208)) | (1 << (languageParser.VALUES - 208)) | (1 << (languageParser.VIEW - 208)) | (1 << (languageParser.VIRTUAL - 208)) | (1 << (languageParser.YEAR - 208)) | (1 << (languageParser.Identifier - 208)))) !== 0)) {
                    this.state = 985;
                    this.elementDefOrExtend( localctx.art );
                    this.state = 990;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 991;
                this.match(languageParser.T__3);
                this.state = 992;
                this.optionalSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 993;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotateArtifactContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateArtifact;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

AnnotateArtifactContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateArtifactContext.prototype.constructor = AnnotateArtifactContext;

AnnotateArtifactContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

AnnotateArtifactContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AnnotateArtifactContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

AnnotateArtifactContext.prototype.annotateParam = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateParamContext);
    } else {
        return this.getTypedRuleContext(AnnotateParamContext,i);
    }
};

AnnotateArtifactContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

AnnotateArtifactContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

AnnotateArtifactContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

AnnotateArtifactContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

AnnotateArtifactContext.prototype.annotateElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateElementContext);
    } else {
        return this.getTypedRuleContext(AnnotateElementContext,i);
    }
};

AnnotateArtifactContext.prototype.annotateAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateActionContext);
    } else {
        return this.getTypedRuleContext(AnnotateActionContext,i);
    }
};




languageParser.AnnotateArtifactContext = AnnotateArtifactContext;

languageParser.prototype.annotateArtifact = function(outer, loc, annos) {

    var localctx = new AnnotateArtifactContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 66, languageParser.RULE_annotateArtifact);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 998;
        this.simplePath( localctx.name, 'Annotate' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'annotate', localctx.annos, { name: localctx.name }, localctx.loc ) 
        this.state = 1002;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 1000;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
        }

        this.state = 1007;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1004;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1009;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1075;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 1010;
            this.match(languageParser.T__1);
            this.state = 1014;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0)) {
                this.state = 1011;
                this.annotateElement( localctx.art );
                this.state = 1016;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1017;
            this.match(languageParser.T__3);
            this.state = 1027;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ACTIONS) {
                this.state = 1018;
                this.match(languageParser.ACTIONS);
                this.state = 1019;
                this.match(languageParser.T__1);
                this.state = 1023;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0)) {
                    this.state = 1020;
                    this.annotateAction( localctx.art );
                    this.state = 1025;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1026;
                this.match(languageParser.T__3);
            }

            this.state = 1029;
            this.optionalSemi();
            break;
        case languageParser.ACTIONS:
            this.state = 1030;
            this.match(languageParser.ACTIONS);
            this.state = 1031;
            this.match(languageParser.T__1);
            this.state = 1035;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0)) {
                this.state = 1032;
                this.annotateAction( localctx.art );
                this.state = 1037;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1038;
            this.match(languageParser.T__3);
            this.state = 1039;
            this.optionalSemi();
            break;
        case languageParser.T__7:
            this.state = 1040;
            this.match(languageParser.T__7);
            this.state = 1041;
            this.annotateParam( localctx.art );
            this.state = 1047;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1042;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1044;
                this.annotateParam( localctx.art );
                this.state = 1049;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1050;
            this.match(languageParser.T__8);
            this.state = 1062;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.RETURNS:
                this.state = 1051;
                this.match(languageParser.RETURNS);
                this.state = 1052;
                this.match(languageParser.T__1);
                this.state = 1056;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0)) {
                    this.state = 1053;
                    this.annotateElement( localctx.art );
                    this.state = 1058;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1059;
                this.match(languageParser.T__3);
                this.state = 1060;
                this.optionalSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
                this.state = 1061;
                this.requiredSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.RETURNS:
            this.state = 1064;
            this.match(languageParser.RETURNS);
            this.state = 1065;
            this.match(languageParser.T__1);
            this.state = 1069;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0)) {
                this.state = 1066;
                this.annotateElement( localctx.art );
                this.state = 1071;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1072;
            this.match(languageParser.T__3);
            this.state = 1073;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 1074;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotateElementContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateElement;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

AnnotateElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateElementContext.prototype.constructor = AnnotateElementContext;

AnnotateElementContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotateElementContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AnnotateElementContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

AnnotateElementContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

AnnotateElementContext.prototype.annotateElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateElementContext);
    } else {
        return this.getTypedRuleContext(AnnotateElementContext,i);
    }
};




languageParser.AnnotateElementContext = AnnotateElementContext;

languageParser.prototype.annotateElement = function(outer) {

    var localctx = new AnnotateElementContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 68, languageParser.RULE_annotateElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1080;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1077;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1082;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1083;
        localctx.name = this.ident('Element');
         localctx.art =  this.addDef( localctx.outer, 'elements', 'annotate', localctx.name.id, localctx.annos ) 
        this.state = 1088;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1085;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1090;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1101;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 1091;
            this.match(languageParser.T__1);
            this.state = 1095;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0)) {
                this.state = 1092;
                this.annotateElement( localctx.art );
                this.state = 1097;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1098;
            this.match(languageParser.T__3);
            this.state = 1099;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 1100;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotateActionContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateAction;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

AnnotateActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateActionContext.prototype.constructor = AnnotateActionContext;

AnnotateActionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotateActionContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

AnnotateActionContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

AnnotateActionContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

AnnotateActionContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

AnnotateActionContext.prototype.annotateParam = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateParamContext);
    } else {
        return this.getTypedRuleContext(AnnotateParamContext,i);
    }
};

AnnotateActionContext.prototype.annotateElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotateElementContext);
    } else {
        return this.getTypedRuleContext(AnnotateElementContext,i);
    }
};




languageParser.AnnotateActionContext = AnnotateActionContext;

languageParser.prototype.annotateAction = function(outer) {

    var localctx = new AnnotateActionContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 70, languageParser.RULE_annotateAction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1106;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1103;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1108;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1109;
        localctx.name = this.ident('BoundAction');
         localctx.art =  this.addDef( localctx.outer, 'actions', 'annotate', localctx.name.id, localctx.annos ) 
        this.state = 1114;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1111;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1116;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1129;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7) {
            this.state = 1117;
            this.match(languageParser.T__7);
            this.state = 1118;
            this.annotateParam( localctx.art );
            this.state = 1124;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1119;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1121;
                this.annotateParam( localctx.art );
                this.state = 1126;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1127;
            this.match(languageParser.T__8);
        }

        this.state = 1142;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.RETURNS:
            this.state = 1131;
            this.match(languageParser.RETURNS);
            this.state = 1132;
            this.match(languageParser.T__1);
            this.state = 1136;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0)) {
                this.state = 1133;
                this.annotateElement( localctx.art );
                this.state = 1138;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1139;
            this.match(languageParser.T__3);
            this.state = 1140;
            this.optionalSemi();
            break;
        case languageParser.T__0:
        case languageParser.T__3:
            this.state = 1141;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotateParamContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_annotateParam;
    this.outer = null
    this.art = null
    this.annos = []
    this.param = null; // IdentContext
    this.outer = outer || null;
    return this;
}

AnnotateParamContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotateParamContext.prototype.constructor = AnnotateParamContext;

AnnotateParamContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

AnnotateParamContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.AnnotateParamContext = AnnotateParamContext;

languageParser.prototype.annotateParam = function(outer) {

    var localctx = new AnnotateParamContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 72, languageParser.RULE_annotateParam);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1147;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1144;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1149;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1150;
        localctx.param = this.ident('Param');
         localctx.art =  this.addDef( localctx.outer, 'params', 'annotate', localctx.param.id, localctx.annos ) 
        this.state = 1155;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1152;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1157;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_constDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.c = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ConstDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstDefContext.prototype.constructor = ConstDefContext;

ConstDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ConstDefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ConstDefContext.prototype.CONST = function() {
    return this.getToken(languageParser.CONST, 0);
};

ConstDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ConstDefContext.prototype.typeSpec = function() {
    return this.getTypedRuleContext(TypeSpecContext,0);
};




languageParser.ConstDefContext = ConstDefContext;

languageParser.prototype.constDef = function(outer, loc, annos) {

    var localctx = new ConstDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 74, languageParser.RULE_constDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1158;
        localctx.c = this.match(languageParser.CONST);
        this.state = 1159;
        this.simplePath( localctx.name, 'Constant' );
         this.hanaFlavorOnly( localctx.c );
              localctx.art =  this.addDef( localctx.outer, 'artifacts', 'const', localctx.name, localctx.annos, {}, localctx.loc ) 
        this.state = 1164;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1161;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1166;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1168;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__1 || _la===languageParser.T__6) {
            this.state = 1167;
            this.typeSpec( localctx.art );
        }

        this.state = 1170;
        this.match(languageParser.T__11);
        this.state = 1171;
        this.expression();
        this.state = 1172;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendConstContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendConst;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendConstContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendConstContext.prototype.constructor = ExtendConstContext;

ExtendConstContext.prototype.CONST = function() {
    return this.getToken(languageParser.CONST, 0);
};

ExtendConstContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendConstContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendConstContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

ExtendConstContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.ExtendConstContext = ExtendConstContext;

languageParser.prototype.extendConst = function(outer, loc, annos) {

    var localctx = new ExtendConstContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 76, languageParser.RULE_extendConst);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1174;
        this.match(languageParser.CONST);
        this.state = 1175;
        this.simplePath( localctx.name, 'Constant' );
         localctx.art =  this.addItem( localctx.outer, 'extensions', 'extend', localctx.annos,
                                   { name: localctx.name, expectedKind: 'const' },
                                   localctx.loc )  
        this.state = 1179;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 1177;
            this.match(languageParser.WITH);
             this.noSemicolonHere(); 
        }

        this.state = 1184;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1181;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1186;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1187;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumSymbolDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_enumSymbolDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.val = null; // ValueContext
    this.outer = outer || null;
    return this;
}

EnumSymbolDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumSymbolDefContext.prototype.constructor = EnumSymbolDefContext;

EnumSymbolDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

EnumSymbolDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

EnumSymbolDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

EnumSymbolDefContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};




languageParser.EnumSymbolDefContext = EnumSymbolDefContext;

languageParser.prototype.enumSymbolDef = function(outer) {

    var localctx = new EnumSymbolDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 78, languageParser.RULE_enumSymbolDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1192;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1189;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1194;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1195;
        localctx.name = this.ident('Enum');
         localctx.art =  this.addDef( localctx.outer, 'enum', 'enum', localctx.name.id, localctx.annos ) 
        this.state = 1200;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1197;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1202;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__11) {
            this.state = 1203;
            this.match(languageParser.T__11);
            this.state = 1204;
            localctx.val = this.value();
             localctx.art.value = localctx.val.val; 
            this.state = 1209;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 1206;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 1211;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1214;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementDefOrExtendContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementDefOrExtend;
    this.outer = null
    this.annos = []
    this.art = null; // ElementDefInnerContext
    this.outer = outer || null;
    return this;
}

ElementDefOrExtendContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementDefOrExtendContext.prototype.constructor = ElementDefOrExtendContext;

ElementDefOrExtendContext.prototype.EXTEND = function() {
    return this.getToken(languageParser.EXTEND, 0);
};

ElementDefOrExtendContext.prototype.extendElement = function() {
    return this.getTypedRuleContext(ExtendElementContext,0);
};

ElementDefOrExtendContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ElementDefOrExtendContext.prototype.elementDefInner = function() {
    return this.getTypedRuleContext(ElementDefInnerContext,0);
};




languageParser.ElementDefOrExtendContext = ElementDefOrExtendContext;

languageParser.prototype.elementDefOrExtend = function(outer) {

    var localctx = new ElementDefOrExtendContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 80, languageParser.RULE_elementDefOrExtend);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1219;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1216;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1221;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1225;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1222;
            this.match(languageParser.EXTEND);
            this.state = 1223;
            this.extendElement( localctx.outer, this.startLocation(), localctx.annos );
            break;

        case 2:
            this.state = 1224;
            localctx.art = this.elementDefInner( localctx.outer, this.startLocation(), localctx.annos, true );
            break;

        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ if (localctx.art) this.attachLocation(localctx.art.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementDef;
    this.outer = null
    this.annos = []
    this.art = null; // ElementDefInnerContext
    this.outer = outer || null;
    return this;
}

ElementDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementDefContext.prototype.constructor = ElementDefContext;

ElementDefContext.prototype.elementDefInner = function() {
    return this.getTypedRuleContext(ElementDefInnerContext,0);
};

ElementDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.ElementDefContext = ElementDefContext;

languageParser.prototype.elementDef = function(outer) {

    var localctx = new ElementDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 82, languageParser.RULE_elementDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1230;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1227;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1232;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1233;
        localctx.art = this.elementDefInner( localctx.outer, this.startLocation(), localctx.annos, false );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MixinElementDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_mixinElementDef;
    this.outer = null
    this.art = null
    this.name = null; // IdentContext
    this.as = null; // Token
    this.outer = outer || null;
    return this;
}

MixinElementDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MixinElementDefContext.prototype.constructor = MixinElementDefContext;

MixinElementDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

MixinElementDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

MixinElementDefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

MixinElementDefContext.prototype.typeAssociationBase = function() {
    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
};

MixinElementDefContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

MixinElementDefContext.prototype.typeToMany = function() {
    return this.getTypedRuleContext(TypeToManyContext,0);
};

MixinElementDefContext.prototype.typeToOne = function() {
    return this.getTypedRuleContext(TypeToOneContext,0);
};

MixinElementDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

MixinElementDefContext.prototype.typeAssociationCont = function() {
    return this.getTypedRuleContext(TypeAssociationContContext,0);
};




languageParser.MixinElementDefContext = MixinElementDefContext;

languageParser.prototype.mixinElementDef = function(outer) {

    var localctx = new MixinElementDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 84, languageParser.RULE_mixinElementDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1235;
        localctx.name = this.ident('Mixin');
         localctx.art =  this.addDef( localctx.outer, 'mixin', 'element', localctx.name.id ) 
        this.state = 1260;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__6:
            this.state = 1237;
            this.match(languageParser.T__6);
            this.state = 1254;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1238;
                this.typeAssociationBase( localctx.art, false );
                this.state = 1242;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1239;
                    this.typeToMany( localctx.art );
                    break;

                case 2:
                    this.state = 1240;
                    this.typeToOne( localctx.art );
                    break;

                case 3:
                    this.state = 1241;
                    this.simplePath( localctx.art.target, 'artref' );
                    break;

                }
                this.state = 1245;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__1 || _la===languageParser.ON) {
                    this.state = 1244;
                    this.typeAssociationCont( localctx.art );
                }

                break;

            case 2:
                this.state = 1247;
                this.typeRefOptArgs( localctx.art );
                this.state = 1252;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__11) {
                    this.state = 1248;
                    localctx.as = this.match(languageParser.T__11);
                    this.state = 1249;
                    this.expression();
                     this.hanaFlavorOnly( 'Calculated fields are not supported yet', localctx.as ); 
                }

                break;

            }
            break;
        case languageParser.T__11:
            this.state = 1256;
            localctx.as = this.match(languageParser.T__11);
            this.state = 1257;
            this.expression();
             this.hanaFlavorOnly( 'Calculated fields are not supported yet', localctx.as ); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1262;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 2 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MisplacedAnnotationsContext(parser, parent, invokingState, annos, messageId) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_misplacedAnnotations;
    this.annos = null
    this.messageId = null
    this.annos = annos || null;
    this.messageId = messageId || null;
    return this;
}

MisplacedAnnotationsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MisplacedAnnotationsContext.prototype.constructor = MisplacedAnnotationsContext;

MisplacedAnnotationsContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};




languageParser.MisplacedAnnotationsContext = MisplacedAnnotationsContext;

languageParser.prototype.misplacedAnnotations = function(annos, messageId) {

    var localctx = new MisplacedAnnotationsContext(this, this._ctx, this.state, annos, messageId);
    this.enterRule(localctx, 86, languageParser.RULE_misplacedAnnotations);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1265; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1264;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1267; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===languageParser.T__9);
         if (localctx.messageId)           // issue Warning (is standard severity)
                this.message( messageId, this.tokenLocation( localctx.start, this.getCurrentToken() ) );
            
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementDefInnerContext(parser, parent, invokingState, outer, loc, annos, allowEq) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementDefInner;
    this.outer = null
    this.loc = null
    this.annos = null
    this.allowEq = null
    this.art = null
    this.virtual = null; // Token
    this.key = null; // Token
    this.masked = null; // Token
    this.name = null; // IdentContext
    this.one = null; // Token
    this.many = null; // Token
    this.array = null; // Token
    this.of = null; // Token
    this.l = null; // Token
    this.as = null; // Token
    this.eq = null; // Token
    this.e = null; // ExpressionContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    this.allowEq = allowEq || null;
    return this;
}

ElementDefInnerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementDefInnerContext.prototype.constructor = ElementDefInnerContext;

ElementDefInnerContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ElementDefInnerContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

ElementDefInnerContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ElementDefInnerContext.prototype.ELEMENT = function() {
    return this.getToken(languageParser.ELEMENT, 0);
};

ElementDefInnerContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ElementDefInnerContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementDefInnerContext.prototype.VIRTUAL = function() {
    return this.getToken(languageParser.VIRTUAL, 0);
};

ElementDefInnerContext.prototype.KEY = function() {
    return this.getToken(languageParser.KEY, 0);
};

ElementDefInnerContext.prototype.MASKED = function() {
    return this.getToken(languageParser.MASKED, 0);
};

ElementDefInnerContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

ElementDefInnerContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

ElementDefInnerContext.prototype.typeAssociationBase = function() {
    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
};

ElementDefInnerContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

ElementDefInnerContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

ElementDefInnerContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

ElementDefInnerContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

ElementDefInnerContext.prototype.LOCALIZED = function() {
    return this.getToken(languageParser.LOCALIZED, 0);
};

ElementDefInnerContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ElementDefInnerContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ElementDefInnerContext.prototype.typeCompoStruct = function() {
    return this.getTypedRuleContext(TypeCompoStructContext,0);
};

ElementDefInnerContext.prototype.typeToMany = function() {
    return this.getTypedRuleContext(TypeToManyContext,0);
};

ElementDefInnerContext.prototype.typeAssociationElementCont = function() {
    return this.getTypedRuleContext(TypeAssociationElementContContext,0);
};

ElementDefInnerContext.prototype.typeToOne = function() {
    return this.getTypedRuleContext(TypeToOneContext,0);
};

ElementDefInnerContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ElementDefInnerContext.prototype.misplacedAnnotations = function() {
    return this.getTypedRuleContext(MisplacedAnnotationsContext,0);
};

ElementDefInnerContext.prototype.ONE = function() {
    return this.getToken(languageParser.ONE, 0);
};

ElementDefInnerContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};

ElementDefInnerContext.prototype.elementProperties = function() {
    return this.getTypedRuleContext(ElementPropertiesContext,0);
};

ElementDefInnerContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

ElementDefInnerContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.ElementDefInnerContext = ElementDefInnerContext;

languageParser.prototype.elementDefInner = function(outer, loc, annos, allowEq) {

    var localctx = new ElementDefInnerContext(this, this._ctx, this.state, outer, loc, annos, allowEq);
    this.enterRule(localctx, 88, languageParser.RULE_elementDefInner);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1272;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
        if(la_===1) {
            this.state = 1271;
            localctx.virtual = this.match(languageParser.VIRTUAL);

        }
        this.state = 1275;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.KEY) {
            this.state = 1274;
            localctx.key = this.match(languageParser.KEY);
        }

        this.state = 1278;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
        if(la_===1) {
            this.state = 1277;
            localctx.masked = this.match(languageParser.MASKED);

        }
        this.state = 1281;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
        if(la_===1) {
            this.state = 1280;
            this.match(languageParser.ELEMENT);

        }
        this.state = 1283;
        localctx.name = this.ident('Element');
         localctx.art =  this.addDef( localctx.outer, 'elements', 'element', localctx.name.id, localctx.annos,
                                  { virtual: localctx.virtual, key: localctx.key, masked: localctx.masked },
                                  localctx.loc ) 
        this.state = 1288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1285;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1290;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1451;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 1291;
            this.typeStruct( localctx.art );
            this.state = 1296;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.NOT:
            case languageParser.NULL:
                this.state = 1292;
                this.nullability( localctx.art );
                this.state = 1293;
                this.requiredSemi();
                break;
            case languageParser.T__0:
            case languageParser.T__3:
            case languageParser.T__9:
            case languageParser.KEY:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AFTER:
            case languageParser.ALWAYS:
            case languageParser.ANALYSIS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.ASYNC:
            case languageParser.ASYNCHRONOUS:
            case languageParser.AUTO:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.CACHE:
            case languageParser.COLUMN:
            case languageParser.COLUMNS:
            case languageParser.COMPOSITION:
            case languageParser.CONFIGURATION:
            case languageParser.CONST:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.CURRENT:
            case languageParser.CYCLE:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DEPENDS:
            case languageParser.DESC:
            case languageParser.DETECTION:
            case languageParser.DISABLED:
            case languageParser.DOCUMENTS:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.ENABLED:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.EVERY:
            case languageParser.ESCAPE:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXISTING:
            case languageParser.EXTEND:
            case languageParser.EXTENDED:
            case languageParser.FAST:
            case languageParser.FIRST:
            case languageParser.FLUSH:
            case languageParser.FULL:
            case languageParser.FULLTEXT:
            case languageParser.FUNCTION:
            case languageParser.FUZZY:
            case languageParser.GENERATED:
            case languageParser.GETNUMSERVERS:
            case languageParser.GROUP:
            case languageParser.HANA:
            case languageParser.HASH:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.IDENTITY:
            case languageParser.INCREMENT:
            case languageParser.INDEX:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.KEEPING:
            case languageParser.LANGUAGE:
            case languageParser.LAST:
            case languageParser.LAYOUT:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MAXVALUE:
            case languageParser.MERGE:
            case languageParser.MIGRATION:
            case languageParser.MINING:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MINUTES:
            case languageParser.MINVALUE:
            case languageParser.MIME:
            case languageParser.MIXIN:
            case languageParser.MODE:
            case languageParser.MONTH:
            case languageParser.NAME:
            case languageParser.NAMESPACE:
            case languageParser.NO:
            case languageParser.NULLS:
            case languageParser.OFF:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.ONLY:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OTHERS:
            case languageParser.OUTER:
            case languageParser.OVERLAY:
            case languageParser.QUEUE:
            case languageParser.PARAMETERS:
            case languageParser.PARTITION:
            case languageParser.PARTITIONING:
            case languageParser.PARTITIONS:
            case languageParser.PHRASE:
            case languageParser.PREPROCESS:
            case languageParser.PRIORITY:
            case languageParser.PROJECTION:
            case languageParser.RANGE:
            case languageParser.RATIO:
            case languageParser.REDIRECTED:
            case languageParser.RESET:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.ROUNDROBIN:
            case languageParser.ROW:
            case languageParser.SEARCH:
            case languageParser.SECOND:
            case languageParser.SEPARATORS:
            case languageParser.SERVICE:
            case languageParser.START:
            case languageParser.STORAGE:
            case languageParser.STORE:
            case languageParser.SUBTYPE:
            case languageParser.SYNC:
            case languageParser.SYNCHRONOUS:
            case languageParser.TABLE:
            case languageParser.TECHNICAL:
            case languageParser.TEMPORARY:
            case languageParser.TEXT:
            case languageParser.THEN:
            case languageParser.TOKEN:
            case languageParser.TOP:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.UNIQUE:
            case languageParser.UNLOAD:
            case languageParser.USING:
            case languageParser.VALUE:
            case languageParser.VALUES:
            case languageParser.VIEW:
            case languageParser.VIRTUAL:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 1295;
                this.optionalSemi();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.T__6:
            this.state = 1298;
            this.match(languageParser.T__6);
            this.state = 1435;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1299;
                this.typeStruct( localctx.art );
                this.state = 1301;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.NOT || _la===languageParser.NULL) {
                    this.state = 1300;
                    this.nullability( localctx.art );
                }

                this.state = 1304;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__9) {
                    this.state = 1303;
                    this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-struct' );
                }

                this.state = 1306;
                this.requiredSemi();
                break;

            case 2:
                this.state = 1308;
                this.typeAssociationBase( localctx.art, true );
                this.state = 1331;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1309;
                    this.typeStruct( localctx.art.target, true );
                    this.state = 1310;
                    this.optionalSemi();
                    break;

                case 2:
                    this.state = 1312;
                    localctx.one = this.match(languageParser.ONE);
                     this.setMaxCardinality( localctx.art, localctx.one, this.numberLiteral( localctx.one, null, '1' ) ); 
                    this.state = 1314;
                    this.typeCompoStruct( localctx.art.target );
                    this.state = 1315;
                    this.optionalSemi();
                    break;

                case 3:
                    this.state = 1317;
                    localctx.many = this.match(languageParser.MANY);
                     this.setMaxCardinality( localctx.art, localctx.many, { literal: 'string', val: '*' } ); 
                    this.state = 1319;
                    this.typeCompoStruct( localctx.art.target );
                    this.state = 1320;
                    this.optionalSemi();
                    break;

                case 4:
                    this.state = 1322;
                    this.typeToMany( localctx.art );
                    this.state = 1323;
                    this.typeAssociationElementCont( localctx.art, localctx.annos );
                    break;

                case 5:
                    this.state = 1325;
                    this.typeToOne( localctx.art );
                    this.state = 1326;
                    this.typeAssociationElementCont( localctx.art, localctx.annos );
                    break;

                case 6:
                    this.state = 1328;
                    this.simplePath( localctx.art.target, 'artref' );
                    this.state = 1329;
                    this.typeAssociationElementCont( localctx.art, localctx.annos );
                    break;

                }
                break;

            case 3:
                this.state = 1333;
                localctx.array = this.match(languageParser.ARRAY);
                this.state = 1334;
                localctx.of = this.match(languageParser.OF);
                 localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
                this.state = 1367;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1336;
                    this.typeStruct( localctx.art.items );
                    this.state = 1338;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.T__9) {
                        this.state = 1337;
                        this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-struct' );
                    }

                    break;

                case 2:
                    this.state = 1340;
                    this.typeTypeOf( localctx.art.items );
                    this.state = 1344;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__9) {
                        this.state = 1341;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1346;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;

                case 3:
                    this.state = 1347;
                    this.typeRefOptArgs( localctx.art.items );
                    this.state = 1351;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__9) {
                        this.state = 1348;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1353;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 1365;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.ENUM) {
                        this.state = 1354;
                        this.match(languageParser.ENUM);
                        this.state = 1355;
                        this.match(languageParser.T__1);
                        this.state = 1357; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            this.state = 1356;
                            this.enumSymbolDef( localctx.art.items );
                            this.state = 1359; 
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0));
                        this.state = 1361;
                        this.match(languageParser.T__3);
                        this.state = 1363;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===languageParser.T__9) {
                            this.state = 1362;
                            this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-enum' );
                        }

                    }

                    break;

                }
                this.state = 1369;
                this.requiredSemi();
                break;

            case 4:
                this.state = 1371;
                this.typeTypeOf( localctx.art );
                this.state = 1373;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__11 || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (languageParser.AS - 39)) | (1 << (languageParser.NOT - 39)) | (1 << (languageParser.NULL - 39)))) !== 0) || _la===languageParser.DEFAULT || _la===languageParser.GENERATED) {
                    this.state = 1372;
                    this.elementProperties( localctx.art );
                }

                this.state = 1378;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__9) {
                    this.state = 1375;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1380;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1381;
                this.requiredSemi();
                break;

            case 5:
                this.state = 1383;
                localctx.l = this.match(languageParser.LOCALIZED);
                 localctx.art.localized = this.tokenLocation( localctx.l, undefined, true ); 
                this.state = 1385;
                this.typeRefOptArgs( localctx.art );
                this.state = 1389;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__9) {
                    this.state = 1386;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1391;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1399;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__11 || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (languageParser.AS - 39)) | (1 << (languageParser.NOT - 39)) | (1 << (languageParser.NULL - 39)))) !== 0) || _la===languageParser.DEFAULT || _la===languageParser.GENERATED) {
                    this.state = 1392;
                    this.elementProperties( localctx.art );
                    this.state = 1396;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__9) {
                        this.state = 1393;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 1398;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                this.state = 1401;
                this.requiredSemi();
                break;

            case 6:
                this.state = 1403;
                this.typeRefOptArgs( localctx.art );
                this.state = 1407;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__9) {
                    this.state = 1404;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 1409;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1431;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                case languageParser.ENUM:
                	this.state = 1410;
                	this.match(languageParser.ENUM);
                	this.state = 1411;
                	this.match(languageParser.T__1);
                	this.state = 1413; 
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	do {
                	    this.state = 1412;
                	    this.enumSymbolDef( localctx.art );
                	    this.state = 1415; 
                	    this._errHandler.sync(this);
                	    _la = this._input.LA(1);
                	} while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0));
                	this.state = 1417;
                	this.match(languageParser.T__3);
                	this.state = 1419;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===languageParser.T__11 || ((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (languageParser.AS - 39)) | (1 << (languageParser.NOT - 39)) | (1 << (languageParser.NULL - 39)))) !== 0) || _la===languageParser.DEFAULT || _la===languageParser.GENERATED) {
                	    this.state = 1418;
                	    this.elementProperties( localctx.art );
                	}

                	this.state = 1422;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	if(_la===languageParser.T__9) {
                	    this.state = 1421;
                	    this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-enum' );
                	}

                	break;
                case languageParser.T__11:
                case languageParser.AS:
                case languageParser.NOT:
                case languageParser.NULL:
                case languageParser.DEFAULT:
                case languageParser.GENERATED:
                	this.state = 1424;
                	this.elementProperties( localctx.art );
                	this.state = 1428;
                	this._errHandler.sync(this);
                	_la = this._input.LA(1);
                	while(_la===languageParser.T__9) {
                	    this.state = 1425;
                	    this.annotationAssignment_ll1( localctx.annos );
                	    this.state = 1430;
                	    this._errHandler.sync(this);
                	    _la = this._input.LA(1);
                	}
                	break;
                case languageParser.T__0:
                case languageParser.T__3:
                	break;
                default:
                	break;
                }
                this.state = 1433;
                this.requiredSemi();
                break;

            }
            break;
        case languageParser.T__11:
        case languageParser.AS:
            this.state = 1439;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.AS:
                this.state = 1437;
                localctx.as = this.match(languageParser.AS);
                break;
            case languageParser.T__11:
                this.state = 1438;
                localctx.eq = this.match(languageParser.T__11);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1441;
            localctx.e = this.expression();

                    if (localctx.as || !localctx.allowEq || localctx.e.expr && !localctx.e.expr.literal )
                      this.hanaFlavorOnly( 'Calculated fields are not supported yet', localctx.as || localctx.eq );
                    else if (localctx.e.expr)
                      localctx.art.value = localctx.e.expr;
                  
            this.state = 1446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__9) {
                this.state = 1443;
                this.annotationAssignment_ll1( localctx.annos );
                this.state = 1448;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1449;
            this.requiredSemi();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 6 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendElementContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendElement;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.expected = null; // Token
    this.name = null; // IdentContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendElementContext.prototype.constructor = ExtendElementContext;

ExtendElementContext.prototype.extendWithOptElements = function() {
    return this.getTypedRuleContext(ExtendWithOptElementsContext,0);
};

ExtendElementContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ExtendElementContext.prototype.ELEMENT = function() {
    return this.getToken(languageParser.ELEMENT, 0);
};




languageParser.ExtendElementContext = ExtendElementContext;

languageParser.prototype.extendElement = function(outer, loc, annos) {

    var localctx = new ExtendElementContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 90, languageParser.RULE_extendElement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1454;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
        if(la_===1) {
            this.state = 1453;
            localctx.expected = this.match(languageParser.ELEMENT);

        }
        this.state = 1456;
        localctx.name = this.ident('Element');
         localctx.art =  this.addDef( localctx.outer, 'elements', 'extend', localctx.name.id, localctx.annos,
                                  { expectedKind: localctx.expected && 'element' },
                                  localctx.loc ) 
        this.state = 1458;
        this.extendWithOptElements( localctx.art, localctx.annos );
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectItemDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_selectItemDef;
    this.outer = null
    this.art = {}
    this.alias = null
    this.annos = []
    this.item = {}
    this.key = null; // Token
    this.e = null; // ExpressionContext
    this.n1 = null; // IdentContext
    this.n2 = null; // IdentContext
    this.re = null; // Token
    this.to = null; // Token
    this.outer = outer || null;
    return this;
}

SelectItemDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemDefContext.prototype.constructor = SelectItemDefContext;

SelectItemDefContext.prototype.selectItemInline = function() {
    return this.getTypedRuleContext(SelectItemInlineContext,0);
};

SelectItemDefContext.prototype.annotationAssignment_atn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_atnContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_atnContext,i);
    }
};

SelectItemDefContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectItemDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

SelectItemDefContext.prototype.KEY = function() {
    return this.getToken(languageParser.KEY, 0);
};

SelectItemDefContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

SelectItemDefContext.prototype.DOTbeforeBRACE = function() {
    return this.getToken(languageParser.DOTbeforeBRACE, 0);
};

SelectItemDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

SelectItemDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

SelectItemDefContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

SelectItemDefContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

SelectItemDefContext.prototype.REDIRECTED = function() {
    return this.getToken(languageParser.REDIRECTED, 0);
};

SelectItemDefContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};




languageParser.SelectItemDefContext = SelectItemDefContext;

languageParser.prototype.selectItemDef = function(outer) {

    var localctx = new SelectItemDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 92, languageParser.RULE_selectItemDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1463;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1460;
            this.annotationAssignment_atn( localctx.annos );
            this.state = 1465;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1467;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.KEY) {
            this.state = 1466;
            localctx.key = this.match(languageParser.KEY);
        }

        this.state = 1497;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__5:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.T__23:
        case languageParser.T__24:
        case languageParser.T__26:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.state = 1469;
            localctx.e = this.expression();
            this.state = 1477;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.AS:
            	this.state = 1470;
            	this.match(languageParser.AS);
            	this.state = 1471;
            	localctx.n1 = this.ident('Item');
            	 localctx.alias=localctx.n1.id 
            	break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AFTER:
            case languageParser.ALWAYS:
            case languageParser.ANALYSIS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.ASYNC:
            case languageParser.ASYNCHRONOUS:
            case languageParser.AUTO:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.CACHE:
            case languageParser.COLUMN:
            case languageParser.COLUMNS:
            case languageParser.COMPOSITION:
            case languageParser.CONFIGURATION:
            case languageParser.CONST:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.CURRENT:
            case languageParser.CYCLE:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DEPENDS:
            case languageParser.DESC:
            case languageParser.DETECTION:
            case languageParser.DISABLED:
            case languageParser.DOCUMENTS:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.ENABLED:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.EVERY:
            case languageParser.ESCAPE:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXISTING:
            case languageParser.EXTEND:
            case languageParser.EXTENDED:
            case languageParser.FAST:
            case languageParser.FIRST:
            case languageParser.FLUSH:
            case languageParser.FULL:
            case languageParser.FULLTEXT:
            case languageParser.FUNCTION:
            case languageParser.FUZZY:
            case languageParser.GENERATED:
            case languageParser.GETNUMSERVERS:
            case languageParser.GROUP:
            case languageParser.HANA:
            case languageParser.HASH:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.IDENTITY:
            case languageParser.INCREMENT:
            case languageParser.INDEX:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.KEEPING:
            case languageParser.LANGUAGE:
            case languageParser.LAST:
            case languageParser.LAYOUT:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MAXVALUE:
            case languageParser.MERGE:
            case languageParser.MIGRATION:
            case languageParser.MINING:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MINUTES:
            case languageParser.MINVALUE:
            case languageParser.MIME:
            case languageParser.MIXIN:
            case languageParser.MODE:
            case languageParser.MONTH:
            case languageParser.NAME:
            case languageParser.NAMESPACE:
            case languageParser.NO:
            case languageParser.NULLS:
            case languageParser.OFF:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.ONLY:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OTHERS:
            case languageParser.OUTER:
            case languageParser.OVERLAY:
            case languageParser.QUEUE:
            case languageParser.PARAMETERS:
            case languageParser.PARTITION:
            case languageParser.PARTITIONING:
            case languageParser.PARTITIONS:
            case languageParser.PHRASE:
            case languageParser.PREPROCESS:
            case languageParser.PRIORITY:
            case languageParser.PROJECTION:
            case languageParser.RANGE:
            case languageParser.RATIO:
            case languageParser.REDIRECTED:
            case languageParser.RESET:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.ROUNDROBIN:
            case languageParser.ROW:
            case languageParser.SEARCH:
            case languageParser.SECOND:
            case languageParser.SEPARATORS:
            case languageParser.SERVICE:
            case languageParser.START:
            case languageParser.STORAGE:
            case languageParser.STORE:
            case languageParser.SUBTYPE:
            case languageParser.SYNC:
            case languageParser.SYNCHRONOUS:
            case languageParser.TABLE:
            case languageParser.TECHNICAL:
            case languageParser.TEMPORARY:
            case languageParser.TEXT:
            case languageParser.THEN:
            case languageParser.TOKEN:
            case languageParser.TOP:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.UNIQUE:
            case languageParser.UNLOAD:
            case languageParser.USING:
            case languageParser.VALUE:
            case languageParser.VALUES:
            case languageParser.VIEW:
            case languageParser.VIRTUAL:
            case languageParser.YEAR:
            case languageParser.Identifier:
            	this.state = 1474;
            	localctx.n2 = this.ident('Item');
            	 localctx.alias=localctx.n2.id 
            	break;
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__6:
            case languageParser.T__9:
            case languageParser.FROM:
            case languageParser.DOTbeforeBRACE:
            	break;
            default:
            	break;
            }

                    localctx.art =  this.addItem( localctx.outer, 'columns', null,
                                         localctx.annos, { value: localctx.e.expr, name: localctx.alias, key: localctx.key })
                  
            this.state = 1483;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__1:
            	this.state = 1480;
            	this.selectItemInline();
            	break;
            case languageParser.DOTbeforeBRACE:
            	this.state = 1481;
            	this.match(languageParser.DOTbeforeBRACE);
            	this.state = 1482;
            	this.selectItemInline();
            	break;
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__6:
            case languageParser.T__9:
            case languageParser.FROM:
            	break;
            default:
            	break;
            }
            break;
        case languageParser.T__1:
            this.state = 1485;
            this.selectItemInline();
            this.state = 1493;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.AS:
                this.state = 1486;
                this.match(languageParser.AS);
                this.state = 1487;
                localctx.n1 = this.ident('Item');
                 localctx.alias=localctx.n1.id 
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AFTER:
            case languageParser.ALWAYS:
            case languageParser.ANALYSIS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.ASYNC:
            case languageParser.ASYNCHRONOUS:
            case languageParser.AUTO:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.CACHE:
            case languageParser.COLUMN:
            case languageParser.COLUMNS:
            case languageParser.COMPOSITION:
            case languageParser.CONFIGURATION:
            case languageParser.CONST:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.CURRENT:
            case languageParser.CYCLE:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DEPENDS:
            case languageParser.DESC:
            case languageParser.DETECTION:
            case languageParser.DISABLED:
            case languageParser.DOCUMENTS:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.ENABLED:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.EVERY:
            case languageParser.ESCAPE:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXISTING:
            case languageParser.EXTEND:
            case languageParser.EXTENDED:
            case languageParser.FAST:
            case languageParser.FIRST:
            case languageParser.FLUSH:
            case languageParser.FULL:
            case languageParser.FULLTEXT:
            case languageParser.FUNCTION:
            case languageParser.FUZZY:
            case languageParser.GENERATED:
            case languageParser.GETNUMSERVERS:
            case languageParser.GROUP:
            case languageParser.HANA:
            case languageParser.HASH:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.IDENTITY:
            case languageParser.INCREMENT:
            case languageParser.INDEX:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.KEEPING:
            case languageParser.LANGUAGE:
            case languageParser.LAST:
            case languageParser.LAYOUT:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MAXVALUE:
            case languageParser.MERGE:
            case languageParser.MIGRATION:
            case languageParser.MINING:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MINUTES:
            case languageParser.MINVALUE:
            case languageParser.MIME:
            case languageParser.MIXIN:
            case languageParser.MODE:
            case languageParser.MONTH:
            case languageParser.NAME:
            case languageParser.NAMESPACE:
            case languageParser.NO:
            case languageParser.NULLS:
            case languageParser.OFF:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.ONLY:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OTHERS:
            case languageParser.OUTER:
            case languageParser.OVERLAY:
            case languageParser.QUEUE:
            case languageParser.PARAMETERS:
            case languageParser.PARTITION:
            case languageParser.PARTITIONING:
            case languageParser.PARTITIONS:
            case languageParser.PHRASE:
            case languageParser.PREPROCESS:
            case languageParser.PRIORITY:
            case languageParser.PROJECTION:
            case languageParser.RANGE:
            case languageParser.RATIO:
            case languageParser.REDIRECTED:
            case languageParser.RESET:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.ROUNDROBIN:
            case languageParser.ROW:
            case languageParser.SEARCH:
            case languageParser.SECOND:
            case languageParser.SEPARATORS:
            case languageParser.SERVICE:
            case languageParser.START:
            case languageParser.STORAGE:
            case languageParser.STORE:
            case languageParser.SUBTYPE:
            case languageParser.SYNC:
            case languageParser.SYNCHRONOUS:
            case languageParser.TABLE:
            case languageParser.TECHNICAL:
            case languageParser.TEMPORARY:
            case languageParser.TEXT:
            case languageParser.THEN:
            case languageParser.TOKEN:
            case languageParser.TOP:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.UNIQUE:
            case languageParser.UNLOAD:
            case languageParser.USING:
            case languageParser.VALUE:
            case languageParser.VALUES:
            case languageParser.VIEW:
            case languageParser.VIRTUAL:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 1490;
                localctx.n2 = this.ident('Item');
                 localctx.alias=localctx.n2.id 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

                    localctx.art =  this.addItem( localctx.outer, 'columns', null,
                                         localctx.annos, { name: localctx.alias, key: localctx.key })
                  
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1502;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1499;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1504;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__6) {
            this.state = 1505;
            this.match(languageParser.T__6);
            this.state = 1512;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1506;
                localctx.re = this.match(languageParser.REDIRECTED);
                this.state = 1507;
                localctx.to = this.match(languageParser.TO);
                 localctx.art.redirected = this.tokenLocation(localctx.re,localctx.to,true); localctx.art.target = {}; 
                this.state = 1509;
                this.simplePath( localctx.art.target, 'artref' );
                break;

            case 2:
                this.state = 1510;
                this.typeTypeOf( localctx.art );
                break;

            case 3:
                this.state = 1511;
                this.typeRefOptArgs( localctx.art );
                break;

            }

                    localctx.art._typeIsExplicit = true; // FIXME: We probably need to deal with explicit vs. propagated in more places
                  
        }

        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterListDefContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_parameterListDef;
    this.art = null
    this.art = art || null;
    return this;
}

ParameterListDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListDefContext.prototype.constructor = ParameterListDefContext;

ParameterListDefContext.prototype.parameterDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterDefContext);
    } else {
        return this.getTypedRuleContext(ParameterDefContext,i);
    }
};




languageParser.ParameterListDefContext = ParameterListDefContext;

languageParser.prototype.parameterListDef = function(art) {

    var localctx = new ParameterListDefContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 94, languageParser.RULE_parameterListDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1518;
        this.match(languageParser.T__7);
        this.state = 1528;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0)) {
            this.state = 1519;
            this.parameterDef( localctx.art );
            this.state = 1525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1520;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1522;
                this.parameterDef( localctx.art );
                this.state = 1527;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1530;
        this.match(languageParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_parameterDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ParameterDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDefContext.prototype.constructor = ParameterDefContext;

ParameterDefContext.prototype.typeSpec = function() {
    return this.getTypedRuleContext(TypeSpecContext,0);
};

ParameterDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ParameterDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

ParameterDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ParameterDefContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};




languageParser.ParameterDefContext = ParameterDefContext;

languageParser.prototype.parameterDef = function(outer) {

    var localctx = new ParameterDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 96, languageParser.RULE_parameterDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1535;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1532;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1537;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1538;
        localctx.name = this.ident('Param');
         localctx.art =  this.addDef( localctx.outer, 'params', 'param', localctx.name.id, localctx.annos ) 
        this.state = 1543;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1540;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1545;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1546;
        this.typeSpec( localctx.art );
        this.state = 1548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.NOT || _la===languageParser.NULL) {
            this.state = 1547;
            this.nullability( localctx.art );
        }

        this.state = 1553;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1550;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1555;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EntityParametersContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_entityParameters;
    this.art = null
    this.art = art || null;
    return this;
}

EntityParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityParametersContext.prototype.constructor = EntityParametersContext;

EntityParametersContext.prototype.entityParameterDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EntityParameterDefContext);
    } else {
        return this.getTypedRuleContext(EntityParameterDefContext,i);
    }
};




languageParser.EntityParametersContext = EntityParametersContext;

languageParser.prototype.entityParameters = function(art) {

    var localctx = new EntityParametersContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 98, languageParser.RULE_entityParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1556;
        this.match(languageParser.T__7);
        this.state = 1566;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0)) {
            this.state = 1557;
            this.entityParameterDef( localctx.art );
            this.state = 1563;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1558;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 1560;
                this.entityParameterDef( localctx.art );
                this.state = 1565;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 1568;
        this.match(languageParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EntityParameterDefContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_entityParameterDef;
    this.outer = null
    this.art = null
    this.annos = []
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

EntityParameterDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityParameterDefContext.prototype.constructor = EntityParameterDefContext;

EntityParameterDefContext.prototype.typeSpec = function() {
    return this.getTypedRuleContext(TypeSpecContext,0);
};

EntityParameterDefContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

EntityParameterDefContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

EntityParameterDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};




languageParser.EntityParameterDefContext = EntityParameterDefContext;

languageParser.prototype.entityParameterDef = function(outer) {

    var localctx = new EntityParameterDefContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 100, languageParser.RULE_entityParameterDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1573;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1570;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 1575;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1576;
        localctx.name = this.ident('Param');
         localctx.art =  this.addDef( localctx.outer, 'params', 'param', localctx.name.id, localctx.annos ) 
        this.state = 1581;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1578;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1583;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1584;
        this.typeSpec( localctx.art );
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NullabilityContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_nullability;
    this.art = null
    this.not = null; // Token
    this.n1 = null; // Token
    this.n2 = null; // Token
    this.art = art || null;
    return this;
}

NullabilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NullabilityContext.prototype.constructor = NullabilityContext;

NullabilityContext.prototype.NOT = function() {
    return this.getToken(languageParser.NOT, 0);
};

NullabilityContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};




languageParser.NullabilityContext = NullabilityContext;

languageParser.prototype.nullability = function(art) {

    var localctx = new NullabilityContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 102, languageParser.RULE_nullability);
    try {
        this.state = 1591;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1586;
            localctx.not = this.match(languageParser.NOT);
            this.state = 1587;
            localctx.n1 = this.match(languageParser.NULL);
             localctx.art.notNull = this.tokenLocation(localctx.not,localctx.n1,true); 
            break;
        case languageParser.NULL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1589;
            localctx.n2 = this.match(languageParser.NULL);
             localctx.art.notNull = this.tokenLocation(localctx.n2,undefined,false); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementPropertiesContext(parser, parent, invokingState, elem) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_elementProperties;
    this.elem = null
    this.expr = null; // ExpressionContext
    this.gen = null; // Token
    this.as = null; // Token
    this.eq = null; // Token
    this.elem = elem || null;
    return this;
}

ElementPropertiesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementPropertiesContext.prototype.constructor = ElementPropertiesContext;

ElementPropertiesContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

ElementPropertiesContext.prototype.DEFAULT = function() {
    return this.getToken(languageParser.DEFAULT, 0);
};

ElementPropertiesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ElementPropertiesContext.prototype.GENERATED = function() {
    return this.getToken(languageParser.GENERATED, 0);
};

ElementPropertiesContext.prototype.ALWAYS = function() {
    return this.getToken(languageParser.ALWAYS, 0);
};

ElementPropertiesContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ElementPropertiesContext.prototype.BY = function() {
    return this.getToken(languageParser.BY, 0);
};

ElementPropertiesContext.prototype.IDENTITY = function() {
    return this.getToken(languageParser.IDENTITY, 0);
};

ElementPropertiesContext.prototype.sequenceOptions = function() {
    return this.getTypedRuleContext(SequenceOptionsContext,0);
};




languageParser.ElementPropertiesContext = ElementPropertiesContext;

languageParser.prototype.elementProperties = function(elem) {

    var localctx = new ElementPropertiesContext(this, this._ctx, this.state, elem);
    this.enterRule(localctx, 104, languageParser.RULE_elementProperties);
    var _la = 0; // Token type
    try {
        this.state = 1633;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.NOT:
        case languageParser.NULL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1593;
            this.nullability(localctx.elem);
            this.state = 1598;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.DEFAULT) {
                this.state = 1594;
                this.match(languageParser.DEFAULT);
                this.state = 1595;
                localctx.expr = this.expression();
                 localctx.elem.default = localctx.expr.expr; 
            }

            break;
        case languageParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1600;
            this.match(languageParser.DEFAULT);
            this.state = 1601;
            localctx.expr = this.expression();
             localctx.elem.default = localctx.expr.expr; 
            this.state = 1605;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.NOT || _la===languageParser.NULL) {
                this.state = 1604;
                this.nullability(localctx.elem);
            }

            break;
        case languageParser.GENERATED:
            this.enterOuterAlt(localctx, 3);
            this.state = 1607;
            localctx.gen = this.match(languageParser.GENERATED);
             this.hanaFlavorOnly( localctx.gen ); 
            this.state = 1625;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.ALWAYS:
                this.state = 1609;
                this.match(languageParser.ALWAYS);
                this.state = 1610;
                this.match(languageParser.AS);
                this.state = 1616;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,206,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 1611;
                    this.match(languageParser.IDENTITY);
                    this.state = 1613;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.T__7) {
                        this.state = 1612;
                        this.sequenceOptions(localctx.elem);
                    }

                    break;

                case 2:
                    this.state = 1615;
                    this.expression();
                    break;

                }
                break;
            case languageParser.BY:
                this.state = 1618;
                this.match(languageParser.BY);
                this.state = 1619;
                this.match(languageParser.DEFAULT);
                this.state = 1620;
                this.match(languageParser.AS);
                this.state = 1621;
                this.match(languageParser.IDENTITY);
                this.state = 1623;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__7) {
                    this.state = 1622;
                    this.sequenceOptions(localctx.elem);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.T__11:
        case languageParser.AS:
            this.enterOuterAlt(localctx, 4);
            this.state = 1629;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.AS:
                this.state = 1627;
                localctx.as = this.match(languageParser.AS);
                break;
            case languageParser.T__11:
                this.state = 1628;
                localctx.eq = this.match(languageParser.T__11);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
             this.hanaFlavorOnly( 'Calculated fields are not supported yet', localctx.as || localctx.eq ); 
            this.state = 1632;
            this.expression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SequenceOptionsContext(parser, parent, invokingState, elem) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_sequenceOptions;
    this.elem = null
    this.opts = {}
    this.tok = null; // Token
    this.swith = null; // Token
    this.swNum = null; // ValueContext
    this.inc = null; // Token
    this.by = null; // Token
    this.ibNum = null; // ValueContext
    this.min = null; // Token
    this.minNum = null; // ValueContext
    this.max = null; // Token
    this.maxNum = null; // ValueContext
    this.cache = null; // Token
    this.cacheNum = null; // ValueContext
    this.cycle = null; // Token
    this.no = null; // Token
    this.nmin = null; // Token
    this.nmax = null; // Token
    this.ncache = null; // Token
    this.ncycle = null; // Token
    this.reset = null; // Token
    this.rby = null; // Token
    this.elem = elem || null;
    return this;
}

SequenceOptionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SequenceOptionsContext.prototype.constructor = SequenceOptionsContext;

SequenceOptionsContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

SequenceOptionsContext.prototype.START = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.START);
    } else {
        return this.getToken(languageParser.START, i);
    }
};


SequenceOptionsContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.WITH);
    } else {
        return this.getToken(languageParser.WITH, i);
    }
};


SequenceOptionsContext.prototype.value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueContext);
    } else {
        return this.getTypedRuleContext(ValueContext,i);
    }
};

SequenceOptionsContext.prototype.INCREMENT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.INCREMENT);
    } else {
        return this.getToken(languageParser.INCREMENT, i);
    }
};


SequenceOptionsContext.prototype.BY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.BY);
    } else {
        return this.getToken(languageParser.BY, i);
    }
};


SequenceOptionsContext.prototype.MINVALUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.MINVALUE);
    } else {
        return this.getToken(languageParser.MINVALUE, i);
    }
};


SequenceOptionsContext.prototype.MAXVALUE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.MAXVALUE);
    } else {
        return this.getToken(languageParser.MAXVALUE, i);
    }
};


SequenceOptionsContext.prototype.CACHE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.CACHE);
    } else {
        return this.getToken(languageParser.CACHE, i);
    }
};


SequenceOptionsContext.prototype.CYCLE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.CYCLE);
    } else {
        return this.getToken(languageParser.CYCLE, i);
    }
};


SequenceOptionsContext.prototype.NO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.NO);
    } else {
        return this.getToken(languageParser.NO, i);
    }
};


SequenceOptionsContext.prototype.RESET = function() {
    return this.getToken(languageParser.RESET, 0);
};




languageParser.SequenceOptionsContext = SequenceOptionsContext;

languageParser.prototype.sequenceOptions = function(elem) {

    var localctx = new SequenceOptionsContext(this, this._ctx, this.state, elem);
    this.enterRule(localctx, 106, languageParser.RULE_sequenceOptions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1635;
        this.match(languageParser.T__7);
        this.state = 1673;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.CACHE || _la===languageParser.CYCLE || ((((_la - 126)) & ~0x1f) == 0 && ((1 << (_la - 126)) & ((1 << (languageParser.INCREMENT - 126)) | (1 << (languageParser.MAXVALUE - 126)) | (1 << (languageParser.MINVALUE - 126)))) !== 0) || _la===languageParser.NO || _la===languageParser.START) {
            this.state = 1671;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.START:
                this.state = 1636;
                localctx.tok = this.match(languageParser.START);
                this.state = 1637;
                localctx.swith = this.match(languageParser.WITH);
                this.state = 1638;
                localctx.swNum = this.value();
                 this.setOnce( localctx.opts, 'startWith', localctx.swNum.val, localctx.tok, localctx.swith ); 
                break;
            case languageParser.INCREMENT:
                this.state = 1641;
                localctx.inc = this.match(languageParser.INCREMENT);
                this.state = 1642;
                localctx.by = this.match(languageParser.BY);
                this.state = 1643;
                localctx.ibNum = this.value();
                 this.setOnce( localctx.opts, 'incrementBy', localctx.ibNum.val, localctx.inc, localctx.by ); 
                break;
            case languageParser.MINVALUE:
                this.state = 1646;
                localctx.min = this.match(languageParser.MINVALUE);
                this.state = 1647;
                localctx.minNum = this.value();
                 this.setOnce( localctx.opts, 'minvalue', localctx.minNum.val, localctx.min ); 
                break;
            case languageParser.MAXVALUE:
                this.state = 1650;
                localctx.max = this.match(languageParser.MAXVALUE);
                this.state = 1651;
                localctx.maxNum = this.value();
                 this.setOnce( localctx.opts, 'maxvalue', localctx.maxNum.val, localctx.max ); 
                break;
            case languageParser.CACHE:
                this.state = 1654;
                localctx.cache = this.match(languageParser.CACHE);
                this.state = 1655;
                localctx.cacheNum = this.value();
                 this.setOnce( localctx.opts, 'cache', localctx.cacheNum.val, localctx.cache ); 
                break;
            case languageParser.CYCLE:
                this.state = 1658;
                localctx.cycle = this.match(languageParser.CYCLE);
                 this.setOnce( localctx.opts, 'cycle', true, localctx.cycle ); 
                break;
            case languageParser.NO:
                this.state = 1660;
                localctx.no = this.match(languageParser.NO);
                this.state = 1669;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.MINVALUE:
                    this.state = 1661;
                    localctx.nmin = this.match(languageParser.MINVALUE);
                     this.setOnce( localctx.opts, 'minvalue', false, localctx.no, localctx.nmin ); 
                    break;
                case languageParser.MAXVALUE:
                    this.state = 1663;
                    localctx.nmax = this.match(languageParser.MAXVALUE);
                     this.setOnce( localctx.opts, 'maxvalue', false, localctx.no, localctx.nmax ); 
                    break;
                case languageParser.CACHE:
                    this.state = 1665;
                    localctx.ncache = this.match(languageParser.CACHE);
                     this.setOnce( localctx.opts, 'cache', false, localctx.no, localctx.ncache ); 
                    break;
                case languageParser.CYCLE:
                    this.state = 1667;
                    localctx.ncycle = this.match(languageParser.CYCLE);
                     this.setOnce( localctx.opts, 'cycle', false, localctx.no, localctx.ncycle ); 
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1679;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.RESET) {
            this.state = 1676;
            localctx.reset = this.match(languageParser.RESET);
            this.state = 1677;
            localctx.rby = this.match(languageParser.BY);
            this.state = 1678;
            this.queryExpression();
        }

        this.state = 1681;
        this.match(languageParser.T__8);
        this._ctx.stop = this._input.LT(-1);
         localctx.elem.sequenceOptions = this.attachLocation(localctx.opts); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ViewDefContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_viewDef;
    this.outer = null
    this.loc = null
    this.annos = null
    this.art = null
    this.name = {}
    this.v = null; // Token
    this.qe = null; // QueryExpressionContext
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ViewDefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ViewDefContext.prototype.constructor = ViewDefContext;

ViewDefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ViewDefContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ViewDefContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ViewDefContext.prototype.VIEW = function() {
    return this.getToken(languageParser.VIEW, 0);
};

ViewDefContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

ViewDefContext.prototype.annotationAssignment_fix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_fixContext);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_fixContext,i);
    }
};

ViewDefContext.prototype.entityParameters = function() {
    return this.getTypedRuleContext(EntityParametersContext,0);
};

ViewDefContext.prototype.PARAMETERS = function() {
    return this.getToken(languageParser.PARAMETERS, 0);
};

ViewDefContext.prototype.entityParameterDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EntityParameterDefContext);
    } else {
        return this.getTypedRuleContext(EntityParameterDefContext,i);
    }
};

ViewDefContext.prototype.HideAlternatives = function() {
    return this.getToken(languageParser.HideAlternatives, 0);
};

ViewDefContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};




languageParser.ViewDefContext = ViewDefContext;

languageParser.prototype.viewDef = function(outer, loc, annos) {

    var localctx = new ViewDefContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 108, languageParser.RULE_viewDef);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1683;
        localctx.v = this.match(languageParser.VIEW);
        this.state = 1684;
        this.simplePath( localctx.name, 'Entity' );
         localctx.art =  this.addDef( localctx.outer, 'artifacts', 'view', localctx.name, localctx.annos, { ['$'+'syntax']: 'view' }, localctx.loc ) 
        this.state = 1689;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 1686;
            this.annotationAssignment_fix( localctx.annos );
            this.state = 1691;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1703;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__7:
        	this.state = 1692;
        	this.entityParameters( localctx.art );
        	break;
        case languageParser.WITH:
        case languageParser.HideAlternatives:
        	this.state = 1693;
        	_la = this._input.LA(1);
        	if(!(_la===languageParser.WITH || _la===languageParser.HideAlternatives)) {
        	this._errHandler.recoverInline(this);
        	}
        	else {
        		this._errHandler.reportMatch(this);
        	    this.consume();
        	}
        	this.state = 1694;
        	this.match(languageParser.PARAMETERS);
        	this.state = 1695;
        	this.entityParameterDef( localctx.art );
        	this.state = 1700;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__2) {
        	    this.state = 1696;
        	    this.match(languageParser.T__2);
        	    this.state = 1697;
        	    this.entityParameterDef( localctx.art );
        	    this.state = 1702;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	break;
        case languageParser.AS:
        	break;
        default:
        	break;
        }
        this.state = 1705;
        this.match(languageParser.AS);
        this.state = 1706;
        localctx.qe = this.queryExpression();
         localctx.art.query = localctx.qe.query; 
        this.state = 1708;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendViewContext(parser, parent, invokingState, outer, loc, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_extendView;
    this.outer = null
    this.loc = null
    this.annos = null
    this.o = {}
    this.art = {}
    this.v = null; // Token
    this.outer = outer || null;
    this.loc = loc || null;
    this.annos = annos || null;
    return this;
}

ExtendViewContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendViewContext.prototype.constructor = ExtendViewContext;

ExtendViewContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ExtendViewContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ExtendViewContext.prototype.VIEW = function() {
    return this.getToken(languageParser.VIEW, 0);
};

ExtendViewContext.prototype.selectItemDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemDefContext,i);
    }
};

ExtendViewContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};




languageParser.ExtendViewContext = ExtendViewContext;

languageParser.prototype.extendView = function(outer, loc, annos) {

    var localctx = new ExtendViewContext(this, this._ctx, this.state, outer, loc, annos);
    this.enterRule(localctx, 110, languageParser.RULE_extendView);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1710;
        localctx.v = this.match(languageParser.VIEW);
        this.state = 1711;
        this.simplePath( localctx.art, 'Entity' );
         this.hanaFlavorOnly( 'EXTEND VIEW is not supported', localctx.v ); 
        this.state = 1728;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__1 || _la===languageParser.WITH) {
            this.state = 1714;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.WITH) {
                this.state = 1713;
                this.match(languageParser.WITH);
            }

            this.state = 1716;
            this.match(languageParser.T__1);
            this.state = 1717;
            this.selectItemDef(localctx.o);
            this.state = 1723;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 1718;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore('}')) break; 
                this.state = 1720;
                this.selectItemDef(localctx.o);
                this.state = 1725;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1726;
            this.match(languageParser.T__3);
        }

        this.state = 1730;
        this.requiredSemi();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TechnicalConfigurationContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_technicalConfiguration;
    this.outer = null
    this.tc = {}
    this.t = null; // Token
    this.backend = null; // Token
    this.outer = outer || null;
    return this;
}

TechnicalConfigurationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TechnicalConfigurationContext.prototype.constructor = TechnicalConfigurationContext;

TechnicalConfigurationContext.prototype.CONFIGURATION = function() {
    return this.getToken(languageParser.CONFIGURATION, 0);
};

TechnicalConfigurationContext.prototype.migration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MigrationContext);
    } else {
        return this.getTypedRuleContext(MigrationContext,i);
    }
};

TechnicalConfigurationContext.prototype.storeType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StoreTypeContext);
    } else {
        return this.getTypedRuleContext(StoreTypeContext,i);
    }
};

TechnicalConfigurationContext.prototype.usingExtendedStorage = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UsingExtendedStorageContext);
    } else {
        return this.getTypedRuleContext(UsingExtendedStorageContext,i);
    }
};

TechnicalConfigurationContext.prototype.index = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexContext);
    } else {
        return this.getTypedRuleContext(IndexContext,i);
    }
};

TechnicalConfigurationContext.prototype.fullTextIndex = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FullTextIndexContext);
    } else {
        return this.getTypedRuleContext(FullTextIndexContext,i);
    }
};

TechnicalConfigurationContext.prototype.fuzzyIndex = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FuzzyIndexContext);
    } else {
        return this.getTypedRuleContext(FuzzyIndexContext,i);
    }
};

TechnicalConfigurationContext.prototype.partition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionContext);
    } else {
        return this.getTypedRuleContext(PartitionContext,i);
    }
};

TechnicalConfigurationContext.prototype.tableGroup = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableGroupContext);
    } else {
        return this.getTypedRuleContext(TableGroupContext,i);
    }
};

TechnicalConfigurationContext.prototype.unloadPriority = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnloadPriorityContext);
    } else {
        return this.getTypedRuleContext(UnloadPriorityContext,i);
    }
};

TechnicalConfigurationContext.prototype.autoMerge = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AutoMergeContext);
    } else {
        return this.getTypedRuleContext(AutoMergeContext,i);
    }
};

TechnicalConfigurationContext.prototype.TECHNICAL = function() {
    return this.getToken(languageParser.TECHNICAL, 0);
};

TechnicalConfigurationContext.prototype.HANA = function() {
    return this.getToken(languageParser.HANA, 0);
};




languageParser.TechnicalConfigurationContext = TechnicalConfigurationContext;

languageParser.prototype.technicalConfiguration = function(outer) {

    var localctx = new TechnicalConfigurationContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 112, languageParser.RULE_technicalConfiguration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1733;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.TECHNICAL) {
            this.state = 1732;
            localctx.t = this.match(languageParser.TECHNICAL);
        }

        this.state = 1736;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.HANA) {
            this.state = 1735;
            localctx.backend = this.match(languageParser.HANA);
        }

        this.state = 1738;
        this.match(languageParser.CONFIGURATION);

              if ((localctx.backend===null ? null : localctx.backend.text))
                localctx.tc.backend = this.tokenLocation(localctx.backend, undefined, (localctx.backend===null ? null : localctx.backend.text).toLowerCase() );
              else
                localctx.tc.backend = { val: 'hana', calculated: true };
              localctx.outer.technicalConfig = localctx.tc;
            
        this.state = 1740;
        this.match(languageParser.T__1);
        this.state = 1753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.AUTO || _la===languageParser.COLUMN || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (languageParser.FULLTEXT - 115)) | (1 << (languageParser.FUZZY - 115)) | (1 << (languageParser.GROUP - 115)) | (1 << (languageParser.INDEX - 115)) | (1 << (languageParser.MIGRATION - 115)))) !== 0) || ((((_la - 158)) & ~0x1f) == 0 && ((1 << (_la - 158)) & ((1 << (languageParser.NO - 158)) | (1 << (languageParser.PARTITION - 158)) | (1 << (languageParser.ROW - 158)))) !== 0) || ((((_la - 207)) & ~0x1f) == 0 && ((1 << (_la - 207)) & ((1 << (languageParser.UNIQUE - 207)) | (1 << (languageParser.UNLOAD - 207)) | (1 << (languageParser.USING - 207)))) !== 0)) {
            this.state = 1751;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.MIGRATION:
                this.state = 1741;
                this.migration( localctx.tc );
                break;
            case languageParser.COLUMN:
            case languageParser.ROW:
                this.state = 1742;
                this.storeType( localctx.tc );
                break;
            case languageParser.USING:
                this.state = 1743;
                this.usingExtendedStorage( localctx.tc );
                break;
            case languageParser.INDEX:
            case languageParser.UNIQUE:
                this.state = 1744;
                this.index( localctx.tc, this.startLocation() );
                break;
            case languageParser.FULLTEXT:
                this.state = 1745;
                this.fullTextIndex( localctx.tc, this.startLocation() );
                break;
            case languageParser.FUZZY:
                this.state = 1746;
                this.fuzzyIndex( localctx.tc, this.startLocation() );
                break;
            case languageParser.PARTITION:
                this.state = 1747;
                this.partition( localctx.tc, this.startLocation() );
                break;
            case languageParser.GROUP:
                this.state = 1748;
                this.tableGroup( localctx.tc );
                break;
            case languageParser.UNLOAD:
                this.state = 1749;
                this.unloadPriority( localctx.tc );
                break;
            case languageParser.AUTO:
            case languageParser.NO:
                this.state = 1750;
                this.autoMerge( localctx.tc );
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1756;
        this.match(languageParser.T__3);
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.tc); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MigrationContext(parser, parent, invokingState, tc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_migration;
    this.tc = null
    this.mi = null; // Token
    this.ed = null; // Token
    this.tc = tc || null;
    return this;
}

MigrationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MigrationContext.prototype.constructor = MigrationContext;

MigrationContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

MigrationContext.prototype.MIGRATION = function() {
    return this.getToken(languageParser.MIGRATION, 0);
};

MigrationContext.prototype.ENABLED = function() {
    return this.getToken(languageParser.ENABLED, 0);
};

MigrationContext.prototype.DISABLED = function() {
    return this.getToken(languageParser.DISABLED, 0);
};




languageParser.MigrationContext = MigrationContext;

languageParser.prototype.migration = function(tc) {

    var localctx = new MigrationContext(this, this._ctx, this.state, tc);
    this.enterRule(localctx, 114, languageParser.RULE_migration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1758;
        localctx.mi = this.match(languageParser.MIGRATION);
        this.state = 1759;
        localctx.ed = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===languageParser.DISABLED || _la===languageParser.ENABLED)) {
            localctx.ed = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
         this.setOnce( localctx.tc, 'migration', this.tokenLocation( localctx.ed, undefined, (localctx.ed===null ? null : localctx.ed.text).toLowerCase()), localctx.mi ); 
        this.state = 1761;
        this.requiredSemi();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StoreTypeContext(parser, parent, invokingState, tc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_storeType;
    this.tc = null
    this.type = null; // Token
    this.store = null; // Token
    this.tc = tc || null;
    return this;
}

StoreTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StoreTypeContext.prototype.constructor = StoreTypeContext;

StoreTypeContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

StoreTypeContext.prototype.STORE = function() {
    return this.getToken(languageParser.STORE, 0);
};

StoreTypeContext.prototype.ROW = function() {
    return this.getToken(languageParser.ROW, 0);
};

StoreTypeContext.prototype.COLUMN = function() {
    return this.getToken(languageParser.COLUMN, 0);
};




languageParser.StoreTypeContext = StoreTypeContext;

languageParser.prototype.storeType = function(tc) {

    var localctx = new StoreTypeContext(this, this._ctx, this.state, tc);
    this.enterRule(localctx, 116, languageParser.RULE_storeType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1763;
        localctx.type = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===languageParser.COLUMN || _la===languageParser.ROW)) {
            localctx.type = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1764;
        localctx.store = this.match(languageParser.STORE);
         this.setOnce( localctx.tc, 'storeType', this.tokenLocation( localctx.type, undefined, (localctx.type===null ? null : localctx.type.text).toLowerCase() ), localctx.type, localctx.store ); 
        this.state = 1766;
        this.requiredSemi();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingExtendedStorageContext(parser, parent, invokingState, tc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_usingExtendedStorage;
    this.tc = null
    this.u = null; // Token
    this.e = null; // Token
    this.s = null; // Token
    this.tc = tc || null;
    return this;
}

UsingExtendedStorageContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingExtendedStorageContext.prototype.constructor = UsingExtendedStorageContext;

UsingExtendedStorageContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

UsingExtendedStorageContext.prototype.USING = function() {
    return this.getToken(languageParser.USING, 0);
};

UsingExtendedStorageContext.prototype.EXTENDED = function() {
    return this.getToken(languageParser.EXTENDED, 0);
};

UsingExtendedStorageContext.prototype.STORAGE = function() {
    return this.getToken(languageParser.STORAGE, 0);
};




languageParser.UsingExtendedStorageContext = UsingExtendedStorageContext;

languageParser.prototype.usingExtendedStorage = function(tc) {

    var localctx = new UsingExtendedStorageContext(this, this._ctx, this.state, tc);
    this.enterRule(localctx, 118, languageParser.RULE_usingExtendedStorage);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1768;
        localctx.u = this.match(languageParser.USING);
        this.state = 1769;
        localctx.e = this.match(languageParser.EXTENDED);
        this.state = 1770;
        localctx.s = this.match(languageParser.STORAGE);
        this.state = 1771;
        this.requiredSemi();
         this.setOnce( localctx.tc, 'extendedStorage', this.tokenLocation(localctx.u, localctx.s, true), localctx.u, localctx.e, localctx.s ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexContext(parser, parent, invokingState, tc, loc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_index;
    this.tc = null
    this.loc = null
    this.idx = null
    this.props = { columns: [] }
    this.name = {}
    this.annos = []
    this.u = null; // Token
    this.idxName = null; // IdentContext
    this.o1 = null; // AscDescContext
    this.on = null; // AscDescContext
    this.og = null; // AscDescContext
    this.tc = tc || null;
    this.loc = loc || null;
    return this;
}

IndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexContext.prototype.constructor = IndexContext;

IndexContext.prototype.INDEX = function() {
    return this.getToken(languageParser.INDEX, 0);
};

IndexContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

IndexContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};

IndexContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

IndexContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

IndexContext.prototype.UNIQUE = function() {
    return this.getToken(languageParser.UNIQUE, 0);
};

IndexContext.prototype.ascDesc = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AscDescContext);
    } else {
        return this.getTypedRuleContext(AscDescContext,i);
    }
};




languageParser.IndexContext = IndexContext;

languageParser.prototype.index = function(tc, loc) {

    var localctx = new IndexContext(this, this._ctx, this.state, tc, loc);
    this.enterRule(localctx, 120, languageParser.RULE_index);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1776;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.UNIQUE) {
            this.state = 1774;
            localctx.u = this.match(languageParser.UNIQUE);
             localctx.props.unique = this.tokenLocation(localctx.u, undefined, true); 
        }

        this.state = 1778;
        this.match(languageParser.INDEX);
        this.state = 1779;
        localctx.idxName = this.ident('Index');
        this.state = 1780;
        this.match(languageParser.ON);
        this.state = 1781;
        this.match(languageParser.T__7);
        this.state = 1782;
        this.simplePath( localctx.name, 'ref' );
        this.state = 1786;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.ASC || _la===languageParser.DESC) {
            this.state = 1783;
            localctx.o1 = this.ascDesc();
             localctx.name.sort = localctx.o1.order; 
        }

         localctx.props.columns.push(localctx.name); 
        this.state = 1802;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 1789;
            this.match(languageParser.T__2);
             if (this.isStraightBefore(')')) break; 
             localctx.name =  {} 
            this.state = 1792;
            this.simplePath( localctx.name, 'ref' );
            this.state = 1796;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ASC || _la===languageParser.DESC) {
                this.state = 1793;
                localctx.on = this.ascDesc();
                 localctx.name.sort = localctx.on.order; 
            }

             localctx.props.columns.push(localctx.name); 
            this.state = 1804;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1805;
        this.match(languageParser.T__8);
        this.state = 1809;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.ASC || _la===languageParser.DESC) {
            this.state = 1806;
            localctx.og = this.ascDesc();
             localctx.props.sort = localctx.og.order 
        }

        this.state = 1811;
        this.requiredSemi();
         localctx.idx =  this.addDef( localctx.tc, 'indexes', 'index',
                                  localctx.idxName.id, localctx.annos,
                                  localctx.props, localctx.loc )
              delete localctx.idx.annotationAssignments;
            
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.idx); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AscDescContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_ascDesc;
    this.order = null
    this.ad = null; // Token
    return this;
}

AscDescContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AscDescContext.prototype.constructor = AscDescContext;

AscDescContext.prototype.ASC = function() {
    return this.getToken(languageParser.ASC, 0);
};

AscDescContext.prototype.DESC = function() {
    return this.getToken(languageParser.DESC, 0);
};




languageParser.AscDescContext = AscDescContext;

languageParser.prototype.ascDesc = function() {

    var localctx = new AscDescContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, languageParser.RULE_ascDesc);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1814;
        localctx.ad = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===languageParser.ASC || _la===languageParser.DESC)) {
            localctx.ad = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
         localctx.order =  this.tokenLocation( localctx.ad, undefined, (localctx.ad===null ? null : localctx.ad.text).toLowerCase() ) 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FullTextIndexContext(parser, parent, invokingState, tc, loc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_fullTextIndex;
    this.tc = null
    this.loc = null
    this.fti = null
    this.props = { columns: [] }
    this.name = {}
    this.ftiName = null; // IdentContext
    this.tc = tc || null;
    this.loc = loc || null;
    return this;
}

FullTextIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullTextIndexContext.prototype.constructor = FullTextIndexContext;

FullTextIndexContext.prototype.FULLTEXT = function() {
    return this.getToken(languageParser.FULLTEXT, 0);
};

FullTextIndexContext.prototype.INDEX = function() {
    return this.getToken(languageParser.INDEX, 0);
};

FullTextIndexContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

FullTextIndexContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

FullTextIndexContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

FullTextIndexContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

FullTextIndexContext.prototype.fulltextIndexParameters = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FulltextIndexParametersContext);
    } else {
        return this.getTypedRuleContext(FulltextIndexParametersContext,i);
    }
};




languageParser.FullTextIndexContext = FullTextIndexContext;

languageParser.prototype.fullTextIndex = function(tc, loc) {

    var localctx = new FullTextIndexContext(this, this._ctx, this.state, tc, loc);
    this.enterRule(localctx, 124, languageParser.RULE_fullTextIndex);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1817;
        this.match(languageParser.FULLTEXT);
        this.state = 1818;
        this.match(languageParser.INDEX);
        this.state = 1819;
        localctx.ftiName = this.ident('Index');
        this.state = 1820;
        this.match(languageParser.ON);
        this.state = 1821;
        this.match(languageParser.T__7);
        this.state = 1822;
        this.simplePath( localctx.name, 'ref' );
        this.state = 1823;
        this.match(languageParser.T__8);
         localctx.props.columns.push(localctx.name);
              localctx.fti =  this.addDef( localctx.tc, 'indexes', 'fulltextindex',
                                  localctx.ftiName.id, false,
                                  localctx.props, localctx.loc )
            
        this.state = 1828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 74)) & ~0x1f) == 0 && ((1 << (_la - 74)) & ((1 << (languageParser.ASYNC - 74)) | (1 << (languageParser.ASYNCHRONOUS - 74)) | (1 << (languageParser.CONFIGURATION - 74)))) !== 0) || ((((_la - 111)) & ~0x1f) == 0 && ((1 << (_la - 111)) & ((1 << (languageParser.FAST - 111)) | (1 << (languageParser.FUZZY - 111)) | (1 << (languageParser.LANGUAGE - 111)))) !== 0) || _la===languageParser.MIME || _la===languageParser.PHRASE || ((((_la - 186)) & ~0x1f) == 0 && ((1 << (_la - 186)) & ((1 << (languageParser.SEARCH - 186)) | (1 << (languageParser.SYNC - 186)) | (1 << (languageParser.SYNCHRONOUS - 186)) | (1 << (languageParser.TEXT - 186)) | (1 << (languageParser.TOKEN - 186)))) !== 0)) {
            this.state = 1825;
            this.fulltextIndexParameters( localctx.fti );
            this.state = 1830;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1831;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.fti); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FulltextIndexParametersContext(parser, parent, invokingState, fti) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_fulltextIndexParameters;
    this.fti = null
    this.name = {}
    this.val = null
    this.l = null; // Token
    this.c = null; // Token
    this.d = null; // Token
    this.s1 = null; // Token
    this.sn = null; // Token
    this.m = null; // Token
    this.t = null; // Token
    this.str = null; // Token
    this.f = null; // Token
    this.s = null; // Token
    this.i = null; // Token
    this.sw = null; // OnOffContext
    this.p = null; // Token
    this.r = null; // Token
    this.tok = null; // Token
    this.o = null; // Token
    this.a = null; // Token
    this.fti = fti || null;
    return this;
}

FulltextIndexParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FulltextIndexParametersContext.prototype.constructor = FulltextIndexParametersContext;

FulltextIndexParametersContext.prototype.LANGUAGE = function() {
    return this.getToken(languageParser.LANGUAGE, 0);
};

FulltextIndexParametersContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

FulltextIndexParametersContext.prototype.COLUMN = function() {
    return this.getToken(languageParser.COLUMN, 0);
};

FulltextIndexParametersContext.prototype.DETECTION = function() {
    return this.getToken(languageParser.DETECTION, 0);
};

FulltextIndexParametersContext.prototype.String = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.String);
    } else {
        return this.getToken(languageParser.String, i);
    }
};


FulltextIndexParametersContext.prototype.MIME = function() {
    return this.getToken(languageParser.MIME, 0);
};

FulltextIndexParametersContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

FulltextIndexParametersContext.prototype.FUZZY = function() {
    return this.getToken(languageParser.FUZZY, 0);
};

FulltextIndexParametersContext.prototype.SEARCH = function() {
    return this.getToken(languageParser.SEARCH, 0);
};

FulltextIndexParametersContext.prototype.INDEX = function() {
    return this.getToken(languageParser.INDEX, 0);
};

FulltextIndexParametersContext.prototype.onOff = function() {
    return this.getTypedRuleContext(OnOffContext,0);
};

FulltextIndexParametersContext.prototype.PHRASE = function() {
    return this.getToken(languageParser.PHRASE, 0);
};

FulltextIndexParametersContext.prototype.RATIO = function() {
    return this.getToken(languageParser.RATIO, 0);
};

FulltextIndexParametersContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

FulltextIndexParametersContext.prototype.CONFIGURATION = function() {
    return this.getToken(languageParser.CONFIGURATION, 0);
};

FulltextIndexParametersContext.prototype.ONLY = function() {
    return this.getToken(languageParser.ONLY, 0);
};

FulltextIndexParametersContext.prototype.FAST = function() {
    return this.getToken(languageParser.FAST, 0);
};

FulltextIndexParametersContext.prototype.PREPROCESS = function() {
    return this.getToken(languageParser.PREPROCESS, 0);
};

FulltextIndexParametersContext.prototype.TOKEN = function() {
    return this.getToken(languageParser.TOKEN, 0);
};

FulltextIndexParametersContext.prototype.SEPARATORS = function() {
    return this.getToken(languageParser.SEPARATORS, 0);
};

FulltextIndexParametersContext.prototype.TEXT = function() {
    return this.getToken(languageParser.TEXT, 0);
};

FulltextIndexParametersContext.prototype.ANALYSIS = function() {
    return this.getToken(languageParser.ANALYSIS, 0);
};

FulltextIndexParametersContext.prototype.MINING = function() {
    return this.getToken(languageParser.MINING, 0);
};

FulltextIndexParametersContext.prototype.OVERLAY = function() {
    return this.getToken(languageParser.OVERLAY, 0);
};

FulltextIndexParametersContext.prototype.fullTextChangeTracking = function() {
    return this.getTypedRuleContext(FullTextChangeTrackingContext,0);
};




languageParser.FulltextIndexParametersContext = FulltextIndexParametersContext;

languageParser.prototype.fulltextIndexParameters = function(fti) {

    var localctx = new FulltextIndexParametersContext(this, this._ctx, this.state, fti);
    this.enterRule(localctx, 126, languageParser.RULE_fulltextIndexParameters);
    var _la = 0; // Token type
    try {
        this.state = 1915;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.LANGUAGE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1833;
            localctx.l = this.match(languageParser.LANGUAGE);
             if (!localctx.fti.language) localctx.fti.language = {}; 
            this.state = 1854;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.COLUMN:
                this.state = 1835;
                localctx.c = this.match(languageParser.COLUMN);
                this.state = 1836;
                this.simplePath( localctx.name, 'ref' );
                 this.setOnce( localctx.fti.language, 'column', localctx.name, localctx.l, localctx.c ); 
                break;
            case languageParser.DETECTION:
                this.state = 1839;
                localctx.d = this.match(languageParser.DETECTION);
                 this.setOnce( localctx.fti.language, 'detection',[], localctx.l, localctx.d ); 
                this.state = 1841;
                this.match(languageParser.T__7);
                this.state = 1842;
                localctx.s1 = this.match(languageParser.String);
                 localctx.fti.language.detection.push( this.quotedLiteral( localctx.s1, 'string' ) ); 
                this.state = 1850;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 1844;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore(')')) break; 
                    this.state = 1846;
                    localctx.sn = this.match(languageParser.String);
                     localctx.fti.language.detection.push( this.quotedLiteral( localctx.sn, 'string' ) ); 
                    this.state = 1852;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 1853;
                this.match(languageParser.T__8);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.MIME:
            this.enterOuterAlt(localctx, 2);
            this.state = 1856;
            localctx.m = this.match(languageParser.MIME);
            this.state = 1857;
            localctx.t = this.match(languageParser.TYPE);
            this.state = 1864;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.COLUMN:
                this.state = 1858;
                localctx.c = this.match(languageParser.COLUMN);
                this.state = 1859;
                this.simplePath( localctx.name, 'ref' );
                 this.setOnce( localctx.fti, 'mimeTypeColumn', localctx.name, localctx.m, localctx.t, localctx.c ); 
                break;
            case languageParser.String:
                this.state = 1862;
                localctx.str = this.match(languageParser.String);
                 this.setOnce( localctx.fti, 'mimeType', this.quotedLiteral( localctx.str, 'string' ), localctx.m, localctx.t ); 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.FUZZY:
            this.enterOuterAlt(localctx, 3);
            this.state = 1866;
            localctx.f = this.match(languageParser.FUZZY);
            this.state = 1867;
            localctx.s = this.match(languageParser.SEARCH);
            this.state = 1868;
            localctx.i = this.match(languageParser.INDEX);
            this.state = 1869;
            localctx.sw = this.onOff();
             this.setOnce( localctx.fti, 'fuzzySearchIndex', localctx.sw.val, localctx.f, localctx.s, localctx.i ); 
            break;
        case languageParser.PHRASE:
            this.enterOuterAlt(localctx, 4);
            this.state = 1872;
            localctx.p = this.match(languageParser.PHRASE);
            this.state = 1873;
            localctx.i = this.match(languageParser.INDEX);
            this.state = 1874;
            localctx.r = this.match(languageParser.RATIO);
            this.state = 1875;
            localctx.tok = this.match(languageParser.Number);
             this.setOnce( localctx.fti, 'phraseIndexRatio', this.numberLiteral(localctx.tok,''), localctx.p, localctx.i, localctx.r ); 
            break;
        case languageParser.CONFIGURATION:
            this.enterOuterAlt(localctx, 5);
            this.state = 1877;
            localctx.c = this.match(languageParser.CONFIGURATION);
            this.state = 1878;
            localctx.str = this.match(languageParser.String);
             this.setOnce( localctx.fti, 'configuration', this.quotedLiteral(localctx.str, 'string'), localctx.c ); 
            break;
        case languageParser.SEARCH:
            this.enterOuterAlt(localctx, 6);
            this.state = 1880;
            localctx.s = this.match(languageParser.SEARCH);
            this.state = 1881;
            localctx.o = this.match(languageParser.ONLY);
            this.state = 1882;
            localctx.sw = this.onOff();
             this.setOnce( localctx.fti, 'searchOnly', localctx.sw.val, localctx.s, localctx.o ); 
            break;
        case languageParser.FAST:
            this.enterOuterAlt(localctx, 7);
            this.state = 1885;
            localctx.f = this.match(languageParser.FAST);
            this.state = 1886;
            localctx.p = this.match(languageParser.PREPROCESS);
            this.state = 1887;
            localctx.sw = this.onOff();
             this.setOnce( localctx.fti, 'fastPreprocess', localctx.sw.val, localctx.f, localctx.p ); 
            break;
        case languageParser.TOKEN:
            this.enterOuterAlt(localctx, 8);
            this.state = 1890;
            localctx.t = this.match(languageParser.TOKEN);
            this.state = 1891;
            localctx.s = this.match(languageParser.SEPARATORS);
            this.state = 1892;
            localctx.str = this.match(languageParser.String);
             this.setOnce( localctx.fti, 'tokenSeparators', this.quotedLiteral( localctx.str, 'string' ), localctx.t, localctx.s ); 
            break;
        case languageParser.TEXT:
            this.enterOuterAlt(localctx, 9);
            this.state = 1894;
            localctx.t = this.match(languageParser.TEXT);
            this.state = 1912;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.ANALYSIS:
                this.state = 1895;
                localctx.a = this.match(languageParser.ANALYSIS);
                this.state = 1896;
                localctx.sw = this.onOff();
                 this.setOnce( localctx.fti, 'textAnalysis', localctx.sw.val, localctx.t, localctx.a ); 
                break;
            case languageParser.MINING:
                this.state = 1899;
                localctx.m = this.match(languageParser.MINING);
                 if (!localctx.fti.textMining) localctx.fti.textMining = {}; 
                this.state = 1910;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ON:
                case languageParser.OFF:
                    this.state = 1901;
                    localctx.sw = this.onOff();
                     this.setOnce( localctx.fti.textMining, 'state', localctx.sw.val, localctx.t, localctx.m ); 
                    break;
                case languageParser.CONFIGURATION:
                    this.state = 1904;
                    localctx.c = this.match(languageParser.CONFIGURATION);
                    this.state = 1906;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.OVERLAY) {
                        this.state = 1905;
                        localctx.o = this.match(languageParser.OVERLAY);
                    }

                    this.state = 1908;
                    localctx.s = this.match(languageParser.String);
                     if (!localctx.o)
                              this.setOnce( localctx.fti.textMining, 'config', this.quotedLiteral( localctx.s, 'string' ), localctx.t, localctx.m, localctx.c );
                              else
                                this.setOnce( localctx.fti.textMining, 'overlay', this.quotedLiteral( localctx.s, 'string' ), localctx.t, localctx.m, localctx.c, localctx.o );
                          
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
            this.enterOuterAlt(localctx, 10);
            this.state = 1914;
            this.fullTextChangeTracking( localctx.fti );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OnOffContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_onOff;
    this.val = null
    this.tok = null; // Token
    return this;
}

OnOffContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OnOffContext.prototype.constructor = OnOffContext;

OnOffContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

OnOffContext.prototype.OFF = function() {
    return this.getToken(languageParser.OFF, 0);
};




languageParser.OnOffContext = OnOffContext;

languageParser.prototype.onOff = function() {

    var localctx = new OnOffContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, languageParser.RULE_onOff);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1917;
        localctx.tok = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===languageParser.ON || _la===languageParser.OFF)) {
            localctx.tok = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
         localctx.val =  this.tokenLocation( localctx.tok, undefined, (localctx.tok===null ? null : localctx.tok.text).toLowerCase() ) 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FullTextChangeTrackingContext(parser, parent, invokingState, fti) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_fullTextChangeTracking;
    this.fti = null
    this.ct = {}
    this.tok = null; // Token
    this.spec = null; // AsyncSpecContext
    this.fti = fti || null;
    return this;
}

FullTextChangeTrackingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FullTextChangeTrackingContext.prototype.constructor = FullTextChangeTrackingContext;

FullTextChangeTrackingContext.prototype.SYNC = function() {
    return this.getToken(languageParser.SYNC, 0);
};

FullTextChangeTrackingContext.prototype.SYNCHRONOUS = function() {
    return this.getToken(languageParser.SYNCHRONOUS, 0);
};

FullTextChangeTrackingContext.prototype.ASYNC = function() {
    return this.getToken(languageParser.ASYNC, 0);
};

FullTextChangeTrackingContext.prototype.ASYNCHRONOUS = function() {
    return this.getToken(languageParser.ASYNCHRONOUS, 0);
};

FullTextChangeTrackingContext.prototype.asyncSpec = function() {
    return this.getTypedRuleContext(AsyncSpecContext,0);
};




languageParser.FullTextChangeTrackingContext = FullTextChangeTrackingContext;

languageParser.prototype.fullTextChangeTracking = function(fti) {

    var localctx = new FullTextChangeTrackingContext(this, this._ctx, this.state, fti);
    this.enterRule(localctx, 130, languageParser.RULE_fullTextChangeTracking);
    var _la = 0; // Token type
    try {
        this.state = 1929;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
            this.enterOuterAlt(localctx, 1);
            this.state = 1920;
            localctx.tok = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.SYNC || _la===languageParser.SYNCHRONOUS)) {
                localctx.tok = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

                  // copy token and rewrite text for setOnce()
                  localctx.ct =  Object.assign({}, localctx.tok)
                  localctx.ct.text = 'change tracking';
                  this.setOnce( localctx.fti, 'changeTracking',
                                { mode: this.tokenLocation( localctx.tok, undefined, (localctx.tok===null ? null : localctx.tok.text).toLowerCase() ) }, localctx.ct );
                
            break;
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1922;
            localctx.tok = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.ASYNC || _la===languageParser.ASYNCHRONOUS)) {
                localctx.tok = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

                  localctx.ct =  Object.assign({}, localctx.tok)
                  localctx.ct.text = 'change tracking';
                  this.setOnce( localctx.fti, 'changeTracking',
                               { mode: this.tokenLocation( localctx.tok, undefined, (localctx.tok===null ? null : localctx.tok.text).toLowerCase() ) }, localctx.ct);
                
            this.state = 1927;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.FLUSH) {
                this.state = 1924;
                localctx.spec = this.asyncSpec();
                 localctx.fti.changeTracking.asyncSpec = localctx.spec.val; 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AsyncSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_asyncSpec;
    this.val = null
    this.tok = null; // Token
    this.min = null; // Token
    this.doc = null; // Token
    return this;
}

AsyncSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AsyncSpecContext.prototype.constructor = AsyncSpecContext;

AsyncSpecContext.prototype.FLUSH = function() {
    return this.getToken(languageParser.FLUSH, 0);
};

AsyncSpecContext.prototype.EVERY = function() {
    return this.getToken(languageParser.EVERY, 0);
};

AsyncSpecContext.prototype.MINUTES = function() {
    return this.getToken(languageParser.MINUTES, 0);
};

AsyncSpecContext.prototype.AFTER = function() {
    return this.getToken(languageParser.AFTER, 0);
};

AsyncSpecContext.prototype.DOCUMENTS = function() {
    return this.getToken(languageParser.DOCUMENTS, 0);
};

AsyncSpecContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};


AsyncSpecContext.prototype.QUEUE = function() {
    return this.getToken(languageParser.QUEUE, 0);
};

AsyncSpecContext.prototype.OR = function() {
    return this.getToken(languageParser.OR, 0);
};




languageParser.AsyncSpecContext = AsyncSpecContext;

languageParser.prototype.asyncSpec = function() {

    var localctx = new AsyncSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, languageParser.RULE_asyncSpec);
     localctx.val =  {} 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1931;
        this.match(languageParser.FLUSH);
        this.state = 1934;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.QUEUE) {
            this.state = 1932;
            localctx.tok = this.match(languageParser.QUEUE);
             localctx.val.queue = this.tokenLocation( localctx.tok, undefined, (localctx.tok===null ? null : localctx.tok.text).toLowerCase() ); 
        }

        this.state = 1950;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.EVERY:
            this.state = 1936;
            this.match(languageParser.EVERY);
            this.state = 1937;
            localctx.min = this.match(languageParser.Number);
            this.state = 1938;
            this.match(languageParser.MINUTES);
            this.state = 1943;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.OR) {
                this.state = 1939;
                this.match(languageParser.OR);
                this.state = 1940;
                this.match(languageParser.AFTER);
                this.state = 1941;
                localctx.doc = this.match(languageParser.Number);
                this.state = 1942;
                this.match(languageParser.DOCUMENTS);
            }

             if (localctx.min) localctx.val.minutes = this.numberLiteral(localctx.min,'');
                    if (localctx.doc) localctx.val.documents = this.numberLiteral(localctx.doc);
                  
            break;
        case languageParser.AFTER:
            this.state = 1946;
            this.match(languageParser.AFTER);
            this.state = 1947;
            localctx.doc = this.match(languageParser.Number);
            this.state = 1948;
            this.match(languageParser.DOCUMENTS);
             if (localctx.doc) localctx.val.documents = this.numberLiteral(localctx.doc); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FuzzyIndexContext(parser, parent, invokingState, tc, loc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_fuzzyIndex;
    this.tc = null
    this.loc = null
    this.idx = null
    this.name = {}
    this.f = null; // Token
    this.m = null; // Token
    this.s = null; // Token
    this.tc = tc || null;
    this.loc = loc || null;
    return this;
}

FuzzyIndexContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuzzyIndexContext.prototype.constructor = FuzzyIndexContext;

FuzzyIndexContext.prototype.FUZZY = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.FUZZY);
    } else {
        return this.getToken(languageParser.FUZZY, i);
    }
};


FuzzyIndexContext.prototype.SEARCH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.SEARCH);
    } else {
        return this.getToken(languageParser.SEARCH, i);
    }
};


FuzzyIndexContext.prototype.INDEX = function() {
    return this.getToken(languageParser.INDEX, 0);
};

FuzzyIndexContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

FuzzyIndexContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

FuzzyIndexContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

FuzzyIndexContext.prototype.MODE = function() {
    return this.getToken(languageParser.MODE, 0);
};

FuzzyIndexContext.prototype.String = function() {
    return this.getToken(languageParser.String, 0);
};




languageParser.FuzzyIndexContext = FuzzyIndexContext;

languageParser.prototype.fuzzyIndex = function(tc, loc) {

    var localctx = new FuzzyIndexContext(this, this._ctx, this.state, tc, loc);
    this.enterRule(localctx, 134, languageParser.RULE_fuzzyIndex);
     if(!localctx.tc.fzindexes)
      localctx.tc.fzindexes = [];

    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1952;
        this.match(languageParser.FUZZY);
        this.state = 1953;
        this.match(languageParser.SEARCH);
        this.state = 1954;
        this.match(languageParser.INDEX);
        this.state = 1955;
        this.match(languageParser.ON);
        this.state = 1956;
        this.match(languageParser.T__7);
        this.state = 1957;
        this.simplePath( localctx.name, 'ref' );
        this.state = 1958;
        this.match(languageParser.T__8);
         localctx.idx =  { columns: [ localctx.name ], location: localctx.loc }  
        this.state = 1968;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.FUZZY) {
            this.state = 1960;
            localctx.f = this.match(languageParser.FUZZY);
            this.state = 1961;
            this.match(languageParser.SEARCH);
            this.state = 1962;
            localctx.m = this.match(languageParser.MODE);
             localctx.idx.fuzzy = this.tokenLocation(localctx.f, localctx.m, true); 
            this.state = 1966;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.String) {
                this.state = 1964;
                localctx.s = this.match(languageParser.String);
                 localctx.idx.fuzzy.mode = this.quotedLiteral(localctx.s, 'string'); 
            }

        }

        this.state = 1970;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.idx);
                 localctx.tc.fzindexes.push(localctx.idx);

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionContext(parser, parent, invokingState, tc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_partition;
    this.tc = null
    this.p = null; // Token
    this.b = null; // Token
    this.k = null; // Token
    this.e = null; // Token
    this.l = null; // Token
    this.ps1 = null; // PartitionSpecContext
    this.psn = null; // PartitionSpecContext
    this.sw = null; // OnOffContext
    this.tc = tc || null;
    return this;
}

PartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionContext.prototype.constructor = PartitionContext;

PartitionContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

PartitionContext.prototype.PARTITION = function() {
    return this.getToken(languageParser.PARTITION, 0);
};

PartitionContext.prototype.BY = function() {
    return this.getToken(languageParser.BY, 0);
};

PartitionContext.prototype.KEEPING = function() {
    return this.getToken(languageParser.KEEPING, 0);
};

PartitionContext.prototype.EXISTING = function() {
    return this.getToken(languageParser.EXISTING, 0);
};

PartitionContext.prototype.LAYOUT = function() {
    return this.getToken(languageParser.LAYOUT, 0);
};

PartitionContext.prototype.partitionSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionSpecContext);
    } else {
        return this.getTypedRuleContext(PartitionSpecContext,i);
    }
};

PartitionContext.prototype.WITH = function() {
    return this.getToken(languageParser.WITH, 0);
};

PartitionContext.prototype.PARTITIONING = function() {
    return this.getToken(languageParser.PARTITIONING, 0);
};

PartitionContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

PartitionContext.prototype.ANY = function() {
    return this.getToken(languageParser.ANY, 0);
};

PartitionContext.prototype.COLUMNS = function() {
    return this.getToken(languageParser.COLUMNS, 0);
};

PartitionContext.prototype.onOff = function() {
    return this.getTypedRuleContext(OnOffContext,0);
};




languageParser.PartitionContext = PartitionContext;

languageParser.prototype.partition = function(tc) {

    var localctx = new PartitionContext(this, this._ctx, this.state, tc);
    this.enterRule(localctx, 136, languageParser.RULE_partition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1972;
        localctx.p = this.match(languageParser.PARTITION);
        this.state = 1973;
        localctx.b = this.match(languageParser.BY);
         this.setOnce( localctx.tc, 'partition', { specs: [] }, localctx.p, localctx.b ); 
        this.state = 1987;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.KEEPING:
            this.state = 1975;
            localctx.k = this.match(languageParser.KEEPING);
            this.state = 1976;
            localctx.e = this.match(languageParser.EXISTING);
            this.state = 1977;
            localctx.l = this.match(languageParser.LAYOUT);
             localctx.tc.partition.specs.push({ scheme: this.tokenLocation( localctx.k, localctx.l, 'keeping existing layout' ) }); 
            break;
        case languageParser.HASH:
        case languageParser.RANGE:
        case languageParser.ROUNDROBIN:
            this.state = 1979;
            localctx.ps1 = this.partitionSpec();
             localctx.tc.partition.specs.push(localctx.ps1.spec);
                  
            this.state = 1985;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__2) {
                this.state = 1981;
                this.match(languageParser.T__2);
                this.state = 1982;
                localctx.psn = this.partitionSpec();
                 localctx.tc.partition.specs.push(localctx.psn.spec); 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1997;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.WITH) {
            this.state = 1989;
            this.match(languageParser.WITH);
            this.state = 1990;
            this.match(languageParser.PARTITIONING);
            this.state = 1991;
            this.match(languageParser.ON);
            this.state = 1992;
            this.match(languageParser.ANY);
            this.state = 1993;
            this.match(languageParser.COLUMNS);
            this.state = 1994;
            localctx.sw = this.onOff();
             localctx.tc.partition.wpoac = localctx.sw.val; 
        }

        this.state = 1999;
        this.requiredSemi();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_partitionSpec;
    this.spec = null
    return this;
}

PartitionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionSpecContext.prototype.constructor = PartitionSpecContext;

PartitionSpecContext.prototype.roundRobinPartition = function() {
    return this.getTypedRuleContext(RoundRobinPartitionContext,0);
};

PartitionSpecContext.prototype.hashPartition = function() {
    return this.getTypedRuleContext(HashPartitionContext,0);
};

PartitionSpecContext.prototype.rangePartition = function() {
    return this.getTypedRuleContext(RangePartitionContext,0);
};




languageParser.PartitionSpecContext = PartitionSpecContext;

languageParser.prototype.partitionSpec = function() {

    var localctx = new PartitionSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, languageParser.RULE_partitionSpec);
     localctx.spec = {} 
    try {
        this.state = 2004;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ROUNDROBIN:
            this.enterOuterAlt(localctx, 1);
            this.state = 2001;
            this.roundRobinPartition( localctx.spec );
            break;
        case languageParser.HASH:
            this.enterOuterAlt(localctx, 2);
            this.state = 2002;
            this.hashPartition( localctx.spec );
            break;
        case languageParser.RANGE:
            this.enterOuterAlt(localctx, 3);
            this.state = 2003;
            this.rangePartition( localctx.spec );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoundRobinPartitionContext(parser, parent, invokingState, spec) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_roundRobinPartition;
    this.spec = null
    this.s = null; // Token
    this.p = null; // Token
    this.np = null; // NumberPartitionsContext
    this.spec = spec || null;
    return this;
}

RoundRobinPartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoundRobinPartitionContext.prototype.constructor = RoundRobinPartitionContext;

RoundRobinPartitionContext.prototype.ROUNDROBIN = function() {
    return this.getToken(languageParser.ROUNDROBIN, 0);
};

RoundRobinPartitionContext.prototype.PARTITIONS = function() {
    return this.getToken(languageParser.PARTITIONS, 0);
};

RoundRobinPartitionContext.prototype.numberPartitions = function() {
    return this.getTypedRuleContext(NumberPartitionsContext,0);
};




languageParser.RoundRobinPartitionContext = RoundRobinPartitionContext;

languageParser.prototype.roundRobinPartition = function(spec) {

    var localctx = new RoundRobinPartitionContext(this, this._ctx, this.state, spec);
    this.enterRule(localctx, 140, languageParser.RULE_roundRobinPartition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2006;
        localctx.s = this.match(languageParser.ROUNDROBIN);
        this.state = 2007;
        localctx.p = this.match(languageParser.PARTITIONS);
        this.state = 2008;
        localctx.np = this.numberPartitions();
         localctx.spec.scheme = this.tokenLocation( localctx.s, undefined, (localctx.s===null ? null : localctx.s.text).toLowerCase());
              localctx.spec.partitions = localctx.np.val;
            
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HashPartitionContext(parser, parent, invokingState, spec) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_hashPartition;
    this.spec = null
    this.s = null; // Token
    this.cols = null; // PartitionColumnsContext
    this.p = null; // Token
    this.np = null; // NumberPartitionsContext
    this.spec = spec || null;
    return this;
}

HashPartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HashPartitionContext.prototype.constructor = HashPartitionContext;

HashPartitionContext.prototype.HASH = function() {
    return this.getToken(languageParser.HASH, 0);
};

HashPartitionContext.prototype.partitionColumns = function() {
    return this.getTypedRuleContext(PartitionColumnsContext,0);
};

HashPartitionContext.prototype.PARTITIONS = function() {
    return this.getToken(languageParser.PARTITIONS, 0);
};

HashPartitionContext.prototype.numberPartitions = function() {
    return this.getTypedRuleContext(NumberPartitionsContext,0);
};




languageParser.HashPartitionContext = HashPartitionContext;

languageParser.prototype.hashPartition = function(spec) {

    var localctx = new HashPartitionContext(this, this._ctx, this.state, spec);
    this.enterRule(localctx, 142, languageParser.RULE_hashPartition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2011;
        localctx.s = this.match(languageParser.HASH);
        this.state = 2012;
        this.match(languageParser.T__7);
        this.state = 2013;
        localctx.cols = this.partitionColumns();
        this.state = 2014;
        this.match(languageParser.T__8);
        this.state = 2015;
        localctx.p = this.match(languageParser.PARTITIONS);
        this.state = 2016;
        localctx.np = this.numberPartitions();
         localctx.spec.scheme = this.tokenLocation( localctx.s, undefined, (localctx.s===null ? null : localctx.s.text).toLowerCase());
              localctx.spec.columns = localctx.cols.val;
              localctx.spec.partitions = localctx.np.val;
            
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionColumnsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_partitionColumns;
    this.val = null
    this.p1 = null; // PartitionColumnContext
    this.pn = null; // PartitionColumnContext
    return this;
}

PartitionColumnsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionColumnsContext.prototype.constructor = PartitionColumnsContext;

PartitionColumnsContext.prototype.partitionColumn = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionColumnContext);
    } else {
        return this.getTypedRuleContext(PartitionColumnContext,i);
    }
};




languageParser.PartitionColumnsContext = PartitionColumnsContext;

languageParser.prototype.partitionColumns = function() {

    var localctx = new PartitionColumnsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, languageParser.RULE_partitionColumns);
     localctx.val =  [] 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2019;
        localctx.p1 = this.partitionColumn();
         localctx.val.push(localctx.p1.val); 
        this.state = 2027;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 2021;
            this.match(languageParser.T__2);
            this.state = 2022;
            localctx.pn = this.partitionColumn();
             localctx.val.push(localctx.pn.val); 
            this.state = 2029;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionColumnContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_partitionColumn;
    this.val = null
    this.mod = null; // Token
    return this;
}

PartitionColumnContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionColumnContext.prototype.constructor = PartitionColumnContext;

PartitionColumnContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

PartitionColumnContext.prototype.YEAR = function() {
    return this.getToken(languageParser.YEAR, 0);
};

PartitionColumnContext.prototype.MONTH = function() {
    return this.getToken(languageParser.MONTH, 0);
};




languageParser.PartitionColumnContext = PartitionColumnContext;

languageParser.prototype.partitionColumn = function() {

    var localctx = new PartitionColumnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, languageParser.RULE_partitionColumn);
     localctx.val = {} 
    var _la = 0; // Token type
    try {
        this.state = 2037;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2030;
            this.simplePath( localctx.val, 'ref' );
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 2031;
            localctx.mod = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.MONTH || _la===languageParser.YEAR)) {
                localctx.mod = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2032;
            this.match(languageParser.T__7);
            this.state = 2033;
            this.simplePath( localctx.val, 'ref' );
            this.state = 2034;
            this.match(languageParser.T__8);
             localctx.val.unit = this.tokenLocation( localctx.mod, undefined, (localctx.mod===null ? null : localctx.mod.text).toLowerCase() ); 
            break;

        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RangePartitionContext(parser, parent, invokingState, spec) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_rangePartition;
    this.spec = null
    this.s = null; // Token
    this.expr = null; // PartitionColumnsContext
    this.spec = spec || null;
    return this;
}

RangePartitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangePartitionContext.prototype.constructor = RangePartitionContext;

RangePartitionContext.prototype.RANGE = function() {
    return this.getToken(languageParser.RANGE, 0);
};

RangePartitionContext.prototype.partitionColumns = function() {
    return this.getTypedRuleContext(PartitionColumnsContext,0);
};

RangePartitionContext.prototype.partitionRanges = function() {
    return this.getTypedRuleContext(PartitionRangesContext,0);
};

RangePartitionContext.prototype.storePartitionRanges = function() {
    return this.getTypedRuleContext(StorePartitionRangesContext,0);
};




languageParser.RangePartitionContext = RangePartitionContext;

languageParser.prototype.rangePartition = function(spec) {

    var localctx = new RangePartitionContext(this, this._ctx, this.state, spec);
    this.enterRule(localctx, 148, languageParser.RULE_rangePartition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2039;
        localctx.s = this.match(languageParser.RANGE);
        this.state = 2040;
        this.match(languageParser.T__7);
        this.state = 2041;
        localctx.expr = this.partitionColumns();
        this.state = 2042;
        this.match(languageParser.T__8);
         localctx.spec.scheme = this.tokenLocation( localctx.s, undefined, (localctx.s===null ? null : localctx.s.text).toLowerCase() );
              localctx.spec.columns = localctx.expr.val;
              localctx.spec.ranges = [];
            
        this.state = 2044;
        this.match(languageParser.T__7);
        this.state = 2047;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.PARTITION:
            this.state = 2045;
            this.partitionRanges( localctx.spec.ranges, 'default' );
            break;
        case languageParser.USING:
            this.state = 2046;
            this.storePartitionRanges( localctx.spec );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 2049;
        this.match(languageParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorePartitionRangesContext(parser, parent, invokingState, spec) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_storePartitionRanges;
    this.spec = null
    this.spec = spec || null;
    return this;
}

StorePartitionRangesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorePartitionRangesContext.prototype.constructor = StorePartitionRangesContext;

StorePartitionRangesContext.prototype.storePartitionSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StorePartitionSpecContext);
    } else {
        return this.getTypedRuleContext(StorePartitionSpecContext,i);
    }
};




languageParser.StorePartitionRangesContext = StorePartitionRangesContext;

languageParser.prototype.storePartitionRanges = function(spec) {

    var localctx = new StorePartitionRangesContext(this, this._ctx, this.state, spec);
    this.enterRule(localctx, 150, languageParser.RULE_storePartitionRanges);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2051;
        this.storePartitionSpec( localctx.spec );
        this.state = 2055;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.USING) {
            this.state = 2052;
            this.storePartitionSpec( localctx.spec );
            this.state = 2057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorePartitionSpecContext(parser, parent, invokingState, spec) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_storePartitionSpec;
    this.spec = null
    this.tok = null; // Token
    this.spec = spec || null;
    return this;
}

StorePartitionSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorePartitionSpecContext.prototype.constructor = StorePartitionSpecContext;

StorePartitionSpecContext.prototype.USING = function() {
    return this.getToken(languageParser.USING, 0);
};

StorePartitionSpecContext.prototype.STORAGE = function() {
    return this.getToken(languageParser.STORAGE, 0);
};

StorePartitionSpecContext.prototype.partitionRanges = function() {
    return this.getTypedRuleContext(PartitionRangesContext,0);
};

StorePartitionSpecContext.prototype.DEFAULT = function() {
    return this.getToken(languageParser.DEFAULT, 0);
};

StorePartitionSpecContext.prototype.EXTENDED = function() {
    return this.getToken(languageParser.EXTENDED, 0);
};




languageParser.StorePartitionSpecContext = StorePartitionSpecContext;

languageParser.prototype.storePartitionSpec = function(spec) {

    var localctx = new StorePartitionSpecContext(this, this._ctx, this.state, spec);
    this.enterRule(localctx, 152, languageParser.RULE_storePartitionSpec);
     localctx.spec.withStorageSpec = true; 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2058;
        this.match(languageParser.USING);
        this.state = 2059;
        localctx.tok = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(_la===languageParser.DEFAULT || _la===languageParser.EXTENDED)) {
            localctx.tok = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 2060;
        this.match(languageParser.STORAGE);
        this.state = 2061;
        this.match(languageParser.T__7);
        this.state = 2062;
        this.partitionRanges( localctx.spec.ranges, (localctx.tok===null ? null : localctx.tok.text).toLowerCase() );
        this.state = 2063;
        this.match(languageParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PartitionRangesContext(parser, parent, invokingState, ranges, store) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_partitionRanges;
    this.ranges = null
    this.store = null
    this.r1 = null; // RangeSpecContext
    this.rn = null; // RangeSpecContext
    this.ranges = ranges || null;
    this.store = store || null;
    return this;
}

PartitionRangesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionRangesContext.prototype.constructor = PartitionRangesContext;

PartitionRangesContext.prototype.rangeSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RangeSpecContext);
    } else {
        return this.getTypedRuleContext(RangeSpecContext,i);
    }
};




languageParser.PartitionRangesContext = PartitionRangesContext;

languageParser.prototype.partitionRanges = function(ranges, store) {

    var localctx = new PartitionRangesContext(this, this._ctx, this.state, ranges, store);
    this.enterRule(localctx, 154, languageParser.RULE_partitionRanges);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2065;
        localctx.r1 = this.rangeSpec();
         localctx.r1.val.store = localctx.store;
              localctx.ranges.push( localctx.r1.val);
            
        this.state = 2073;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 2067;
            this.match(languageParser.T__2);
            this.state = 2068;
            localctx.rn = this.rangeSpec();
             localctx.rn.val.store = localctx.store;
                    localctx.ranges.push(localctx.rn.val);
                  
            this.state = 2075;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RangeSpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_rangeSpec;
    this.val = {}
    this.p = null; // Token
    this.min = null; // RangeValueContext
    this.max = null; // RangeValueContext
    this.tok = null; // Token
    return this;
}

RangeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeSpecContext.prototype.constructor = RangeSpecContext;

RangeSpecContext.prototype.PARTITION = function() {
    return this.getToken(languageParser.PARTITION, 0);
};

RangeSpecContext.prototype.VALUES = function() {
    return this.getToken(languageParser.VALUES, 0);
};

RangeSpecContext.prototype.rangeValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RangeValueContext);
    } else {
        return this.getTypedRuleContext(RangeValueContext,i);
    }
};

RangeSpecContext.prototype.VALUE = function() {
    return this.getToken(languageParser.VALUE, 0);
};

RangeSpecContext.prototype.OTHERS = function() {
    return this.getToken(languageParser.OTHERS, 0);
};

RangeSpecContext.prototype.IS = function() {
    return this.getToken(languageParser.IS, 0);
};

RangeSpecContext.prototype.CURRENT = function() {
    return this.getToken(languageParser.CURRENT, 0);
};




languageParser.RangeSpecContext = RangeSpecContext;

languageParser.prototype.rangeSpec = function() {

    var localctx = new RangeSpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, languageParser.RULE_rangeSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2076;
        localctx.p = this.match(languageParser.PARTITION);
        this.state = 2095;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__12:
        case languageParser.String:
        case languageParser.Boolean:
        case languageParser.Number:
            this.state = 2077;
            localctx.min = this.rangeValue();
            this.state = 2078;
            this.match(languageParser.T__12);
            this.state = 2079;
            this.match(languageParser.VALUES);
            this.state = 2080;
            this.match(languageParser.T__13);
            this.state = 2081;
            localctx.max = this.rangeValue();
             localctx.val.min = localctx.min.val; localctx.val.max = localctx.max.val; 
            break;
        case languageParser.VALUE:
        case languageParser.VALUES:
            this.state = 2084;
            _la = this._input.LA(1);
            if(!(_la===languageParser.VALUE || _la===languageParser.VALUES)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2085;
            this.match(languageParser.T__11);
            this.state = 2086;
            localctx.min = this.rangeValue();
             localctx.val.min = localctx.min.val; 
            this.state = 2091;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.IS) {
                this.state = 2088;
                this.match(languageParser.IS);
                this.state = 2089;
                this.match(languageParser.CURRENT);
                 localctx.val.isCurrent = true; 
            }

            break;
        case languageParser.OTHERS:
            this.state = 2093;
            localctx.tok = this.match(languageParser.OTHERS);
             localctx.val.others = this.tokenLocation(localctx.p, localctx.tok, (localctx.tok===null ? null : localctx.tok.text).toLowerCase()); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.val); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RangeValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_rangeValue;
    this.val = null
    this.n = null; // Token
    this.s = null; // Token
    this.b = null; // Token
    return this;
}

RangeValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeValueContext.prototype.constructor = RangeValueContext;

RangeValueContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

RangeValueContext.prototype.String = function() {
    return this.getToken(languageParser.String, 0);
};

RangeValueContext.prototype.Boolean = function() {
    return this.getToken(languageParser.Boolean, 0);
};




languageParser.RangeValueContext = RangeValueContext;

languageParser.prototype.rangeValue = function() {

    var localctx = new RangeValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, languageParser.RULE_rangeValue);
    try {
        this.state = 2104;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__2:
        case languageParser.T__8:
        case languageParser.T__12:
        case languageParser.IS:
            this.enterOuterAlt(localctx, 1);

            break;
        case languageParser.Number:
            this.enterOuterAlt(localctx, 2);
            this.state = 2098;
            localctx.n = this.match(languageParser.Number);
             localctx.val =  this.numberLiteral(localctx.n,'') 
            break;
        case languageParser.String:
            this.enterOuterAlt(localctx, 3);
            this.state = 2100;
            localctx.s = this.match(languageParser.String);
             localctx.val =  this.quotedLiteral(localctx.s, 'string') 
            break;
        case languageParser.Boolean:
            this.enterOuterAlt(localctx, 4);
            this.state = 2102;
            localctx.b = this.match(languageParser.Boolean);
             localctx.val =  { literal: 'boolean', val: (localctx.b===null ? null : localctx.b.text).toLowerCase() != 'false' } 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberPartitionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_numberPartitions;
    this.val = null
    this.n = null; // Token
    this.g = null; // Token
    this.cb = null; // Token
    return this;
}

NumberPartitionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberPartitionsContext.prototype.constructor = NumberPartitionsContext;

NumberPartitionsContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

NumberPartitionsContext.prototype.GETNUMSERVERS = function() {
    return this.getToken(languageParser.GETNUMSERVERS, 0);
};




languageParser.NumberPartitionsContext = NumberPartitionsContext;

languageParser.prototype.numberPartitions = function() {

    var localctx = new NumberPartitionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, languageParser.RULE_numberPartitions);
    try {
        this.state = 2112;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.Number:
            this.enterOuterAlt(localctx, 1);
            this.state = 2106;
            localctx.n = this.match(languageParser.Number);
             localctx.val =  this.numberLiteral(localctx.n) 
            break;
        case languageParser.GETNUMSERVERS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2108;
            localctx.g = this.match(languageParser.GETNUMSERVERS);
            this.state = 2109;
            this.match(languageParser.T__7);
            this.state = 2110;
            localctx.cb = this.match(languageParser.T__8);
             localctx.val =  this.tokenLocation(localctx.g, localctx.cb, 'get_num_servers()') 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableGroupContext(parser, parent, invokingState, tc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_tableGroup;
    this.tc = null
    this.tc = tc || null;
    return this;
}

TableGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableGroupContext.prototype.constructor = TableGroupContext;

TableGroupContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

TableGroupContext.prototype.tableGroupSpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableGroupSpecContext);
    } else {
        return this.getTypedRuleContext(TableGroupSpecContext,i);
    }
};




languageParser.TableGroupContext = TableGroupContext;

languageParser.prototype.tableGroup = function(tc) {

    var localctx = new TableGroupContext(this, this._ctx, this.state, tc);
    this.enterRule(localctx, 162, languageParser.RULE_tableGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2115; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 2114;
            this.tableGroupSpec( localctx.tc );
            this.state = 2117; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===languageParser.GROUP);
        this.state = 2119;
        this.requiredSemi();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableGroupSpecContext(parser, parent, invokingState, tc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_tableGroupSpec;
    this.tc = null
    this.g = null; // Token
    this.n = null; // Token
    this.id = null; // IdentContext
    this.t = null; // Token
    this.s = null; // Token
    this.tc = tc || null;
    return this;
}

TableGroupSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableGroupSpecContext.prototype.constructor = TableGroupSpecContext;

TableGroupSpecContext.prototype.GROUP = function() {
    return this.getToken(languageParser.GROUP, 0);
};

TableGroupSpecContext.prototype.NAME = function() {
    return this.getToken(languageParser.NAME, 0);
};

TableGroupSpecContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

TableGroupSpecContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

TableGroupSpecContext.prototype.SUBTYPE = function() {
    return this.getToken(languageParser.SUBTYPE, 0);
};




languageParser.TableGroupSpecContext = TableGroupSpecContext;

languageParser.prototype.tableGroupSpec = function(tc) {

    var localctx = new TableGroupSpecContext(this, this._ctx, this.state, tc);
    this.enterRule(localctx, 164, languageParser.RULE_tableGroupSpec);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2121;
        localctx.g = this.match(languageParser.GROUP);

              if(!localctx.tc.group)
                localctx.tc.group = {};
            
        this.state = 2135;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.NAME:
            this.state = 2123;
            localctx.n = this.match(languageParser.NAME);
            this.state = 2124;
            localctx.id = this.ident('unknown');
             this.setOnce( localctx.tc.group, 'name', localctx.id.id, localctx.g, localctx.n ); 
            break;
        case languageParser.TYPE:
            this.state = 2127;
            localctx.t = this.match(languageParser.TYPE);
            this.state = 2128;
            localctx.id = this.ident('unknown');
             this.setOnce( localctx.tc.group, 'type', localctx.id.id, localctx.g, localctx.t ); 
            break;
        case languageParser.SUBTYPE:
            this.state = 2131;
            localctx.s = this.match(languageParser.SUBTYPE);
            this.state = 2132;
            localctx.id = this.ident('unknown');
             this.setOnce( localctx.tc.group, 'subType', localctx.id.id, localctx.g, localctx.s ); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnloadPriorityContext(parser, parent, invokingState, tc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_unloadPriority;
    this.tc = null
    this.u = null; // Token
    this.p = null; // Token
    this.num = null; // Token
    this.tc = tc || null;
    return this;
}

UnloadPriorityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnloadPriorityContext.prototype.constructor = UnloadPriorityContext;

UnloadPriorityContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

UnloadPriorityContext.prototype.UNLOAD = function() {
    return this.getToken(languageParser.UNLOAD, 0);
};

UnloadPriorityContext.prototype.PRIORITY = function() {
    return this.getToken(languageParser.PRIORITY, 0);
};

UnloadPriorityContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};




languageParser.UnloadPriorityContext = UnloadPriorityContext;

languageParser.prototype.unloadPriority = function(tc) {

    var localctx = new UnloadPriorityContext(this, this._ctx, this.state, tc);
    this.enterRule(localctx, 166, languageParser.RULE_unloadPriority);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2137;
        localctx.u = this.match(languageParser.UNLOAD);
        this.state = 2138;
        localctx.p = this.match(languageParser.PRIORITY);
        this.state = 2139;
        localctx.num = this.match(languageParser.Number);
        this.state = 2140;
        this.requiredSemi();

              this.setOnce( localctx.tc, 'unloadPrio', this.numberLiteral(localctx.num), localctx.u, localctx.p );
            
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AutoMergeContext(parser, parent, invokingState, tc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_autoMerge;
    this.tc = null
    this.val = null
    this.no = null; // Token
    this.a = null; // Token
    this.m = null; // Token
    this.tc = tc || null;
    return this;
}

AutoMergeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AutoMergeContext.prototype.constructor = AutoMergeContext;

AutoMergeContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

AutoMergeContext.prototype.AUTO = function() {
    return this.getToken(languageParser.AUTO, 0);
};

AutoMergeContext.prototype.MERGE = function() {
    return this.getToken(languageParser.MERGE, 0);
};

AutoMergeContext.prototype.NO = function() {
    return this.getToken(languageParser.NO, 0);
};




languageParser.AutoMergeContext = AutoMergeContext;

languageParser.prototype.autoMerge = function(tc) {

    var localctx = new AutoMergeContext(this, this._ctx, this.state, tc);
    this.enterRule(localctx, 168, languageParser.RULE_autoMerge);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2144;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.NO) {
            this.state = 2143;
            localctx.no = this.match(languageParser.NO);
        }

        this.state = 2146;
        localctx.a = this.match(languageParser.AUTO);
        this.state = 2147;
        localctx.m = this.match(languageParser.MERGE);
        this.state = 2148;
        this.requiredSemi();
         if ((localctx.no===null ? null : localctx.no.text))
              localctx.val =  this.tokenLocation(localctx.no, undefined, false)
              else
                localctx.val =  this.tokenLocation(localctx.a, undefined, true)
              this.setOnce( localctx.tc, 'autoMerge', localctx.val, localctx.a, localctx.m);
            
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IncludeRefContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_includeRef;
    this.art = null
    this.incl = {}
    this.art = art || null;
    return this;
}

IncludeRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeRefContext.prototype.constructor = IncludeRefContext;

IncludeRefContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};




languageParser.IncludeRefContext = IncludeRefContext;

languageParser.prototype.includeRef = function(art) {

    var localctx = new IncludeRefContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 170, languageParser.RULE_includeRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2151;
        this.simplePath( localctx.incl, 'artref' );
         if (localctx.art.includes) localctx.art.includes.push(localctx.incl); else localctx.art.includes = [localctx.incl]; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeSpecContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeSpec;
    this.art = null
    this.art = art || null;
    return this;
}

TypeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecContext.prototype.constructor = TypeSpecContext;

TypeSpecContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

TypeSpecContext.prototype.typeArray = function() {
    return this.getTypedRuleContext(TypeArrayContext,0);
};

TypeSpecContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

TypeSpecContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

TypeSpecContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

TypeSpecContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.TypeSpecContext = TypeSpecContext;

languageParser.prototype.typeSpec = function(art) {

    var localctx = new TypeSpecContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 172, languageParser.RULE_typeSpec);
    var _la = 0; // Token type
    try {
        this.state = 2173;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2154;
            this.typeStruct( localctx.art );
            break;
        case languageParser.T__6:
            this.enterOuterAlt(localctx, 2);
            this.state = 2155;
            this.match(languageParser.T__6);
            this.state = 2171;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2156;
                this.typeStruct( localctx.art );
                break;

            case 2:
                this.state = 2157;
                this.typeArray( localctx.art );
                break;

            case 3:
                this.state = 2158;
                this.typeTypeOf( localctx.art );
                break;

            case 4:
                this.state = 2159;
                this.typeRefOptArgs( localctx.art );
                this.state = 2169;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ENUM) {
                    this.state = 2160;
                    this.match(languageParser.ENUM);
                    this.state = 2161;
                    this.match(languageParser.T__1);
                    this.state = 2163; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 2162;
                        this.enumSymbolDef( localctx.art );
                        this.state = 2165; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0));
                    this.state = 2167;
                    this.match(languageParser.T__3);
                }

                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnTypeSpecContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_returnTypeSpec;
    this.art = null
    this.annos = null
    this.ret = null; // Token
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

ReturnTypeSpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnTypeSpecContext.prototype.constructor = ReturnTypeSpecContext;

ReturnTypeSpecContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

ReturnTypeSpecContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

ReturnTypeSpecContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

ReturnTypeSpecContext.prototype.typeArray = function() {
    return this.getTypedRuleContext(TypeArrayContext,0);
};

ReturnTypeSpecContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

ReturnTypeSpecContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

ReturnTypeSpecContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

ReturnTypeSpecContext.prototype.misplacedAnnotations = function() {
    return this.getTypedRuleContext(MisplacedAnnotationsContext,0);
};

ReturnTypeSpecContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.ReturnTypeSpecContext = ReturnTypeSpecContext;

languageParser.prototype.returnTypeSpec = function(art, annos) {

    var localctx = new ReturnTypeSpecContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 174, languageParser.RULE_returnTypeSpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2175;
        localctx.ret = this.match(languageParser.RETURNS);
         localctx.art.returns = { location: this.tokenLocation( localctx.ret ) }; 
        this.state = 2193;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,267,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2177;
            this.typeStruct( localctx.art.returns );
            break;

        case 2:
            this.state = 2178;
            this.typeArray( localctx.art.returns );
            break;

        case 3:
            this.state = 2179;
            this.typeTypeOf( localctx.art.returns );
            break;

        case 4:
            this.state = 2180;
            this.typeRefOptArgs( localctx.art.returns );
            this.state = 2191;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.ENUM:
            	this.state = 2181;
            	this.match(languageParser.ENUM);
            	this.state = 2182;
            	this.match(languageParser.T__1);
            	this.state = 2184; 
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	do {
            	    this.state = 2183;
            	    this.enumSymbolDef( localctx.art.returns );
            	    this.state = 2186; 
            	    this._errHandler.sync(this);
            	    _la = this._input.LA(1);
            	} while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0));
            	this.state = 2188;
            	this.match(languageParser.T__3);
            	break;
            case languageParser.T__9:
            	this.state = 2190;
            	this.misplacedAnnotations( localctx.annos, 'syntax-anno-after-params' );
            	break;
            case languageParser.T__0:
            case languageParser.T__3:
            	break;
            default:
            	break;
            }
            break;

        }
        this.state = 2195;
        this.requiredSemi();
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeSpecSemiContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeSpecSemi;
    this.art = null
    this.annos = null
    this.array = null; // Token
    this.of = null; // Token
    this.l = null; // Token
    this.head = null; // Token
    this.tail = null; // Token
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

TypeSpecSemiContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecSemiContext.prototype.constructor = TypeSpecSemiContext;

TypeSpecSemiContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

TypeSpecSemiContext.prototype.optionalSemi = function() {
    return this.getTypedRuleContext(OptionalSemiContext,0);
};

TypeSpecSemiContext.prototype.typeAssociationBase = function() {
    return this.getTypedRuleContext(TypeAssociationBaseContext,0);
};

TypeSpecSemiContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

TypeSpecSemiContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

TypeSpecSemiContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

TypeSpecSemiContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeSpecSemiContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

TypeSpecSemiContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeSpecSemiContext.prototype.LOCALIZED = function() {
    return this.getToken(languageParser.LOCALIZED, 0);
};

TypeSpecSemiContext.prototype.typeToMany = function() {
    return this.getTypedRuleContext(TypeToManyContext,0);
};

TypeSpecSemiContext.prototype.typeToOne = function() {
    return this.getTypedRuleContext(TypeToOneContext,0);
};

TypeSpecSemiContext.prototype.typeAssociationCont = function() {
    return this.getTypedRuleContext(TypeAssociationContContext,0);
};

TypeSpecSemiContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

TypeSpecSemiContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};


TypeSpecSemiContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

TypeSpecSemiContext.prototype.includeRef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IncludeRefContext);
    } else {
        return this.getTypedRuleContext(IncludeRefContext,i);
    }
};

TypeSpecSemiContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.TypeSpecSemiContext = TypeSpecSemiContext;

languageParser.prototype.typeSpecSemi = function(art, annos) {

    var localctx = new TypeSpecSemiContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 176, languageParser.RULE_typeSpecSemi);
    var _la = 0; // Token type
    try {
        this.state = 2341;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
            this.state = 2197;
            this.typeStruct( localctx.art );
            this.state = 2198;
            this.optionalSemi();
            break;
        case languageParser.T__6:
            this.enterOuterAlt(localctx, 2);
            this.state = 2200;
            this.match(languageParser.T__6);
            this.state = 2339;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2201;
                this.typeStruct( localctx.art );
                this.state = 2202;
                this.optionalSemi();
                break;

            case 2:
                this.state = 2204;
                this.typeAssociationBase( localctx.art, false );
                this.state = 2208;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 2205;
                    this.typeToMany( localctx.art );
                    break;

                case 2:
                    this.state = 2206;
                    this.typeToOne( localctx.art );
                    break;

                case 3:
                    this.state = 2207;
                    this.simplePath( localctx.art.target, 'artref' );
                    break;

                }
                this.state = 2211;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__1 || _la===languageParser.ON) {
                    this.state = 2210;
                    this.typeAssociationCont( localctx.art );
                }

                this.state = 2213;
                this.requiredSemi();
                break;

            case 3:
                this.state = 2215;
                localctx.array = this.match(languageParser.ARRAY);
                this.state = 2216;
                localctx.of = this.match(languageParser.OF);
                 localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
                this.state = 2250;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 2218;
                    this.typeStruct( localctx.art.items );
                    this.state = 2219;
                    this.optionalSemi();
                    break;

                case 2:
                    this.state = 2221;
                    this.typeTypeOf( localctx.art.items );
                    this.state = 2225;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__9) {
                        this.state = 2222;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 2227;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2228;
                    this.requiredSemi();
                    break;

                case 3:
                    this.state = 2230;
                    this.typeRefOptArgs( localctx.art.items );
                    this.state = 2234;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__9) {
                        this.state = 2231;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 2236;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2248;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 2237;
                        this.match(languageParser.ENUM);
                        this.state = 2238;
                        this.match(languageParser.T__1);
                        this.state = 2240; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            this.state = 2239;
                            this.enumSymbolDef( localctx.art.items );
                            this.state = 2242; 
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0));
                        this.state = 2244;
                        this.match(languageParser.T__3);
                        this.state = 2245;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 2247;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                }
                break;

            case 4:
                this.state = 2252;
                this.typeTypeOf( localctx.art );
                this.state = 2256;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__9) {
                    this.state = 2253;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 2258;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2259;
                this.requiredSemi();
                break;

            case 5:
                this.state = 2261;
                localctx.l = this.match(languageParser.LOCALIZED);
                 localctx.art.localized = this.tokenLocation( localctx.l, undefined, true ); 
                this.state = 2263;
                this.typeRefOptArgs( localctx.art );
                this.state = 2267;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__9) {
                    this.state = 2264;
                    this.annotationAssignment_ll1( localctx.annos );
                    this.state = 2269;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2270;
                this.requiredSemi();
                break;

            case 6:
                 localctx.art.type = {}; 
                this.state = 2273;
                this.simplePath( localctx.art.type, 'artref' );
                this.state = 2337;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__7:
                    this.state = 2274;
                    this.match(languageParser.T__7);
                    this.state = 2275;
                    localctx.head = this.match(languageParser.Number);
                     localctx.art.typeArguments = [ this.numberLiteral( localctx.head ) ]; 
                    this.state = 2283;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 2277;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore(')')) break; 
                        this.state = 2279;
                        localctx.tail = this.match(languageParser.Number);
                         localctx.art.typeArguments.push( this.numberLiteral( localctx.tail ) ); 
                        this.state = 2285;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2286;
                    this.match(languageParser.T__8);
                    this.state = 2290;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__9) {
                        this.state = 2287;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 2292;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2304;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 2293;
                        this.match(languageParser.ENUM);
                        this.state = 2294;
                        this.match(languageParser.T__1);
                        this.state = 2296; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            this.state = 2295;
                            this.enumSymbolDef( localctx.art );
                            this.state = 2298; 
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0));
                        this.state = 2300;
                        this.match(languageParser.T__3);
                        this.state = 2301;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 2303;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__0:
                case languageParser.T__3:
                case languageParser.T__9:
                case languageParser.ENUM:
                    this.state = 2309;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__9) {
                        this.state = 2306;
                        this.annotationAssignment_ll1( localctx.annos );
                        this.state = 2311;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2323;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.ENUM:
                        this.state = 2312;
                        this.match(languageParser.ENUM);
                        this.state = 2313;
                        this.match(languageParser.T__1);
                        this.state = 2315; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        do {
                            this.state = 2314;
                            this.enumSymbolDef( localctx.art );
                            this.state = 2317; 
                            this._errHandler.sync(this);
                            _la = this._input.LA(1);
                        } while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0));
                        this.state = 2319;
                        this.match(languageParser.T__3);
                        this.state = 2320;
                        this.optionalSemi();
                        break;
                    case languageParser.T__0:
                    case languageParser.T__3:
                        this.state = 2322;
                        this.requiredSemi();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;
                case languageParser.T__1:
                case languageParser.T__2:
                     localctx.art.includes = [ localctx.art.type ]; delete localctx.art.type; 
                    this.state = 2331;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 2326;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore('{')) break; 
                        this.state = 2328;
                        this.includeRef( localctx.art );
                        this.state = 2333;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2334;
                    this.typeStruct( localctx.art );
                    this.state = 2335;
                    this.optionalSemi();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 3 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeStructContext(parser, parent, invokingState, art, attachLoc) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeStruct;
    this.art = null
    this.attachLoc = false
    this.art = art || null;
    this.attachLoc = attachLoc || null;
    return this;
}

TypeStructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeStructContext.prototype.constructor = TypeStructContext;

TypeStructContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};




languageParser.TypeStructContext = TypeStructContext;

languageParser.prototype.typeStruct = function(art, attachLoc) {

    var localctx = new TypeStructContext(this, this._ctx, this.state, art, attachLoc);
    this.enterRule(localctx, 178, languageParser.RULE_typeStruct);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         localctx.art.elements = Object.create(null); 
        this.state = 2344;
        this.match(languageParser.T__1);
        this.state = 2348;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AFTER - 48)) | (1 << (languageParser.ALWAYS - 48)) | (1 << (languageParser.ANALYSIS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.ASYNC - 48)) | (1 << (languageParser.ASYNCHRONOUS - 48)) | (1 << (languageParser.AUTO - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.CACHE - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.COLUMN - 80)) | (1 << (languageParser.COLUMNS - 80)) | (1 << (languageParser.COMPOSITION - 80)) | (1 << (languageParser.CONFIGURATION - 80)) | (1 << (languageParser.CONST - 80)) | (1 << (languageParser.CONTEXT - 80)) | (1 << (languageParser.CROSS - 80)) | (1 << (languageParser.CURRENT - 80)) | (1 << (languageParser.CYCLE - 80)) | (1 << (languageParser.DAY - 80)) | (1 << (languageParser.DEFAULT - 80)) | (1 << (languageParser.DEFINE - 80)) | (1 << (languageParser.DEPENDS - 80)) | (1 << (languageParser.DESC - 80)) | (1 << (languageParser.DETECTION - 80)) | (1 << (languageParser.DISABLED - 80)) | (1 << (languageParser.DOCUMENTS - 80)) | (1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.ENABLED - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.EVERY - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXISTING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.EXTENDED - 80)) | (1 << (languageParser.FAST - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.FIRST - 112)) | (1 << (languageParser.FLUSH - 112)) | (1 << (languageParser.FULL - 112)) | (1 << (languageParser.FULLTEXT - 112)) | (1 << (languageParser.FUNCTION - 112)) | (1 << (languageParser.FUZZY - 112)) | (1 << (languageParser.GENERATED - 112)) | (1 << (languageParser.GETNUMSERVERS - 112)) | (1 << (languageParser.GROUP - 112)) | (1 << (languageParser.HANA - 112)) | (1 << (languageParser.HASH - 112)) | (1 << (languageParser.HAVING - 112)) | (1 << (languageParser.HOUR - 112)) | (1 << (languageParser.IDENTITY - 112)) | (1 << (languageParser.INCREMENT - 112)) | (1 << (languageParser.INDEX - 112)) | (1 << (languageParser.INNER - 112)) | (1 << (languageParser.INTERSECT - 112)) | (1 << (languageParser.INTO - 112)) | (1 << (languageParser.IS - 112)) | (1 << (languageParser.JOIN - 112)) | (1 << (languageParser.KEEPING - 112)) | (1 << (languageParser.LANGUAGE - 112)) | (1 << (languageParser.LAST - 112)) | (1 << (languageParser.LAYOUT - 112)) | (1 << (languageParser.LEADING - 112)) | (1 << (languageParser.LEFT - 112)) | (1 << (languageParser.LIKE - 112)) | (1 << (languageParser.LIMIT - 112)) | (1 << (languageParser.LOCALIZED - 112)) | (1 << (languageParser.MANY - 112)) | (1 << (languageParser.MASKED - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (languageParser.MAXVALUE - 144)) | (1 << (languageParser.MERGE - 144)) | (1 << (languageParser.MIGRATION - 144)) | (1 << (languageParser.MINING - 144)) | (1 << (languageParser.MINUS - 144)) | (1 << (languageParser.MINUTE - 144)) | (1 << (languageParser.MINUTES - 144)) | (1 << (languageParser.MINVALUE - 144)) | (1 << (languageParser.MIME - 144)) | (1 << (languageParser.MIXIN - 144)) | (1 << (languageParser.MODE - 144)) | (1 << (languageParser.MONTH - 144)) | (1 << (languageParser.NAME - 144)) | (1 << (languageParser.NAMESPACE - 144)) | (1 << (languageParser.NO - 144)) | (1 << (languageParser.NULLS - 144)) | (1 << (languageParser.OFF - 144)) | (1 << (languageParser.OFFSET - 144)) | (1 << (languageParser.ONE - 144)) | (1 << (languageParser.ONLY - 144)) | (1 << (languageParser.OR - 144)) | (1 << (languageParser.ORDER - 144)) | (1 << (languageParser.OTHERS - 144)) | (1 << (languageParser.OUTER - 144)) | (1 << (languageParser.OVERLAY - 144)) | (1 << (languageParser.QUEUE - 144)) | (1 << (languageParser.PARAMETERS - 144)) | (1 << (languageParser.PARTITION - 144)) | (1 << (languageParser.PARTITIONING - 144)) | (1 << (languageParser.PARTITIONS - 144)) | (1 << (languageParser.PHRASE - 144)) | (1 << (languageParser.PREPROCESS - 144)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (languageParser.PRIORITY - 176)) | (1 << (languageParser.PROJECTION - 176)) | (1 << (languageParser.RANGE - 176)) | (1 << (languageParser.RATIO - 176)) | (1 << (languageParser.REDIRECTED - 176)) | (1 << (languageParser.RESET - 176)) | (1 << (languageParser.RETURNS - 176)) | (1 << (languageParser.RIGHT - 176)) | (1 << (languageParser.ROUNDROBIN - 176)) | (1 << (languageParser.ROW - 176)) | (1 << (languageParser.SEARCH - 176)) | (1 << (languageParser.SECOND - 176)) | (1 << (languageParser.SEPARATORS - 176)) | (1 << (languageParser.SERVICE - 176)) | (1 << (languageParser.START - 176)) | (1 << (languageParser.STORAGE - 176)) | (1 << (languageParser.STORE - 176)) | (1 << (languageParser.SUBTYPE - 176)) | (1 << (languageParser.SYNC - 176)) | (1 << (languageParser.SYNCHRONOUS - 176)) | (1 << (languageParser.TABLE - 176)) | (1 << (languageParser.TECHNICAL - 176)) | (1 << (languageParser.TEMPORARY - 176)) | (1 << (languageParser.TEXT - 176)) | (1 << (languageParser.THEN - 176)) | (1 << (languageParser.TOKEN - 176)) | (1 << (languageParser.TOP - 176)) | (1 << (languageParser.TRAILING - 176)) | (1 << (languageParser.TO - 176)) | (1 << (languageParser.TYPE - 176)) | (1 << (languageParser.UNION - 176)) | (1 << (languageParser.UNIQUE - 176)))) !== 0) || ((((_la - 208)) & ~0x1f) == 0 && ((1 << (_la - 208)) & ((1 << (languageParser.UNLOAD - 208)) | (1 << (languageParser.USING - 208)) | (1 << (languageParser.VALUE - 208)) | (1 << (languageParser.VALUES - 208)) | (1 << (languageParser.VIEW - 208)) | (1 << (languageParser.VIRTUAL - 208)) | (1 << (languageParser.YEAR - 208)) | (1 << (languageParser.Identifier - 208)))) !== 0)) {
            this.state = 2345;
            this.elementDef( localctx.art );
            this.state = 2350;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2351;
        this.match(languageParser.T__3);
        this._ctx.stop = this._input.LT(-1);
         if (localctx.attachLoc) this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeCompoStructContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeCompoStruct;
    this.art = null
    this.art = art || null;
    return this;
}

TypeCompoStructContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeCompoStructContext.prototype.constructor = TypeCompoStructContext;

TypeCompoStructContext.prototype.COMPOSITIONofBRACE = function() {
    return this.getToken(languageParser.COMPOSITIONofBRACE, 0);
};

TypeCompoStructContext.prototype.elementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementDefContext);
    } else {
        return this.getTypedRuleContext(ElementDefContext,i);
    }
};




languageParser.TypeCompoStructContext = TypeCompoStructContext;

languageParser.prototype.typeCompoStruct = function(art) {

    var localctx = new TypeCompoStructContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 180, languageParser.RULE_typeCompoStruct);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
         localctx.art.elements = Object.create(null); 
        this.state = 2354;
        this.match(languageParser.COMPOSITIONofBRACE);
        this.state = 2358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9 || ((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & ((1 << (languageParser.KEY - 48)) | (1 << (languageParser.ABSTRACT - 48)) | (1 << (languageParser.ACTION - 48)) | (1 << (languageParser.ACTIONS - 48)) | (1 << (languageParser.AFTER - 48)) | (1 << (languageParser.ALWAYS - 48)) | (1 << (languageParser.ANALYSIS - 48)) | (1 << (languageParser.AND - 48)) | (1 << (languageParser.ANNOTATE - 48)) | (1 << (languageParser.ANNOTATION - 48)) | (1 << (languageParser.ARRAY - 48)) | (1 << (languageParser.ASC - 48)) | (1 << (languageParser.ASPECT - 48)) | (1 << (languageParser.ASSOCIATION - 48)) | (1 << (languageParser.ASYNC - 48)) | (1 << (languageParser.ASYNCHRONOUS - 48)) | (1 << (languageParser.AUTO - 48)) | (1 << (languageParser.BETWEEN - 48)) | (1 << (languageParser.BOTH - 48)) | (1 << (languageParser.CACHE - 48)))) !== 0) || ((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (languageParser.COLUMN - 80)) | (1 << (languageParser.COLUMNS - 80)) | (1 << (languageParser.COMPOSITION - 80)) | (1 << (languageParser.CONFIGURATION - 80)) | (1 << (languageParser.CONST - 80)) | (1 << (languageParser.CONTEXT - 80)) | (1 << (languageParser.CROSS - 80)) | (1 << (languageParser.CURRENT - 80)) | (1 << (languageParser.CYCLE - 80)) | (1 << (languageParser.DAY - 80)) | (1 << (languageParser.DEFAULT - 80)) | (1 << (languageParser.DEFINE - 80)) | (1 << (languageParser.DEPENDS - 80)) | (1 << (languageParser.DESC - 80)) | (1 << (languageParser.DETECTION - 80)) | (1 << (languageParser.DISABLED - 80)) | (1 << (languageParser.DOCUMENTS - 80)) | (1 << (languageParser.ELEMENT - 80)) | (1 << (languageParser.ELSE - 80)) | (1 << (languageParser.ENABLED - 80)) | (1 << (languageParser.END - 80)) | (1 << (languageParser.ENTITY - 80)) | (1 << (languageParser.ENUM - 80)) | (1 << (languageParser.EVENT - 80)) | (1 << (languageParser.EVERY - 80)) | (1 << (languageParser.ESCAPE - 80)) | (1 << (languageParser.EXCEPT - 80)) | (1 << (languageParser.EXCLUDING - 80)) | (1 << (languageParser.EXISTING - 80)) | (1 << (languageParser.EXTEND - 80)) | (1 << (languageParser.EXTENDED - 80)) | (1 << (languageParser.FAST - 80)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (languageParser.FIRST - 112)) | (1 << (languageParser.FLUSH - 112)) | (1 << (languageParser.FULL - 112)) | (1 << (languageParser.FULLTEXT - 112)) | (1 << (languageParser.FUNCTION - 112)) | (1 << (languageParser.FUZZY - 112)) | (1 << (languageParser.GENERATED - 112)) | (1 << (languageParser.GETNUMSERVERS - 112)) | (1 << (languageParser.GROUP - 112)) | (1 << (languageParser.HANA - 112)) | (1 << (languageParser.HASH - 112)) | (1 << (languageParser.HAVING - 112)) | (1 << (languageParser.HOUR - 112)) | (1 << (languageParser.IDENTITY - 112)) | (1 << (languageParser.INCREMENT - 112)) | (1 << (languageParser.INDEX - 112)) | (1 << (languageParser.INNER - 112)) | (1 << (languageParser.INTERSECT - 112)) | (1 << (languageParser.INTO - 112)) | (1 << (languageParser.IS - 112)) | (1 << (languageParser.JOIN - 112)) | (1 << (languageParser.KEEPING - 112)) | (1 << (languageParser.LANGUAGE - 112)) | (1 << (languageParser.LAST - 112)) | (1 << (languageParser.LAYOUT - 112)) | (1 << (languageParser.LEADING - 112)) | (1 << (languageParser.LEFT - 112)) | (1 << (languageParser.LIKE - 112)) | (1 << (languageParser.LIMIT - 112)) | (1 << (languageParser.LOCALIZED - 112)) | (1 << (languageParser.MANY - 112)) | (1 << (languageParser.MASKED - 112)))) !== 0) || ((((_la - 144)) & ~0x1f) == 0 && ((1 << (_la - 144)) & ((1 << (languageParser.MAXVALUE - 144)) | (1 << (languageParser.MERGE - 144)) | (1 << (languageParser.MIGRATION - 144)) | (1 << (languageParser.MINING - 144)) | (1 << (languageParser.MINUS - 144)) | (1 << (languageParser.MINUTE - 144)) | (1 << (languageParser.MINUTES - 144)) | (1 << (languageParser.MINVALUE - 144)) | (1 << (languageParser.MIME - 144)) | (1 << (languageParser.MIXIN - 144)) | (1 << (languageParser.MODE - 144)) | (1 << (languageParser.MONTH - 144)) | (1 << (languageParser.NAME - 144)) | (1 << (languageParser.NAMESPACE - 144)) | (1 << (languageParser.NO - 144)) | (1 << (languageParser.NULLS - 144)) | (1 << (languageParser.OFF - 144)) | (1 << (languageParser.OFFSET - 144)) | (1 << (languageParser.ONE - 144)) | (1 << (languageParser.ONLY - 144)) | (1 << (languageParser.OR - 144)) | (1 << (languageParser.ORDER - 144)) | (1 << (languageParser.OTHERS - 144)) | (1 << (languageParser.OUTER - 144)) | (1 << (languageParser.OVERLAY - 144)) | (1 << (languageParser.QUEUE - 144)) | (1 << (languageParser.PARAMETERS - 144)) | (1 << (languageParser.PARTITION - 144)) | (1 << (languageParser.PARTITIONING - 144)) | (1 << (languageParser.PARTITIONS - 144)) | (1 << (languageParser.PHRASE - 144)) | (1 << (languageParser.PREPROCESS - 144)))) !== 0) || ((((_la - 176)) & ~0x1f) == 0 && ((1 << (_la - 176)) & ((1 << (languageParser.PRIORITY - 176)) | (1 << (languageParser.PROJECTION - 176)) | (1 << (languageParser.RANGE - 176)) | (1 << (languageParser.RATIO - 176)) | (1 << (languageParser.REDIRECTED - 176)) | (1 << (languageParser.RESET - 176)) | (1 << (languageParser.RETURNS - 176)) | (1 << (languageParser.RIGHT - 176)) | (1 << (languageParser.ROUNDROBIN - 176)) | (1 << (languageParser.ROW - 176)) | (1 << (languageParser.SEARCH - 176)) | (1 << (languageParser.SECOND - 176)) | (1 << (languageParser.SEPARATORS - 176)) | (1 << (languageParser.SERVICE - 176)) | (1 << (languageParser.START - 176)) | (1 << (languageParser.STORAGE - 176)) | (1 << (languageParser.STORE - 176)) | (1 << (languageParser.SUBTYPE - 176)) | (1 << (languageParser.SYNC - 176)) | (1 << (languageParser.SYNCHRONOUS - 176)) | (1 << (languageParser.TABLE - 176)) | (1 << (languageParser.TECHNICAL - 176)) | (1 << (languageParser.TEMPORARY - 176)) | (1 << (languageParser.TEXT - 176)) | (1 << (languageParser.THEN - 176)) | (1 << (languageParser.TOKEN - 176)) | (1 << (languageParser.TOP - 176)) | (1 << (languageParser.TRAILING - 176)) | (1 << (languageParser.TO - 176)) | (1 << (languageParser.TYPE - 176)) | (1 << (languageParser.UNION - 176)) | (1 << (languageParser.UNIQUE - 176)))) !== 0) || ((((_la - 208)) & ~0x1f) == 0 && ((1 << (_la - 208)) & ((1 << (languageParser.UNLOAD - 208)) | (1 << (languageParser.USING - 208)) | (1 << (languageParser.VALUE - 208)) | (1 << (languageParser.VALUES - 208)) | (1 << (languageParser.VIEW - 208)) | (1 << (languageParser.VIRTUAL - 208)) | (1 << (languageParser.YEAR - 208)) | (1 << (languageParser.Identifier - 208)))) !== 0)) {
            this.state = 2355;
            this.elementDef( localctx.art );
            this.state = 2360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2361;
        this.match(languageParser.T__3);
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeArrayContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeArray;
    this.art = null
    this.array = null; // Token
    this.of = null; // Token
    this.art = art || null;
    return this;
}

TypeArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeArrayContext.prototype.constructor = TypeArrayContext;

TypeArrayContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

TypeArrayContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeArrayContext.prototype.typeStruct = function() {
    return this.getTypedRuleContext(TypeStructContext,0);
};

TypeArrayContext.prototype.typeTypeOf = function() {
    return this.getTypedRuleContext(TypeTypeOfContext,0);
};

TypeArrayContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

TypeArrayContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

TypeArrayContext.prototype.enumSymbolDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumSymbolDefContext);
    } else {
        return this.getTypedRuleContext(EnumSymbolDefContext,i);
    }
};




languageParser.TypeArrayContext = TypeArrayContext;

languageParser.prototype.typeArray = function(art) {

    var localctx = new TypeArrayContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 182, languageParser.RULE_typeArray);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2363;
        localctx.array = this.match(languageParser.ARRAY);
        this.state = 2364;
        localctx.of = this.match(languageParser.OF);
         localctx.art.items = { location: this.tokenLocation( localctx.array, localctx.of ) }; 
        this.state = 2380;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
        switch(la_) {
        case 1:
            this.state = 2366;
            this.typeStruct( localctx.art.items );
            break;

        case 2:
            this.state = 2367;
            this.typeTypeOf( localctx.art.items );
            break;

        case 3:
            this.state = 2368;
            this.typeRefOptArgs( localctx.art.items );
            this.state = 2378;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ENUM) {
                this.state = 2369;
                this.match(languageParser.ENUM);
                this.state = 2370;
                this.match(languageParser.T__1);
                this.state = 2372; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    this.state = 2371;
                    this.enumSymbolDef( localctx.art.items );
                    this.state = 2374; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while(_la===languageParser.T__9 || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0));
                this.state = 2376;
                this.match(languageParser.T__3);
            }

            break;

        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeAssociationBaseContext(parser, parent, invokingState, art, handleTypeCompo) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeAssociationBase;
    this.art = null
    this.handleTypeCompo = null
    this.assoc = null; // Token
    this.compo = null; // Token
    this.art = art || null;
    this.handleTypeCompo = handleTypeCompo || null;
    return this;
}

TypeAssociationBaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssociationBaseContext.prototype.constructor = TypeAssociationBaseContext;

TypeAssociationBaseContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};

TypeAssociationBaseContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeAssociationBaseContext.prototype.ASSOCIATION = function() {
    return this.getToken(languageParser.ASSOCIATION, 0);
};

TypeAssociationBaseContext.prototype.COMPOSITION = function() {
    return this.getToken(languageParser.COMPOSITION, 0);
};

TypeAssociationBaseContext.prototype.cardinality = function() {
    return this.getTypedRuleContext(CardinalityContext,0);
};




languageParser.TypeAssociationBaseContext = TypeAssociationBaseContext;

languageParser.prototype.typeAssociationBase = function(art, handleTypeCompo) {

    var localctx = new TypeAssociationBaseContext(this, this._ctx, this.state, art, handleTypeCompo);
    this.enterRule(localctx, 184, languageParser.RULE_typeAssociationBase);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2394;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ASSOCIATION:
            this.state = 2382;
            localctx.assoc = this.match(languageParser.ASSOCIATION);
            this.state = 2384;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__14) {
                this.state = 2383;
                this.cardinality(localctx.art);
            }

            this.state = 2386;
            this.match(languageParser.TO);
            {
                    let location = this.tokenLocation(localctx.assoc);
                    localctx.art.type = { path: [{ id: 'cds.Association', location }], scope: 'global', location };
                    this.handleComposition( localctx.art.cardinality, false );
                  }
            break;
        case languageParser.COMPOSITION:
            this.state = 2388;
            localctx.compo = this.match(languageParser.COMPOSITION);
            this.state = 2390;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__14) {
                this.state = 2389;
                this.cardinality(localctx.art);
            }

            this.state = 2392;
            this.match(languageParser.OF);
            {
                    let location = this.tokenLocation(localctx.compo);
                    localctx.art.type = { path: [{ id: 'cds.Composition', location }], scope: 'global', location };
                    this.handleComposition( localctx.art.cardinality, handleTypeCompo );
                  }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
         localctx.art.target = {}; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeAssociationContContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeAssociationCont;
    this.art = null
    this.cond = null; // ConditionContext
    this.art = art || null;
    return this;
}

TypeAssociationContContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssociationContContext.prototype.constructor = TypeAssociationContContext;

TypeAssociationContContext.prototype.foreignKey = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForeignKeyContext);
    } else {
        return this.getTypedRuleContext(ForeignKeyContext,i);
    }
};

TypeAssociationContContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

TypeAssociationContContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};




languageParser.TypeAssociationContContext = TypeAssociationContContext;

languageParser.prototype.typeAssociationCont = function(art) {

    var localctx = new TypeAssociationContContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 186, languageParser.RULE_typeAssociationCont);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2414;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.state = 2398;
            this.match(languageParser.T__1);
            this.state = 2399;
            this.foreignKey( localctx.art );
            this.state = 2405;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2400;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore('}')) break; 
                this.state = 2402;
                this.foreignKey( localctx.art );
                this.state = 2407;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2408;
            this.match(languageParser.T__3);
            break;
        case languageParser.ON:
            this.state = 2410;
            this.match(languageParser.ON);
            this.state = 2411;
            localctx.cond = this.condition();
             localctx.art.onCond=localctx.cond.cond; localctx.art.on = this._ctx.parser._input.tokenSource._input.strdata.substring((localctx.cond===null ? null : localctx.cond.start).start, (localctx.cond===null ? null : localctx.cond.stop).stop + 1); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeAssociationElementContContext(parser, parent, invokingState, art, annos) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeAssociationElementCont;
    this.art = null
    this.annos = null
    this.cond = null; // ConditionContext
    this.art = art || null;
    this.annos = annos || null;
    return this;
}

TypeAssociationElementContContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeAssociationElementContContext.prototype.constructor = TypeAssociationElementContContext;

TypeAssociationElementContContext.prototype.requiredSemi = function() {
    return this.getTypedRuleContext(RequiredSemiContext,0);
};

TypeAssociationElementContContext.prototype.foreignKey = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForeignKeyContext);
    } else {
        return this.getTypedRuleContext(ForeignKeyContext,i);
    }
};

TypeAssociationElementContContext.prototype.ON = function() {
    return this.getToken(languageParser.ON, 0);
};

TypeAssociationElementContContext.prototype.nullability = function() {
    return this.getTypedRuleContext(NullabilityContext,0);
};

TypeAssociationElementContContext.prototype.annotationAssignment_ll1 = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationAssignment_ll1Context);
    } else {
        return this.getTypedRuleContext(AnnotationAssignment_ll1Context,i);
    }
};

TypeAssociationElementContContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};




languageParser.TypeAssociationElementContContext = TypeAssociationElementContContext;

languageParser.prototype.typeAssociationElementCont = function(art, annos) {

    var localctx = new TypeAssociationElementContContext(this, this._ctx, this.state, art, annos);
    this.enterRule(localctx, 188, languageParser.RULE_typeAssociationElementCont);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2435;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__1:
        	this.state = 2416;
        	this.match(languageParser.T__1);
        	this.state = 2417;
        	this.foreignKey( localctx.art );
        	this.state = 2423;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	while(_la===languageParser.T__2) {
        	    this.state = 2418;
        	    this.match(languageParser.T__2);
        	     if (this.isStraightBefore('}')) break; 
        	    this.state = 2420;
        	    this.foreignKey( localctx.art );
        	    this.state = 2425;
        	    this._errHandler.sync(this);
        	    _la = this._input.LA(1);
        	}
        	this.state = 2426;
        	this.match(languageParser.T__3);
        	this.state = 2428;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===languageParser.NOT || _la===languageParser.NULL) {
        	    this.state = 2427;
        	    this.nullability( localctx.art );
        	}

        	break;
        case languageParser.ON:
        	this.state = 2430;
        	this.match(languageParser.ON);
        	this.state = 2431;
        	localctx.cond = this.condition();
        	 localctx.art.onCond=localctx.cond.cond; localctx.art.on = this._ctx.parser._input.tokenSource._input.strdata.substring((localctx.cond===null ? null : localctx.cond.start).start, (localctx.cond===null ? null : localctx.cond.stop).stop + 1); 
        	break;
        case languageParser.NOT:
        case languageParser.NULL:
        	this.state = 2434;
        	this.nullability( localctx.art );
        	break;
        case languageParser.T__0:
        case languageParser.T__3:
        case languageParser.T__9:
        	break;
        default:
        	break;
        }
        this.state = 2440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__9) {
            this.state = 2437;
            this.annotationAssignment_ll1( localctx.annos );
            this.state = 2442;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2443;
        this.requiredSemi();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeToOneContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeToOne;
    this.art = null
    this.one = null; // Token
    this.art = art || null;
    return this;
}

TypeToOneContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeToOneContext.prototype.constructor = TypeToOneContext;

TypeToOneContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeToOneContext.prototype.ONE = function() {
    return this.getToken(languageParser.ONE, 0);
};




languageParser.TypeToOneContext = TypeToOneContext;

languageParser.prototype.typeToOne = function(art) {

    var localctx = new TypeToOneContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 190, languageParser.RULE_typeToOne);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2445;
        localctx.one = this.match(languageParser.ONE);
         this.setMaxCardinality( localctx.art, localctx.one, this.numberLiteral( localctx.one, null, '1' ) ); 
        this.state = 2447;
        this.simplePath( localctx.art.target, 'artref' );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeToManyContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeToMany;
    this.art = null
    this.many = null; // Token
    this.art = art || null;
    return this;
}

TypeToManyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeToManyContext.prototype.constructor = TypeToManyContext;

TypeToManyContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeToManyContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};




languageParser.TypeToManyContext = TypeToManyContext;

languageParser.prototype.typeToMany = function(art) {

    var localctx = new TypeToManyContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 192, languageParser.RULE_typeToMany);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2449;
        localctx.many = this.match(languageParser.MANY);
         this.setMaxCardinality( localctx.art, localctx.many, { literal: 'string', val: '*' } ); 
        this.state = 2451;
        this.simplePath( localctx.art.target, 'artref' );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CardinalityContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_cardinality;
    this.art = null
    this.card = {}
    this.lbrack = null; // Token
    this.srcMax = null; // Token
    this.srcMaxStar = null; // Token
    this.trgMin = null; // Token
    this.trgMax = null; // Token
    this.trgMaxStar = null; // Token
    this.art = art || null;
    return this;
}

CardinalityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CardinalityContext.prototype.constructor = CardinalityContext;

CardinalityContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};





languageParser.CardinalityContext = CardinalityContext;

languageParser.prototype.cardinality = function(art) {

    var localctx = new CardinalityContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 194, languageParser.RULE_cardinality);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2453;
        localctx.lbrack = this.match(languageParser.T__14);
         localctx.card.targetMax = { literal: 'string', val: '*',
                                  location: this.tokenLocation(localctx.lbrack) }; 
        this.state = 2474;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__10 || _la===languageParser.Number) {
            this.state = 2461;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
            if(la_===1) {
                this.state = 2455;
                localctx.srcMax = this.match(languageParser.Number);
                this.state = 2456;
                this.match(languageParser.T__2);
                 localctx.card.sourceMax = this.numberLiteral( localctx.srcMax ); 

            } else if(la_===2) {
                this.state = 2458;
                localctx.srcMaxStar = this.match(languageParser.T__10);
                this.state = 2459;
                this.match(languageParser.T__2);
                 localctx.card.sourceMax = { literal: 'string', val: '*',
                                              location: this.tokenLocation(localctx.srcMaxStar) }; 

            }
            this.state = 2466;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
            if(la_===1) {
                this.state = 2463;
                localctx.trgMin = this.match(languageParser.Number);
                this.state = 2464;
                this.match(languageParser.T__15);
                 localctx.card.targetMin = this.numberLiteral( localctx.trgMin ); 

            }
            this.state = 2472;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.Number:
                this.state = 2468;
                localctx.trgMax = this.match(languageParser.Number);
                 localctx.card.targetMax = this.numberLiteral( localctx.trgMax ); 
                break;
            case languageParser.T__10:
                this.state = 2470;
                localctx.trgMaxStar = this.match(languageParser.T__10);
                 localctx.card.targetMax = { literal: 'string', val: '*',
                                              location: this.tokenLocation(localctx.trgMaxStar) }; 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
        }

        this.state = 2476;
        this.match(languageParser.T__16);
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 2 */ localctx.art.cardinality = this.attachLocation(localctx.card); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForeignKeyContext(parser, parent, invokingState, outer) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_foreignKey;
    this.outer = null
    this.art = {}
    this.elem = {}
    this.name = null; // IdentContext
    this.outer = outer || null;
    return this;
}

ForeignKeyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForeignKeyContext.prototype.constructor = ForeignKeyContext;

ForeignKeyContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

ForeignKeyContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

ForeignKeyContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};




languageParser.ForeignKeyContext = ForeignKeyContext;

languageParser.prototype.foreignKey = function(outer) {

    var localctx = new ForeignKeyContext(this, this._ctx, this.state, outer);
    this.enterRule(localctx, 196, languageParser.RULE_foreignKey);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2478;
        this.simplePath( localctx.elem, 'ref' );
        this.state = 2481;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.AS) {
            this.state = 2479;
            this.match(languageParser.AS);
            this.state = 2480;
            localctx.name = this.ident('Key');
        }

         localctx.art =  this.addDef( localctx.outer, 'foreignKeys', 'key', (localctx.name) ? localctx.name.id : localctx.elem.path,
                                  undefined, { targetElement: localctx.elem } ) 
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeTypeOfContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeTypeOf;
    this.art = null
    this._sync = 'nop'
    this.art = art || null;
    return this;
}

TypeTypeOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeTypeOfContext.prototype.constructor = TypeTypeOfContext;

TypeTypeOfContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

TypeTypeOfContext.prototype.OF = function() {
    return this.getToken(languageParser.OF, 0);
};

TypeTypeOfContext.prototype.simplePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SimplePathContext);
    } else {
        return this.getTypedRuleContext(SimplePathContext,i);
    }
};




languageParser.TypeTypeOfContext = TypeTypeOfContext;

languageParser.prototype.typeTypeOf = function(art) {

    var localctx = new TypeTypeOfContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 198, languageParser.RULE_typeTypeOf);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2485;
        this.match(languageParser.TYPE);
        this.state = 2486;
        this.match(languageParser.OF);
         localctx.art.type = { scope: 'typeOf' }; 
        this.state = 2488;
        this.simplePath( localctx.art.type, 'ref' );
        this.state = 2492;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__6) {
            this.state = 2489;
            this.match(languageParser.T__6);
             localctx.art.type.scope = localctx.art.type.path.length; 
            this.state = 2491;
            this.simplePath( localctx.art.type, 'ref');
        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art.type); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeRefOptArgsContext(parser, parent, invokingState, art) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_typeRefOptArgs;
    this.art = null
    this.head = null; // Token
    this.tail = null; // Token
    this.art = art || null;
    return this;
}

TypeRefOptArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeRefOptArgsContext.prototype.constructor = TypeRefOptArgsContext;

TypeRefOptArgsContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

TypeRefOptArgsContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};





languageParser.TypeRefOptArgsContext = TypeRefOptArgsContext;

languageParser.prototype.typeRefOptArgs = function(art) {

    var localctx = new TypeRefOptArgsContext(this, this._ctx, this.state, art);
    this.enterRule(localctx, 200, languageParser.RULE_typeRefOptArgs);
     localctx.art.type = {}; 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2494;
        this.simplePath( localctx.art.type, 'artref' );
        this.state = 2508;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__7) {
            this.state = 2495;
            this.match(languageParser.T__7);
            this.state = 2496;
            localctx.head = this.match(languageParser.Number);
             localctx.art.typeArguments = [ this.numberLiteral( localctx.head ) ]; 
            this.state = 2504;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2498;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 2500;
                localctx.tail = this.match(languageParser.Number);
                 localctx.art.typeArguments.push( this.numberLiteral( localctx.tail ) ); 
                this.state = 2506;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 2507;
            this.match(languageParser.T__8);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryExpression;
    this.query = null
    this.op = null
    this.qt1 = null; // QueryTermContext
    this.un = null; // Token
    this.ex = null; // Token
    this.mi = null; // Token
    this.qt = null; // QueryTermContext
    this.ob = null; // Token
    this.ob1 = null; // OrderBySpecContext
    this.obn = null; // OrderBySpecContext
    this.limkw = null; // Token
    this.lim = null; // Token
    this.limnull = null; // Token
    this.off = null; // Token
    return this;
}

QueryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryExpressionContext.prototype.constructor = QueryExpressionContext;

QueryExpressionContext.prototype.queryTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryTermContext);
    } else {
        return this.getTypedRuleContext(QueryTermContext,i);
    }
};

QueryExpressionContext.prototype.BY = function() {
    return this.getToken(languageParser.BY, 0);
};

QueryExpressionContext.prototype.ORDER = function() {
    return this.getToken(languageParser.ORDER, 0);
};

QueryExpressionContext.prototype.orderBySpec = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderBySpecContext);
    } else {
        return this.getTypedRuleContext(OrderBySpecContext,i);
    }
};

QueryExpressionContext.prototype.LIMIT = function() {
    return this.getToken(languageParser.LIMIT, 0);
};

QueryExpressionContext.prototype.UNION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.UNION);
    } else {
        return this.getToken(languageParser.UNION, i);
    }
};


QueryExpressionContext.prototype.EXCEPT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.EXCEPT);
    } else {
        return this.getToken(languageParser.EXCEPT, i);
    }
};


QueryExpressionContext.prototype.MINUS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.MINUS);
    } else {
        return this.getToken(languageParser.MINUS, i);
    }
};


QueryExpressionContext.prototype.Number = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.Number);
    } else {
        return this.getToken(languageParser.Number, i);
    }
};


QueryExpressionContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};

QueryExpressionContext.prototype.OFFSET = function() {
    return this.getToken(languageParser.OFFSET, 0);
};

QueryExpressionContext.prototype.DISTINCT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.DISTINCT);
    } else {
        return this.getToken(languageParser.DISTINCT, i);
    }
};


QueryExpressionContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.ALL);
    } else {
        return this.getToken(languageParser.ALL, i);
    }
};





languageParser.QueryExpressionContext = QueryExpressionContext;

languageParser.prototype.queryExpression = function() {

    var localctx = new QueryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, languageParser.RULE_queryExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2510;
        localctx.qt1 = this.queryTerm();
         localctx.query =  localctx.qt1.query 
        this.state = 2536;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.EXCEPT || _la===languageParser.MINUS || _la===languageParser.UNION) {
            this.state = 2529;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.UNION:
                this.state = 2512;
                localctx.un = this.match(languageParser.UNION);
                 localctx.op =  this.tokenLocation(localctx.un, undefined, 'union') 
                this.state = 2517;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                case languageParser.DISTINCT:
                	this.state = 2514;
                	this.match(languageParser.DISTINCT);
                	break;
                case languageParser.ALL:
                	this.state = 2515;
                	this.match(languageParser.ALL);
                	 localctx.op =  this.tokenLocation(localctx.un, undefined, 'unionAll') 
                	break;
                case languageParser.T__7:
                case languageParser.SELECT:
                	break;
                default:
                	break;
                }
                break;
            case languageParser.EXCEPT:
                this.state = 2519;
                localctx.ex = this.match(languageParser.EXCEPT);
                this.state = 2521;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.DISTINCT) {
                    this.state = 2520;
                    this.match(languageParser.DISTINCT);
                }

                 localctx.op =  this.tokenLocation(localctx.ex, undefined, 'except') 
                break;
            case languageParser.MINUS:
                this.state = 2524;
                localctx.mi = this.match(languageParser.MINUS);
                this.state = 2526;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.DISTINCT) {
                    this.state = 2525;
                    this.match(languageParser.DISTINCT);
                }

                 localctx.op =  this.tokenLocation(localctx.mi, undefined, 'except') 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2531;
            localctx.qt = this.queryTerm();

                    localctx.query =  {
                      op: localctx.op, args: [localctx.query, localctx.qt.query],
                      location: this.combinedLocation( localctx.query, localctx.qt.query) }
                  
            this.state = 2538;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 2553;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.ORDER) {
            this.state = 2539;
            localctx.ob = this.match(languageParser.ORDER);
            this.state = 2540;
            this.match(languageParser.BY);

                    if (localctx.query instanceof Array) // use 'subquery' as no-op operator
                      localctx.query =  { op: this.tokenLocation( localctx.ob, undefined, 'subquery' ), args: [localctx.query], location: localctx.query.location }
                  
            this.state = 2542;
            localctx.ob1 = this.orderBySpec();
             localctx.query.orderBy = [ localctx.ob1.ob ]; 
            this.state = 2550;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 2544;
                this.match(languageParser.T__2);
                this.state = 2545;
                localctx.obn = this.orderBySpec();
                 localctx.query.orderBy.push( localctx.obn.ob ); 
                this.state = 2552;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 2568;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.LIMIT) {
            this.state = 2555;
            localctx.limkw = this.match(languageParser.LIMIT);

                    if (localctx.query instanceof Array) // use 'subquery' as no-op operator
                      localctx.query =  { op: this.tokenLocation( localctx.limkw, undefined, 'subquery' ), args: [localctx.query], location: localctx.query.location }
                  
            this.state = 2561;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.Number:
                this.state = 2557;
                localctx.lim = this.match(languageParser.Number);
                 localctx.query.limit = this.numberLiteral( localctx.lim, '' ); 
                break;
            case languageParser.NULL:
                this.state = 2559;
                localctx.limnull = this.match(languageParser.NULL);
                 localctx.query.limit = { literal: 'null', val: null, location: this.tokenLocation(localctx.limnull) }; 
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2566;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.OFFSET) {
                this.state = 2563;
                this.match(languageParser.OFFSET);
                this.state = 2564;
                localctx.off = this.match(languageParser.Number);
                 localctx.query.offset = this.numberLiteral( localctx.off ); 
            }

        }

        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderBySpecContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_orderBySpec;
    this.ob = null
    this.e = null; // ExpressionContext
    this.asc = null; // Token
    this.desc = null; // Token
    this.nb = null; // Token
    this.ne = null; // Token
    return this;
}

OrderBySpecContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderBySpecContext.prototype.constructor = OrderBySpecContext;

OrderBySpecContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OrderBySpecContext.prototype.ASC = function() {
    return this.getToken(languageParser.ASC, 0);
};

OrderBySpecContext.prototype.DESC = function() {
    return this.getToken(languageParser.DESC, 0);
};

OrderBySpecContext.prototype.NULLS = function() {
    return this.getToken(languageParser.NULLS, 0);
};

OrderBySpecContext.prototype.FIRST = function() {
    return this.getToken(languageParser.FIRST, 0);
};

OrderBySpecContext.prototype.LAST = function() {
    return this.getToken(languageParser.LAST, 0);
};




languageParser.OrderBySpecContext = OrderBySpecContext;

languageParser.prototype.orderBySpec = function() {

    var localctx = new OrderBySpecContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, languageParser.RULE_orderBySpec);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2570;
        localctx.e = this.expression();
         localctx.ob =  { value: localctx.e.expr } 
        this.state = 2576;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.ASC:
        	this.state = 2572;
        	localctx.asc = this.match(languageParser.ASC);
        	 localctx.ob.sort = this.tokenLocation( localctx.asc, undefined, 'asc' ); 
        	break;
        case languageParser.DESC:
        	this.state = 2574;
        	localctx.desc = this.match(languageParser.DESC);
        	 localctx.ob.sort = this.tokenLocation( localctx.desc, undefined, 'desc' ); 
        	break;
        case languageParser.EOF:
        case languageParser.T__0:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__8:
        case languageParser.ACTIONS:
        case languageParser.LIMIT:
        case languageParser.NULLS:
        	break;
        default:
        	break;
        }
        this.state = 2581;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.NULLS) {
            this.state = 2578;
            localctx.nb = this.match(languageParser.NULLS);
            this.state = 2579;
            localctx.ne = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.FIRST || _la===languageParser.LAST)) {
                localctx.ne = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
             localctx.ob.nulls = this.tokenLocation( localctx.nb, localctx.ne, (localctx.ne===null ? null : localctx.ne.text).toLowerCase() ); 
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryTerm;
    this.query = null
    this.qt1 = null; // QueryPrimaryContext
    this.intersect = null; // Token
    this.qt = null; // QueryPrimaryContext
    return this;
}

QueryTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryTermContext.prototype.constructor = QueryTermContext;

QueryTermContext.prototype.queryPrimary = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryPrimaryContext);
    } else {
        return this.getTypedRuleContext(QueryPrimaryContext,i);
    }
};

QueryTermContext.prototype.INTERSECT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.INTERSECT);
    } else {
        return this.getToken(languageParser.INTERSECT, i);
    }
};


QueryTermContext.prototype.DISTINCT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.DISTINCT);
    } else {
        return this.getToken(languageParser.DISTINCT, i);
    }
};





languageParser.QueryTermContext = QueryTermContext;

languageParser.prototype.queryTerm = function() {

    var localctx = new QueryTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, languageParser.RULE_queryTerm);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2583;
        localctx.qt1 = this.queryPrimary();
         localctx.query =  localctx.qt1.query 
        this.state = 2594;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.INTERSECT) {
            this.state = 2585;
            localctx.intersect = this.match(languageParser.INTERSECT);
            this.state = 2587;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.DISTINCT) {
                this.state = 2586;
                this.match(languageParser.DISTINCT);
            }

            this.state = 2589;
            localctx.qt = this.queryPrimary();

                    localctx.query =  {
                      op: this.tokenLocation( localctx.intersect, undefined, 'intersect' ), args: [localctx.query, localctx.qt.query],
                      location: this.combinedLocation( localctx.query, localctx.qt.query) }
                  
            this.state = 2596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QueryPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_queryPrimary;
    this.query = {}
    this.qe = null; // QueryExpressionContext
    this.select = null; // Token
    this.t1 = null; // TableExpressionContext
    this.tn = null; // TableExpressionContext
    this.mixin = null; // Token
    this.top = null; // Token
    this.ad = null; // Token
    this.star = null; // Token
    this.cond = null; // ConditionContext
    this.e1 = null; // ExpressionContext
    this.en = null; // ExpressionContext
    this.having = null; // ConditionContext
    return this;
}

QueryPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryPrimaryContext.prototype.constructor = QueryPrimaryContext;

QueryPrimaryContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

QueryPrimaryContext.prototype.SELECT = function() {
    return this.getToken(languageParser.SELECT, 0);
};

QueryPrimaryContext.prototype.FROM = function() {
    return this.getToken(languageParser.FROM, 0);
};

QueryPrimaryContext.prototype.tableExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableExpressionContext);
    } else {
        return this.getTypedRuleContext(TableExpressionContext,i);
    }
};

QueryPrimaryContext.prototype.WHERE = function() {
    return this.getToken(languageParser.WHERE, 0);
};

QueryPrimaryContext.prototype.GROUP = function() {
    return this.getToken(languageParser.GROUP, 0);
};

QueryPrimaryContext.prototype.BY = function() {
    return this.getToken(languageParser.BY, 0);
};

QueryPrimaryContext.prototype.HAVING = function() {
    return this.getToken(languageParser.HAVING, 0);
};

QueryPrimaryContext.prototype.selectItemDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemDefContext,i);
    }
};

QueryPrimaryContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

QueryPrimaryContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

QueryPrimaryContext.prototype.INTO = function() {
    return this.getToken(languageParser.INTO, 0);
};

QueryPrimaryContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

QueryPrimaryContext.prototype.EXCLUDING = function() {
    return this.getToken(languageParser.EXCLUDING, 0);
};

QueryPrimaryContext.prototype.projectionExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProjectionExclusionContext);
    } else {
        return this.getTypedRuleContext(ProjectionExclusionContext,i);
    }
};

QueryPrimaryContext.prototype.MIXIN = function() {
    return this.getToken(languageParser.MIXIN, 0);
};

QueryPrimaryContext.prototype.TOP = function() {
    return this.getToken(languageParser.TOP, 0);
};

QueryPrimaryContext.prototype.ALL = function() {
    return this.getToken(languageParser.ALL, 0);
};

QueryPrimaryContext.prototype.DISTINCT = function() {
    return this.getToken(languageParser.DISTINCT, 0);
};

QueryPrimaryContext.prototype.mixinElementDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MixinElementDefContext);
    } else {
        return this.getTypedRuleContext(MixinElementDefContext,i);
    }
};




languageParser.QueryPrimaryContext = QueryPrimaryContext;

languageParser.prototype.queryPrimary = function() {

    var localctx = new QueryPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, languageParser.RULE_queryPrimary);
    var _la = 0; // Token type
    try {
        this.state = 2729;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__7:
            this.enterOuterAlt(localctx, 1);
            this.state = 2597;
            this.match(languageParser.T__7);
            this.state = 2598;
            localctx.qe = this.queryExpression();
            this.state = 2599;
            this.match(languageParser.T__8);
             localctx.query =  [localctx.qe.query] 
            break;
        case languageParser.SELECT:
            this.enterOuterAlt(localctx, 2);
            this.state = 2602;
            localctx.select = this.match(languageParser.SELECT);
             localctx.query =  { op: this.tokenLocation( localctx.select, undefined, 'query' ), location: this.startLocation() } 
            this.state = 2700;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.FROM:
                this.state = 2604;
                this.match(languageParser.FROM);
                this.state = 2605;
                localctx.t1 = this.tableExpression();
                 localctx.query.from = [localctx.t1.query]; 
                this.state = 2613;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2607;
                    this.match(languageParser.T__2);
                    this.state = 2608;
                    localctx.tn = this.tableExpression();
                     localctx.query.from.push( localctx.tn.query ); 
                    this.state = 2615;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2626;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.MIXIN) {
                    this.state = 2616;
                    localctx.mixin = this.match(languageParser.MIXIN);
                    this.state = 2617;
                    this.match(languageParser.T__1);
                    this.state = 2621;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0)) {
                        this.state = 2618;
                        this.mixinElementDef( localctx.query );
                        this.state = 2623;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2624;
                    this.match(languageParser.T__3);
                    this.state = 2625;
                    this.match(languageParser.INTO);
                }

                this.state = 2631;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.TOP) {
                    this.state = 2628;
                    localctx.top = this.match(languageParser.TOP);
                    this.state = 2629;
                    this.match(languageParser.Number);
                     this.hanaFlavorOnly( localctx.top ); 
                }

                this.state = 2635;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
                    this.state = 2633;
                    localctx.ad = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
                        localctx.ad = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                     localctx.query.quantifier = this.tokenLocation( localctx.ad, undefined, (localctx.ad===null ? null : localctx.ad.text).toLowerCase() ); 
                }

                this.state = 2653;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.T__1) {
                    this.state = 2637;
                    this.match(languageParser.T__1);
                     localctx.query.columns = []; 
                    this.state = 2642;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case languageParser.T__10:
                        this.state = 2639;
                        localctx.star = this.match(languageParser.T__10);

                                    localctx.query.columns = [ this.tokenLocation( localctx.star, undefined, '*' ) ];
                                  
                        break;
                    case languageParser.T__1:
                    case languageParser.T__5:
                    case languageParser.T__6:
                    case languageParser.T__7:
                    case languageParser.T__9:
                    case languageParser.T__23:
                    case languageParser.T__24:
                    case languageParser.T__26:
                    case languageParser.String:
                    case languageParser.QuotedLiteral:
                    case languageParser.Boolean:
                    case languageParser.CASE:
                    case languageParser.CAST:
                    case languageParser.EXTRACT:
                    case languageParser.KEY:
                    case languageParser.NEW:
                    case languageParser.NULL:
                    case languageParser.TRIM:
                    case languageParser.Number:
                    case languageParser.ABSTRACT:
                    case languageParser.ACTION:
                    case languageParser.ACTIONS:
                    case languageParser.AFTER:
                    case languageParser.ALWAYS:
                    case languageParser.ANALYSIS:
                    case languageParser.AND:
                    case languageParser.ANNOTATE:
                    case languageParser.ANNOTATION:
                    case languageParser.ARRAY:
                    case languageParser.ASC:
                    case languageParser.ASPECT:
                    case languageParser.ASSOCIATION:
                    case languageParser.ASYNC:
                    case languageParser.ASYNCHRONOUS:
                    case languageParser.AUTO:
                    case languageParser.BETWEEN:
                    case languageParser.BOTH:
                    case languageParser.CACHE:
                    case languageParser.COLUMN:
                    case languageParser.COLUMNS:
                    case languageParser.COMPOSITION:
                    case languageParser.CONFIGURATION:
                    case languageParser.CONST:
                    case languageParser.CONTEXT:
                    case languageParser.CROSS:
                    case languageParser.CURRENT:
                    case languageParser.CYCLE:
                    case languageParser.DAY:
                    case languageParser.DEFAULT:
                    case languageParser.DEFINE:
                    case languageParser.DEPENDS:
                    case languageParser.DESC:
                    case languageParser.DETECTION:
                    case languageParser.DISABLED:
                    case languageParser.DOCUMENTS:
                    case languageParser.ELEMENT:
                    case languageParser.ELSE:
                    case languageParser.ENABLED:
                    case languageParser.END:
                    case languageParser.ENTITY:
                    case languageParser.ENUM:
                    case languageParser.EVENT:
                    case languageParser.EVERY:
                    case languageParser.ESCAPE:
                    case languageParser.EXCEPT:
                    case languageParser.EXCLUDING:
                    case languageParser.EXISTING:
                    case languageParser.EXTEND:
                    case languageParser.EXTENDED:
                    case languageParser.FAST:
                    case languageParser.FIRST:
                    case languageParser.FLUSH:
                    case languageParser.FULL:
                    case languageParser.FULLTEXT:
                    case languageParser.FUNCTION:
                    case languageParser.FUZZY:
                    case languageParser.GENERATED:
                    case languageParser.GETNUMSERVERS:
                    case languageParser.GROUP:
                    case languageParser.HANA:
                    case languageParser.HASH:
                    case languageParser.HAVING:
                    case languageParser.HOUR:
                    case languageParser.IDENTITY:
                    case languageParser.INCREMENT:
                    case languageParser.INDEX:
                    case languageParser.INNER:
                    case languageParser.INTERSECT:
                    case languageParser.INTO:
                    case languageParser.IS:
                    case languageParser.JOIN:
                    case languageParser.KEEPING:
                    case languageParser.LANGUAGE:
                    case languageParser.LAST:
                    case languageParser.LAYOUT:
                    case languageParser.LEADING:
                    case languageParser.LEFT:
                    case languageParser.LIKE:
                    case languageParser.LIMIT:
                    case languageParser.LOCALIZED:
                    case languageParser.MANY:
                    case languageParser.MASKED:
                    case languageParser.MAXVALUE:
                    case languageParser.MERGE:
                    case languageParser.MIGRATION:
                    case languageParser.MINING:
                    case languageParser.MINUS:
                    case languageParser.MINUTE:
                    case languageParser.MINUTES:
                    case languageParser.MINVALUE:
                    case languageParser.MIME:
                    case languageParser.MIXIN:
                    case languageParser.MODE:
                    case languageParser.MONTH:
                    case languageParser.NAME:
                    case languageParser.NAMESPACE:
                    case languageParser.NO:
                    case languageParser.NULLS:
                    case languageParser.OFF:
                    case languageParser.OFFSET:
                    case languageParser.ONE:
                    case languageParser.ONLY:
                    case languageParser.OR:
                    case languageParser.ORDER:
                    case languageParser.OTHERS:
                    case languageParser.OUTER:
                    case languageParser.OVERLAY:
                    case languageParser.QUEUE:
                    case languageParser.PARAMETERS:
                    case languageParser.PARTITION:
                    case languageParser.PARTITIONING:
                    case languageParser.PARTITIONS:
                    case languageParser.PHRASE:
                    case languageParser.PREPROCESS:
                    case languageParser.PRIORITY:
                    case languageParser.PROJECTION:
                    case languageParser.RANGE:
                    case languageParser.RATIO:
                    case languageParser.REDIRECTED:
                    case languageParser.RESET:
                    case languageParser.RETURNS:
                    case languageParser.RIGHT:
                    case languageParser.ROUNDROBIN:
                    case languageParser.ROW:
                    case languageParser.SEARCH:
                    case languageParser.SECOND:
                    case languageParser.SEPARATORS:
                    case languageParser.SERVICE:
                    case languageParser.START:
                    case languageParser.STORAGE:
                    case languageParser.STORE:
                    case languageParser.SUBTYPE:
                    case languageParser.SYNC:
                    case languageParser.SYNCHRONOUS:
                    case languageParser.TABLE:
                    case languageParser.TECHNICAL:
                    case languageParser.TEMPORARY:
                    case languageParser.TEXT:
                    case languageParser.THEN:
                    case languageParser.TOKEN:
                    case languageParser.TOP:
                    case languageParser.TRAILING:
                    case languageParser.TO:
                    case languageParser.TYPE:
                    case languageParser.UNION:
                    case languageParser.UNIQUE:
                    case languageParser.UNLOAD:
                    case languageParser.USING:
                    case languageParser.VALUE:
                    case languageParser.VALUES:
                    case languageParser.VIEW:
                    case languageParser.VIRTUAL:
                    case languageParser.YEAR:
                    case languageParser.Identifier:
                        this.state = 2641;
                        this.selectItemDef( localctx.query );
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    this.state = 2649;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 2644;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore('}')) break; 
                        this.state = 2646;
                        this.selectItemDef( localctx.query );
                        this.state = 2651;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2652;
                    this.match(languageParser.T__3);
                }

                this.state = 2668;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.EXCLUDING) {
                    this.state = 2655;
                    this.match(languageParser.EXCLUDING);
                    this.state = 2656;
                    this.match(languageParser.T__1);
                    this.state = 2657;
                    this.projectionExclusion( localctx.query );
                    this.state = 2663;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 2658;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore('}')) break; 
                        this.state = 2660;
                        this.projectionExclusion( localctx.query );
                        this.state = 2665;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    this.state = 2666;
                    this.match(languageParser.T__3);
                }

                break;
            case languageParser.T__1:
            case languageParser.T__5:
            case languageParser.T__6:
            case languageParser.T__7:
            case languageParser.T__9:
            case languageParser.T__10:
            case languageParser.T__23:
            case languageParser.T__24:
            case languageParser.T__26:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.ALL:
            case languageParser.CASE:
            case languageParser.CAST:
            case languageParser.DISTINCT:
            case languageParser.EXTRACT:
            case languageParser.KEY:
            case languageParser.NEW:
            case languageParser.NULL:
            case languageParser.TRIM:
            case languageParser.Number:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AFTER:
            case languageParser.ALWAYS:
            case languageParser.ANALYSIS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.ASYNC:
            case languageParser.ASYNCHRONOUS:
            case languageParser.AUTO:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.CACHE:
            case languageParser.COLUMN:
            case languageParser.COLUMNS:
            case languageParser.COMPOSITION:
            case languageParser.CONFIGURATION:
            case languageParser.CONST:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.CURRENT:
            case languageParser.CYCLE:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DEPENDS:
            case languageParser.DESC:
            case languageParser.DETECTION:
            case languageParser.DISABLED:
            case languageParser.DOCUMENTS:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.ENABLED:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.EVERY:
            case languageParser.ESCAPE:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXISTING:
            case languageParser.EXTEND:
            case languageParser.EXTENDED:
            case languageParser.FAST:
            case languageParser.FIRST:
            case languageParser.FLUSH:
            case languageParser.FULL:
            case languageParser.FULLTEXT:
            case languageParser.FUNCTION:
            case languageParser.FUZZY:
            case languageParser.GENERATED:
            case languageParser.GETNUMSERVERS:
            case languageParser.GROUP:
            case languageParser.HANA:
            case languageParser.HASH:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.IDENTITY:
            case languageParser.INCREMENT:
            case languageParser.INDEX:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.KEEPING:
            case languageParser.LANGUAGE:
            case languageParser.LAST:
            case languageParser.LAYOUT:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MAXVALUE:
            case languageParser.MERGE:
            case languageParser.MIGRATION:
            case languageParser.MINING:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MINUTES:
            case languageParser.MINVALUE:
            case languageParser.MIME:
            case languageParser.MIXIN:
            case languageParser.MODE:
            case languageParser.MONTH:
            case languageParser.NAME:
            case languageParser.NAMESPACE:
            case languageParser.NO:
            case languageParser.NULLS:
            case languageParser.OFF:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.ONLY:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OTHERS:
            case languageParser.OUTER:
            case languageParser.OVERLAY:
            case languageParser.QUEUE:
            case languageParser.PARAMETERS:
            case languageParser.PARTITION:
            case languageParser.PARTITIONING:
            case languageParser.PARTITIONS:
            case languageParser.PHRASE:
            case languageParser.PREPROCESS:
            case languageParser.PRIORITY:
            case languageParser.PROJECTION:
            case languageParser.RANGE:
            case languageParser.RATIO:
            case languageParser.REDIRECTED:
            case languageParser.RESET:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.ROUNDROBIN:
            case languageParser.ROW:
            case languageParser.SEARCH:
            case languageParser.SECOND:
            case languageParser.SEPARATORS:
            case languageParser.SERVICE:
            case languageParser.START:
            case languageParser.STORAGE:
            case languageParser.STORE:
            case languageParser.SUBTYPE:
            case languageParser.SYNC:
            case languageParser.SYNCHRONOUS:
            case languageParser.TABLE:
            case languageParser.TECHNICAL:
            case languageParser.TEMPORARY:
            case languageParser.TEXT:
            case languageParser.THEN:
            case languageParser.TOKEN:
            case languageParser.TOP:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.UNIQUE:
            case languageParser.UNLOAD:
            case languageParser.USING:
            case languageParser.VALUE:
            case languageParser.VALUES:
            case languageParser.VIEW:
            case languageParser.VIRTUAL:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 2672;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ALL || _la===languageParser.DISTINCT) {
                    this.state = 2670;
                    localctx.ad = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===languageParser.ALL || _la===languageParser.DISTINCT)) {
                        localctx.ad = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                     localctx.query.quantifier = this.tokenLocation( localctx.ad, undefined, (localctx.ad===null ? null : localctx.ad.text).toLowerCase() ); 
                }

                 localctx.query.columns = []; 
                this.state = 2678;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__10:
                    this.state = 2675;
                    localctx.star = this.match(languageParser.T__10);

                              localctx.query.columns = [ this.tokenLocation( localctx.star, undefined, '*' ) ];
                            
                    break;
                case languageParser.T__1:
                case languageParser.T__5:
                case languageParser.T__6:
                case languageParser.T__7:
                case languageParser.T__9:
                case languageParser.T__23:
                case languageParser.T__24:
                case languageParser.T__26:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.EXTRACT:
                case languageParser.KEY:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.TRIM:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AFTER:
                case languageParser.ALWAYS:
                case languageParser.ANALYSIS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.ASYNC:
                case languageParser.ASYNCHRONOUS:
                case languageParser.AUTO:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.CACHE:
                case languageParser.COLUMN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONFIGURATION:
                case languageParser.CONST:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.CYCLE:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEPENDS:
                case languageParser.DESC:
                case languageParser.DETECTION:
                case languageParser.DISABLED:
                case languageParser.DOCUMENTS:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.ENABLED:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.EVERY:
                case languageParser.ESCAPE:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXISTING:
                case languageParser.EXTEND:
                case languageParser.EXTENDED:
                case languageParser.FAST:
                case languageParser.FIRST:
                case languageParser.FLUSH:
                case languageParser.FULL:
                case languageParser.FULLTEXT:
                case languageParser.FUNCTION:
                case languageParser.FUZZY:
                case languageParser.GENERATED:
                case languageParser.GETNUMSERVERS:
                case languageParser.GROUP:
                case languageParser.HANA:
                case languageParser.HASH:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.IDENTITY:
                case languageParser.INCREMENT:
                case languageParser.INDEX:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.KEEPING:
                case languageParser.LANGUAGE:
                case languageParser.LAST:
                case languageParser.LAYOUT:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MAXVALUE:
                case languageParser.MERGE:
                case languageParser.MIGRATION:
                case languageParser.MINING:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MINUTES:
                case languageParser.MINVALUE:
                case languageParser.MIME:
                case languageParser.MIXIN:
                case languageParser.MODE:
                case languageParser.MONTH:
                case languageParser.NAME:
                case languageParser.NAMESPACE:
                case languageParser.NO:
                case languageParser.NULLS:
                case languageParser.OFF:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.ONLY:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OTHERS:
                case languageParser.OUTER:
                case languageParser.OVERLAY:
                case languageParser.QUEUE:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PARTITIONING:
                case languageParser.PARTITIONS:
                case languageParser.PHRASE:
                case languageParser.PREPROCESS:
                case languageParser.PRIORITY:
                case languageParser.PROJECTION:
                case languageParser.RANGE:
                case languageParser.RATIO:
                case languageParser.REDIRECTED:
                case languageParser.RESET:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROUNDROBIN:
                case languageParser.ROW:
                case languageParser.SEARCH:
                case languageParser.SECOND:
                case languageParser.SEPARATORS:
                case languageParser.SERVICE:
                case languageParser.START:
                case languageParser.STORAGE:
                case languageParser.STORE:
                case languageParser.SUBTYPE:
                case languageParser.SYNC:
                case languageParser.SYNCHRONOUS:
                case languageParser.TABLE:
                case languageParser.TECHNICAL:
                case languageParser.TEMPORARY:
                case languageParser.TEXT:
                case languageParser.THEN:
                case languageParser.TOKEN:
                case languageParser.TOP:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNIQUE:
                case languageParser.UNLOAD:
                case languageParser.USING:
                case languageParser.VALUE:
                case languageParser.VALUES:
                case languageParser.VIEW:
                case languageParser.VIRTUAL:
                case languageParser.YEAR:
                case languageParser.Identifier:
                    this.state = 2677;
                    this.selectItemDef( localctx.query );
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2685;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2680;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore('}')) break; 
                    this.state = 2682;
                    this.selectItemDef( localctx.query );
                    this.state = 2687;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                this.state = 2688;
                this.match(languageParser.FROM);
                this.state = 2689;
                localctx.t1 = this.tableExpression();
                 localctx.query.from = [localctx.t1.query]; 
                this.state = 2697;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2691;
                    this.match(languageParser.T__2);
                    this.state = 2692;
                    localctx.tn = this.tableExpression();
                     localctx.query.from.push( localctx.tn.query ); 
                    this.state = 2699;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2706;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.WHERE) {
                this.state = 2702;
                this.match(languageParser.WHERE);
                this.state = 2703;
                localctx.cond = this.condition();
                 localctx.query.where = localctx.cond.cond; 
            }

            this.state = 2721;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.GROUP) {
                this.state = 2708;
                this.match(languageParser.GROUP);
                this.state = 2709;
                this.match(languageParser.BY);
                this.state = 2710;
                localctx.e1 = this.expression();
                 localctx.query.groupBy = [ localctx.e1.expr ]; 
                this.state = 2718;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 2712;
                    this.match(languageParser.T__2);
                    this.state = 2713;
                    localctx.en = this.expression();
                     localctx.query.groupBy.push( localctx.en.expr ); 
                    this.state = 2720;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 2727;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.HAVING) {
                this.state = 2723;
                this.match(languageParser.HAVING);
                this.state = 2724;
                localctx.having = this.condition();
                 localctx.query.having = localctx.having.cond; 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_tableExpression;
    this.query = null
    this.join = null
    this.op = null
    this.qt = null; // TableTermContext
    this.j = null; // Token
    this.i = null; // Token
    this.l = null; // Token
    this.r = null; // Token
    this.f = null; // Token
    this.te = null; // TableExpressionContext
    this.cond = null; // ConditionContext
    this.crj = null; // Token
    this.jn = null; // Token
    this.tt = null; // TableTermContext
    return this;
}

TableExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableExpressionContext.prototype.constructor = TableExpressionContext;

TableExpressionContext.prototype.tableTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableTermContext);
    } else {
        return this.getTypedRuleContext(TableTermContext,i);
    }
};

TableExpressionContext.prototype.ON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.ON);
    } else {
        return this.getToken(languageParser.ON, i);
    }
};


TableExpressionContext.prototype.tableExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableExpressionContext);
    } else {
        return this.getTypedRuleContext(TableExpressionContext,i);
    }
};

TableExpressionContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

TableExpressionContext.prototype.CROSS = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.CROSS);
    } else {
        return this.getToken(languageParser.CROSS, i);
    }
};


TableExpressionContext.prototype.JOIN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.JOIN);
    } else {
        return this.getToken(languageParser.JOIN, i);
    }
};


TableExpressionContext.prototype.INNER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.INNER);
    } else {
        return this.getToken(languageParser.INNER, i);
    }
};


TableExpressionContext.prototype.LEFT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.LEFT);
    } else {
        return this.getToken(languageParser.LEFT, i);
    }
};


TableExpressionContext.prototype.RIGHT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.RIGHT);
    } else {
        return this.getToken(languageParser.RIGHT, i);
    }
};


TableExpressionContext.prototype.FULL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.FULL);
    } else {
        return this.getToken(languageParser.FULL, i);
    }
};


TableExpressionContext.prototype.OUTER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.OUTER);
    } else {
        return this.getToken(languageParser.OUTER, i);
    }
};





languageParser.TableExpressionContext = TableExpressionContext;

languageParser.prototype.tableExpression = function() {

    var localctx = new TableExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, languageParser.RULE_tableExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2731;
        localctx.qt = this.tableTerm();
         localctx.query =  localctx.qt.query 
        this.state = 2771;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.CROSS || _la===languageParser.FULL || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.INNER - 128)) | (1 << (languageParser.JOIN - 128)) | (1 << (languageParser.LEFT - 128)))) !== 0) || _la===languageParser.RIGHT) {
            this.state = 2769;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.FULL:
            case languageParser.INNER:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.RIGHT:
                this.state = 2756;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.JOIN:
                    this.state = 2733;
                    localctx.j = this.match(languageParser.JOIN);
                     localctx.op =  this.tokenLocation( localctx.j, undefined, 'join' ); localctx.join =  'inner' 
                    break;
                case languageParser.INNER:
                    this.state = 2735;
                    localctx.i = this.match(languageParser.INNER);
                    this.state = 2736;
                    localctx.j = this.match(languageParser.JOIN);
                     localctx.op =  this.tokenLocation( localctx.i, localctx.j, 'join' ); localctx.join =  'inner' 
                    break;
                case languageParser.LEFT:
                    this.state = 2738;
                    localctx.l = this.match(languageParser.LEFT);
                    this.state = 2740;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.OUTER) {
                        this.state = 2739;
                        this.match(languageParser.OUTER);
                    }

                    this.state = 2742;
                    localctx.j = this.match(languageParser.JOIN);
                     localctx.op =  this.tokenLocation( localctx.l, localctx.j, 'join' ); localctx.join =  'leftOuter' 
                    break;
                case languageParser.RIGHT:
                    this.state = 2744;
                    localctx.r = this.match(languageParser.RIGHT);
                    this.state = 2746;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.OUTER) {
                        this.state = 2745;
                        this.match(languageParser.OUTER);
                    }

                    this.state = 2748;
                    localctx.j = this.match(languageParser.JOIN);
                     localctx.op =  this.tokenLocation( localctx.r, localctx.j, 'join' ); localctx.join =  'rightOuter' 
                    break;
                case languageParser.FULL:
                    this.state = 2750;
                    localctx.f = this.match(languageParser.FULL);
                    this.state = 2752;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===languageParser.OUTER) {
                        this.state = 2751;
                        this.match(languageParser.OUTER);
                    }

                    this.state = 2754;
                    localctx.j = this.match(languageParser.JOIN);
                     localctx.op =  this.tokenLocation( localctx.f, localctx.j, 'join' ); localctx.join =  'fullOuter' 
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2758;
                localctx.te = this.tableExpression();
                 localctx.query =  { op: localctx.op, join: localctx.join, args: [localctx.query, localctx.te.query] } 
                this.state = 2760;
                this.match(languageParser.ON);
                this.state = 2761;
                localctx.cond = this.condition();

                        localctx.query.on = localctx.cond.cond;
                        localctx.query.location = this.combinedLocation( localctx.query.args[0], localctx.cond.cond );
                      
                break;
            case languageParser.CROSS:
                this.state = 2764;
                localctx.crj = this.match(languageParser.CROSS);
                this.state = 2765;
                localctx.jn = this.match(languageParser.JOIN);
                this.state = 2766;
                localctx.tt = this.tableTerm();

                        localctx.query =  {              // "," -> mit $ syntax:","
                          op: this.tokenLocation( localctx.crj, localctx.jn, 'join' ), join: 'cross', args: [localctx.query, localctx.tt.query],
                          location: this.combinedLocation( localctx.query, localctx.tt.query) }
                      
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 2773;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TableTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_tableTerm;
    this.query = null
    this.n1 = null; // IdentContext
    this.n2 = null; // IdentNoKeywordContext
    this.qe = null; // QueryExpressionContext
    this.a1 = null; // IdentContext
    this.a2 = null; // IdentNoKeywordContext
    this.te = null; // TableExpressionContext
    return this;
}

TableTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableTermContext.prototype.constructor = TableTermContext;

TableTermContext.prototype.fromPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FromPathContext);
    } else {
        return this.getTypedRuleContext(FromPathContext,i);
    }
};

TableTermContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

TableTermContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

TableTermContext.prototype.identNoKeyword = function() {
    return this.getTypedRuleContext(IdentNoKeywordContext,0);
};

TableTermContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

TableTermContext.prototype.tableExpression = function() {
    return this.getTypedRuleContext(TableExpressionContext,0);
};




languageParser.TableTermContext = TableTermContext;

languageParser.prototype.tableTerm = function() {

    var localctx = new TableTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, languageParser.RULE_tableTerm);
    var _la = 0; // Token type
    try {
        this.state = 2809;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 1);
             localctx.query =  { path: [], scope: 0 } 
            this.state = 2775;
            this.fromPath( localctx.query, 'artref');
            this.state = 2779;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.T__6) {
                this.state = 2776;
                this.match(languageParser.T__6);
                 localctx.query.scope = localctx.query.path.length; 
                this.state = 2778;
                this.fromPath( localctx.query, 'ref');
            }

            this.state = 2788;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.AS:
            	this.state = 2781;
            	this.match(languageParser.AS);
            	this.state = 2782;
            	localctx.n1 = this.ident('FromAlias');
            	 localctx.query.name = localctx.n1.id 
            	break;
            case languageParser.Identifier:
            	this.state = 2785;
            	localctx.n2 = this.identNoKeyword('FromAlias');
            	 localctx.query.name = localctx.n2.id 
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__8:
            case languageParser.ALL:
            case languageParser.DISTINCT:
            case languageParser.ON:
            case languageParser.WHERE:
            case languageParser.ACTIONS:
            case languageParser.CROSS:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.FULL:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.LIMIT:
            case languageParser.MINUS:
            case languageParser.MIXIN:
            case languageParser.ORDER:
            case languageParser.RIGHT:
            case languageParser.TOP:
            case languageParser.UNION:
            	break;
            default:
            	break;
            }
            break;
        case languageParser.T__7:
            this.enterOuterAlt(localctx, 2);
            this.state = 2790;
            this.match(languageParser.T__7);
            this.state = 2807;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
            switch(la_) {
            case 1:
                this.state = 2791;
                localctx.qe = this.queryExpression();

                        localctx.query =  localctx.qe.query     // might be in array if in parens
                        if (localctx.query instanceof Array) // use 'subquery' as no-op operator
                          localctx.query =  { op: this.tokenLocation( localctx.query, undefined, 'subquery' ), args: [localctx.query], location: localctx.query.location }
                      
                this.state = 2793;
                this.match(languageParser.T__8);
                this.state = 2801;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                case languageParser.AS:
                	this.state = 2794;
                	this.match(languageParser.AS);
                	this.state = 2795;
                	localctx.a1 = this.ident('FromAlias');
                	 localctx.query.name = localctx.a1.id 
                	break;
                case languageParser.Identifier:
                	this.state = 2798;
                	localctx.a2 = this.identNoKeyword('FromAlias');
                	 localctx.query.name = localctx.a2.id 
                	break;
                case languageParser.EOF:
                case languageParser.T__0:
                case languageParser.T__1:
                case languageParser.T__2:
                case languageParser.T__3:
                case languageParser.T__8:
                case languageParser.ALL:
                case languageParser.DISTINCT:
                case languageParser.ON:
                case languageParser.WHERE:
                case languageParser.ACTIONS:
                case languageParser.CROSS:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.FULL:
                case languageParser.GROUP:
                case languageParser.HAVING:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.JOIN:
                case languageParser.LEFT:
                case languageParser.LIMIT:
                case languageParser.MINUS:
                case languageParser.MIXIN:
                case languageParser.ORDER:
                case languageParser.RIGHT:
                case languageParser.TOP:
                case languageParser.UNION:
                	break;
                default:
                	break;
                }
                break;

            case 2:
                this.state = 2803;
                localctx.te = this.tableExpression();
                 localctx.query =  [ localctx.te.query ] 
                this.state = 2805;
                this.match(languageParser.T__8);
                break;

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.query); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromPathContext(parser, parent, invokingState, qp, idkind) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_fromPath;
    this.qp = null
    this.idkind = null
    this.id = null; // IdentContext
    this.qp = qp || null;
    this.idkind = idkind || null;
    return this;
}

FromPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromPathContext.prototype.constructor = FromPathContext;

FromPathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

FromPathContext.prototype.fromArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FromArgumentsContext);
    } else {
        return this.getTypedRuleContext(FromArgumentsContext,i);
    }
};

FromPathContext.prototype.cardinalityAndFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CardinalityAndFilterContext);
    } else {
        return this.getTypedRuleContext(CardinalityAndFilterContext,i);
    }
};




languageParser.FromPathContext = FromPathContext;

languageParser.prototype.fromPath = function(qp, idkind) {

    var localctx = new FromPathContext(this, this._ctx, this.state, qp, idkind);
    this.enterRule(localctx, 214, languageParser.RULE_fromPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2811;
        localctx.id = this.ident(localctx.idkind);
         if (localctx.id.id) localctx.qp.path.push(localctx.id.id); else localctx.qp.path.broken = true; 
        this.state = 2818;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__7:
        	this.state = 2813;
        	this.fromArguments( localctx.id.id );
        	this.state = 2815;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===languageParser.T__14) {
        	    this.state = 2814;
        	    this.cardinalityAndFilter( localctx.id.id );
        	}

        	break;
        case languageParser.T__14:
        	this.state = 2817;
        	this.cardinalityAndFilter( localctx.id.id );
        	break;
        case languageParser.EOF:
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__6:
        case languageParser.T__8:
        case languageParser.T__17:
        case languageParser.ALL:
        case languageParser.AS:
        case languageParser.DISTINCT:
        case languageParser.ON:
        case languageParser.WHERE:
        case languageParser.ACTIONS:
        case languageParser.CROSS:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.FULL:
        case languageParser.GROUP:
        case languageParser.HAVING:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.JOIN:
        case languageParser.LEFT:
        case languageParser.LIMIT:
        case languageParser.MINUS:
        case languageParser.MIXIN:
        case languageParser.ORDER:
        case languageParser.RIGHT:
        case languageParser.TOP:
        case languageParser.UNION:
        case languageParser.Identifier:
        	break;
        default:
        	break;
        }
        this.state = 2832;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__17) {
            this.state = 2820;
            this.match(languageParser.T__17);
            this.state = 2821;
            localctx.id = this.ident(localctx.idkind);
             if (localctx.id.id) localctx.qp.path.push(localctx.id.id); else localctx.qp.path.broken = true; 
            this.state = 2828;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__7:
            	this.state = 2823;
            	this.fromArguments( localctx.id.id );
            	this.state = 2825;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===languageParser.T__14) {
            	    this.state = 2824;
            	    this.cardinalityAndFilter( localctx.id.id );
            	}

            	break;
            case languageParser.T__14:
            	this.state = 2827;
            	this.cardinalityAndFilter( localctx.id.id );
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__6:
            case languageParser.T__8:
            case languageParser.T__17:
            case languageParser.ALL:
            case languageParser.AS:
            case languageParser.DISTINCT:
            case languageParser.ON:
            case languageParser.WHERE:
            case languageParser.ACTIONS:
            case languageParser.CROSS:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.FULL:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.LIMIT:
            case languageParser.MINUS:
            case languageParser.MIXIN:
            case languageParser.ORDER:
            case languageParser.RIGHT:
            case languageParser.TOP:
            case languageParser.UNION:
            case languageParser.Identifier:
            	break;
            default:
            	break;
            }
            this.state = 2834;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.qp); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_condition;
    this.cond = null
    this.args = []
    this.orl = []
    this.c1 = null; // ConditionAndContext
    this.or = null; // Token
    this.c2 = null; // ConditionAndContext
    return this;
}

ConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionContext.prototype.constructor = ConditionContext;

ConditionContext.prototype.conditionAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionAndContext);
    } else {
        return this.getTypedRuleContext(ConditionAndContext,i);
    }
};

ConditionContext.prototype.OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.OR);
    } else {
        return this.getToken(languageParser.OR, i);
    }
};





languageParser.ConditionContext = ConditionContext;

languageParser.prototype.condition = function() {

    var localctx = new ConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, languageParser.RULE_condition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2835;
        localctx.c1 = this.conditionAnd();
         localctx.args.push(localctx.c1.cond); 
        this.state = 2843;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.OR) {
            this.state = 2837;
            localctx.or = this.match(languageParser.OR);
            this.state = 2838;
            localctx.c2 = this.conditionAnd();
             localctx.args.push(localctx.c2.cond); localctx.orl.push(this.tokenLocation( localctx.or, undefined, 'or' ))
            this.state = 2845;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);

          localctx.cond =  (localctx.args.length == 1)
            ? localctx.args[0]
            : this.attachLocation({ op: localctx.orl[0], args: localctx.args })

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionAndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_conditionAnd;
    this.cond = null
    this.args = []
    this.andl = []
    this.c1 = null; // ConditionTermContext
    this.and = null; // Token
    this.c2 = null; // ConditionTermContext
    return this;
}

ConditionAndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionAndContext.prototype.constructor = ConditionAndContext;

ConditionAndContext.prototype.conditionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionTermContext);
    } else {
        return this.getTypedRuleContext(ConditionTermContext,i);
    }
};

ConditionAndContext.prototype.AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.AND);
    } else {
        return this.getToken(languageParser.AND, i);
    }
};





languageParser.ConditionAndContext = ConditionAndContext;

languageParser.prototype.conditionAnd = function() {

    var localctx = new ConditionAndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, languageParser.RULE_conditionAnd);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2846;
        localctx.c1 = this.conditionTerm();
         localctx.args.push(localctx.c1.cond); 
        this.state = 2854;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.AND) {
            this.state = 2848;
            localctx.and = this.match(languageParser.AND);
            this.state = 2849;
            localctx.c2 = this.conditionTerm();
             localctx.args.push(localctx.c2.cond); localctx.andl.push(this.tokenLocation( localctx.and, undefined, 'and' )) 
            this.state = 2856;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);

          localctx.cond =  (localctx.args.length == 1)
            ? localctx.args[0]
            : this.attachLocation({ op: localctx.andl[0], args: localctx.args })

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_conditionTerm;
    this.cond = null
    this.nt = null; // Token
    this.ct = null; // ConditionTermContext
    this.ex = null; // Token
    this.qe = null; // QueryExpressionContext
    this.expr = null; // ExpressionContext
    this.rel = null; // Token
    this.asa = null; // Token
    this.e2 = null; // ExpressionContext
    this.inn = null; // Token
    this.innu = null; // Token
    return this;
}

ConditionTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionTermContext.prototype.constructor = ConditionTermContext;

ConditionTermContext.prototype.NOT = function() {
    return this.getToken(languageParser.NOT, 0);
};

ConditionTermContext.prototype.conditionTerm = function() {
    return this.getTypedRuleContext(ConditionTermContext,0);
};

ConditionTermContext.prototype.EXISTS = function() {
    return this.getToken(languageParser.EXISTS, 0);
};

ConditionTermContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

ConditionTermContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ConditionTermContext.prototype.IS = function() {
    return this.getToken(languageParser.IS, 0);
};

ConditionTermContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

ConditionTermContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};

ConditionTermContext.prototype.ANY = function() {
    return this.getToken(languageParser.ANY, 0);
};

ConditionTermContext.prototype.SOME = function() {
    return this.getToken(languageParser.SOME, 0);
};

ConditionTermContext.prototype.ALL = function() {
    return this.getToken(languageParser.ALL, 0);
};




languageParser.ConditionTermContext = ConditionTermContext;

languageParser.prototype.conditionTerm = function() {

    var localctx = new ConditionTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, languageParser.RULE_conditionTerm);
    var _la = 0; // Token type
    try {
        this.state = 2891;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.NOT:
            this.enterOuterAlt(localctx, 1);
            this.state = 2857;
            localctx.nt = this.match(languageParser.NOT);
            this.state = 2858;
            localctx.ct = this.conditionTerm();
             localctx.cond =  { op: this.tokenLocation( localctx.nt, undefined, 'not' ), args: [ localctx.ct.cond ] } 
            break;
        case languageParser.EXISTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 2861;
            localctx.ex = this.match(languageParser.EXISTS);
            this.state = 2862;
            this.match(languageParser.T__7);
            this.state = 2863;
            localctx.qe = this.queryExpression();
            this.state = 2864;
            this.match(languageParser.T__8);
             localctx.cond =  { op: this.tokenLocation( localctx.ex, undefined, 'exists' ), args: [ localctx.qe.query ] } 
            break;
        case languageParser.T__5:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.T__23:
        case languageParser.T__24:
        case languageParser.T__26:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 3);
            this.state = 2867;
            localctx.expr = this.expression();
            this.state = 2889;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__11:
            case languageParser.T__12:
            case languageParser.T__13:
            case languageParser.T__18:
            case languageParser.T__19:
            case languageParser.T__20:
            case languageParser.T__21:
            	this.state = 2868;
            	localctx.rel = this._input.LT(1);
            	_la = this._input.LA(1);
            	if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__11) | (1 << languageParser.T__12) | (1 << languageParser.T__13) | (1 << languageParser.T__18) | (1 << languageParser.T__19) | (1 << languageParser.T__20) | (1 << languageParser.T__21))) !== 0))) {
            	    localctx.rel = this._errHandler.recoverInline(this);
            	}
            	else {
            		this._errHandler.reportMatch(this);
            	    this.consume();
            	}
            	 localctx.cond =  { op: this.tokenLocation( localctx.rel, undefined, (localctx.rel===null ? null : localctx.rel.text)), args: [ localctx.expr.expr ] } 
            	this.state = 2872;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (languageParser.ALL - 37)) | (1 << (languageParser.ANY - 37)) | (1 << (languageParser.SOME - 37)))) !== 0)) {
            	    this.state = 2870;
            	    localctx.asa = this._input.LT(1);
            	    _la = this._input.LA(1);
            	    if(!(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (languageParser.ALL - 37)) | (1 << (languageParser.ANY - 37)) | (1 << (languageParser.SOME - 37)))) !== 0))) {
            	        localctx.asa = this._errHandler.recoverInline(this);
            	    }
            	    else {
            	    	this._errHandler.reportMatch(this);
            	        this.consume();
            	    }
            	     localctx.cond.quantifier = this.tokenLocation(localctx.asa, undefined, (localctx.asa===null ? null : localctx.asa.text).toLowerCase()); 
            	}

            	this.state = 2874;
            	localctx.e2 = this.expression();
            	 localctx.cond.args.push(localctx.e2.expr); 
            	break;
            case languageParser.IS:
            	this.state = 2877;
            	this.match(languageParser.IS);
            	this.state = 2881;
            	this._errHandler.sync(this);
            	switch(this._input.LA(1)) {
            	case languageParser.NOT:
            	    this.state = 2878;
            	    localctx.inn = this.match(languageParser.NOT);
            	    this.state = 2879;
            	    this.match(languageParser.NULL);
            	    break;
            	case languageParser.NULL:
            	    this.state = 2880;
            	    localctx.innu = this.match(languageParser.NULL);
            	    break;
            	default:
            	    throw new antlr4.error.NoViableAltException(this);
            	}
            	 localctx.cond =  { op: localctx.inn ? this.tokenLocation( localctx.inn, undefined, 'isNotNull' ) : this.tokenLocation( localctx.innu, undefined, 'isNull' ), args: [ localctx.expr.expr ] } 
            	break;
            case languageParser.NOT:
            	 localctx.cond =  { args: [ localctx.expr.expr ] } 
            	this.state = 2885;
            	this.match(languageParser.NOT);
            	this.state = 2886;
            	this.predicate( localctx.cond, true );
            	break;
            case languageParser.IN:
            case languageParser.BETWEEN:
            case languageParser.LIKE:
            	 localctx.cond =  { args: [ localctx.expr.expr ] } 
            	this.state = 2888;
            	this.predicate( localctx.cond, false );
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__8:
            case languageParser.T__9:
            case languageParser.T__16:
            case languageParser.ALL:
            case languageParser.DISTINCT:
            case languageParser.ON:
            case languageParser.WHERE:
            case languageParser.ACTIONS:
            case languageParser.AND:
            case languageParser.CROSS:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.FULL:
            case languageParser.GROUP:
            case languageParser.HAVING:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.JOIN:
            case languageParser.LEFT:
            case languageParser.LIMIT:
            case languageParser.MINUS:
            case languageParser.MIXIN:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.RIGHT:
            case languageParser.THEN:
            case languageParser.TOP:
            case languageParser.UNION:
            	break;
            default:
            	break;
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);

          if (localctx.cond) { this.attachLocation(localctx.cond); } else { localctx.cond =  localctx.expr.expr }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState, cond, negated) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_predicate;
    this.cond = null
    this.negated = null
    this.ino = null; // Token
    this.e1 = null; // ExpressionContext
    this.bw = null; // Token
    this.e2 = null; // ExpressionContext
    this.e3 = null; // ExpressionContext
    this.lk = null; // Token
    this.e4 = null; // ExpressionContext
    this.e5 = null; // ExpressionContext
    this.cond = cond || null;
    this.negated = negated || null;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.IN = function() {
    return this.getToken(languageParser.IN, 0);
};

PredicateContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PredicateContext.prototype.AND = function() {
    return this.getToken(languageParser.AND, 0);
};

PredicateContext.prototype.BETWEEN = function() {
    return this.getToken(languageParser.BETWEEN, 0);
};

PredicateContext.prototype.LIKE = function() {
    return this.getToken(languageParser.LIKE, 0);
};

PredicateContext.prototype.ESCAPE = function() {
    return this.getToken(languageParser.ESCAPE, 0);
};




languageParser.PredicateContext = PredicateContext;

languageParser.prototype.predicate = function(cond, negated) {

    var localctx = new PredicateContext(this, this._ctx, this.state, cond, negated);
    this.enterRule(localctx, 222, languageParser.RULE_predicate);
    var _la = 0; // Token type
    try {
        this.state = 2913;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.IN:
            this.enterOuterAlt(localctx, 1);
            this.state = 2893;
            localctx.ino = this.match(languageParser.IN);
            this.state = 2894;
            localctx.e1 = this.expression();
             localctx.cond.op = this.tokenLocation( localctx.ino, undefined, (negated) ? 'notIn' : 'in'); localctx.cond.args.push( localctx.e1.expr ); 
            break;
        case languageParser.BETWEEN:
            this.enterOuterAlt(localctx, 2);
            this.state = 2897;
            localctx.bw = this.match(languageParser.BETWEEN);
            this.state = 2898;
            localctx.e2 = this.expression();
             localctx.cond.op = this.tokenLocation( localctx.bw, undefined, (negated) ? 'notBetween' : 'between' ); localctx.cond.args.push( localctx.e2.expr ); 
            this.state = 2900;
            this.match(languageParser.AND);
            this.state = 2901;
            localctx.e3 = this.expression();
             localctx.cond.args.push( localctx.e3.expr ); 
            break;
        case languageParser.LIKE:
            this.enterOuterAlt(localctx, 3);
            this.state = 2904;
            localctx.lk = this.match(languageParser.LIKE);
            this.state = 2905;
            localctx.e4 = this.expression();
             localctx.cond.op = this.tokenLocation( localctx.lk, undefined, (negated) ? 'notLike' : 'like' ); localctx.cond.args.push( localctx.e4.expr ); 
            this.state = 2911;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===languageParser.ESCAPE) {
                this.state = 2907;
                this.match(languageParser.ESCAPE);
                this.state = 2908;
                localctx.e5 = this.expression();
                 localctx.cond.args.push( localctx.e5.expr ); 
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expression;
    this.expr = null
    this.e1 = null; // ExpressionSumContext
    this.or = null; // Token
    this.e2 = null; // ExpressionSumContext
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.expressionSum = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionSumContext);
    } else {
        return this.getTypedRuleContext(ExpressionSumContext,i);
    }
};




languageParser.ExpressionContext = ExpressionContext;

languageParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, languageParser.RULE_expression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2915;
        localctx.e1 = this.expressionSum();
         localctx.expr =  localctx.e1.expr 
        this.state = 2923;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__22) {
            this.state = 2917;
            localctx.or = this.match(languageParser.T__22);
            this.state = 2918;
            localctx.e2 = this.expressionSum();

                    localctx.expr =  {
                      op: this.tokenLocation( localctx.or, undefined, '||' ), args: [localctx.expr, localctx.e2.expr],
                      location: this.combinedLocation( localctx.expr, localctx.e2.expr ) }
                  
            this.state = 2925;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionSumContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expressionSum;
    this.expr = null
    this.e1 = null; // ExpressionFactorContext
    this.op = null; // Token
    this.e2 = null; // ExpressionFactorContext
    return this;
}

ExpressionSumContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionSumContext.prototype.constructor = ExpressionSumContext;

ExpressionSumContext.prototype.expressionFactor = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionFactorContext);
    } else {
        return this.getTypedRuleContext(ExpressionFactorContext,i);
    }
};




languageParser.ExpressionSumContext = ExpressionSumContext;

languageParser.prototype.expressionSum = function() {

    var localctx = new ExpressionSumContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, languageParser.RULE_expressionSum);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2926;
        localctx.e1 = this.expressionFactor();
         localctx.expr =  localctx.e1.expr 
        this.state = 2934;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__23 || _la===languageParser.T__24) {
            this.state = 2928;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.T__23 || _la===languageParser.T__24)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2929;
            localctx.e2 = this.expressionFactor();

                    localctx.expr =  {
                      op: this.tokenLocation(localctx.op, undefined, (localctx.op===null ? null : localctx.op.text)), args: [localctx.expr, localctx.e2.expr],
                      location: this.combinedLocation( localctx.expr, localctx.e2.expr ) }
                  
            this.state = 2936;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionFactorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expressionFactor;
    this.expr = null
    this.e1 = null; // ExpressionTermContext
    this.op = null; // Token
    this.e2 = null; // ExpressionTermContext
    return this;
}

ExpressionFactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionFactorContext.prototype.constructor = ExpressionFactorContext;

ExpressionFactorContext.prototype.expressionTerm = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionTermContext);
    } else {
        return this.getTypedRuleContext(ExpressionTermContext,i);
    }
};




languageParser.ExpressionFactorContext = ExpressionFactorContext;

languageParser.prototype.expressionFactor = function() {

    var localctx = new ExpressionFactorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, languageParser.RULE_expressionFactor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2937;
        localctx.e1 = this.expressionTerm();
         localctx.expr =  localctx.e1.expr 
        this.state = 2945;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__10 || _la===languageParser.T__25) {
            this.state = 2939;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.T__10 || _la===languageParser.T__25)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2940;
            localctx.e2 = this.expressionTerm();

                    localctx.expr =  {
                      op: this.tokenLocation(localctx.op, undefined, (localctx.op===null ? null : localctx.op.text)), args: [localctx.expr, localctx.e2.expr],
                      location: this.combinedLocation( localctx.expr, localctx.e2.expr ) }
                  
            this.state = 2947;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_expressionTerm;
    this.expr = null
    this.op = null
    this.args = []
    this.unary = null; // Token
    this.e1 = null; // ExpressionTermContext
    this.val = null; // LiteralValueContext
    this.sf = null; // SpecialFunctionContext
    this.ca = null; // Token
    this.e2 = null; // ExpressionContext
    this.ow = null; // Token
    this.ew = null; // ExpressionContext
    this.e3 = null; // ExpressionContext
    this.c = null; // ConditionContext
    this.el = null; // Token
    this.e4 = null; // ExpressionContext
    this.ne = null; // Token
    this.nqp = null; // ValuePathContext
    this.vp = null; // ValuePathContext
    this.pp = null; // Token
    this.qm = null; // Token
    this.qe = null; // QueryExpressionContext
    this.c1 = null; // ConditionContext
    this.cn = null; // ExpressionContext
    return this;
}

ExpressionTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionTermContext.prototype.constructor = ExpressionTermContext;

ExpressionTermContext.prototype.expressionTerm = function() {
    return this.getTypedRuleContext(ExpressionTermContext,0);
};

ExpressionTermContext.prototype.END = function() {
    return this.getToken(languageParser.END, 0);
};

ExpressionTermContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

ExpressionTermContext.prototype.specialFunction = function() {
    return this.getTypedRuleContext(SpecialFunctionContext,0);
};

ExpressionTermContext.prototype.CASE = function() {
    return this.getToken(languageParser.CASE, 0);
};

ExpressionTermContext.prototype.NEW = function() {
    return this.getToken(languageParser.NEW, 0);
};

ExpressionTermContext.prototype.valuePath = function() {
    return this.getTypedRuleContext(ValuePathContext,0);
};

ExpressionTermContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionTermContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

ExpressionTermContext.prototype.queryExpression = function() {
    return this.getTypedRuleContext(QueryExpressionContext,0);
};

ExpressionTermContext.prototype.condition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionContext);
    } else {
        return this.getTypedRuleContext(ConditionContext,i);
    }
};

ExpressionTermContext.prototype.ELSE = function() {
    return this.getToken(languageParser.ELSE, 0);
};

ExpressionTermContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.THEN);
    } else {
        return this.getToken(languageParser.THEN, i);
    }
};


ExpressionTermContext.prototype.WHEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(languageParser.WHEN);
    } else {
        return this.getToken(languageParser.WHEN, i);
    }
};





languageParser.ExpressionTermContext = ExpressionTermContext;

languageParser.prototype.expressionTerm = function() {

    var localctx = new ExpressionTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, languageParser.RULE_expressionTerm);
    var _la = 0; // Token type
    try {
        this.state = 3031;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__23:
        case languageParser.T__24:
            this.enterOuterAlt(localctx, 1);
            this.state = 2948;
            localctx.unary = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===languageParser.T__23 || _la===languageParser.T__24)) {
                localctx.unary = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 2949;
            localctx.e1 = this.expressionTerm();
             localctx.expr =  { op: this.tokenLocation(localctx.unary, undefined, (localctx.unary===null ? null : localctx.unary.text)), args: [ localctx.e1.expr ] } 
            break;
        case languageParser.T__5:
        case languageParser.T__6:
        case languageParser.T__7:
        case languageParser.T__26:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.CASE:
        case languageParser.CAST:
        case languageParser.EXTRACT:
        case languageParser.NEW:
        case languageParser.NULL:
        case languageParser.TRIM:
        case languageParser.Number:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 3029;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__5:
            case languageParser.String:
            case languageParser.QuotedLiteral:
            case languageParser.Boolean:
            case languageParser.NULL:
            case languageParser.Number:
                this.state = 2952;
                localctx.val = this.literalValue();
                 localctx.expr =  localctx.val.val 
                break;
            case languageParser.CAST:
            case languageParser.EXTRACT:
            case languageParser.TRIM:
                this.state = 2955;
                localctx.sf = this.specialFunction();
                 localctx.expr =  localctx.sf.ret 
                break;
            case languageParser.CASE:
                this.state = 2958;
                localctx.ca = this.match(languageParser.CASE);
                 localctx.expr =  { op : this.tokenLocation( localctx.ca, undefined, 'case' ), args: [] } 
                this.state = 2982;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.T__5:
                case languageParser.T__6:
                case languageParser.T__7:
                case languageParser.T__23:
                case languageParser.T__24:
                case languageParser.T__26:
                case languageParser.String:
                case languageParser.QuotedLiteral:
                case languageParser.Boolean:
                case languageParser.CASE:
                case languageParser.CAST:
                case languageParser.EXTRACT:
                case languageParser.NEW:
                case languageParser.NULL:
                case languageParser.TRIM:
                case languageParser.Number:
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AFTER:
                case languageParser.ALWAYS:
                case languageParser.ANALYSIS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.ASYNC:
                case languageParser.ASYNCHRONOUS:
                case languageParser.AUTO:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.CACHE:
                case languageParser.COLUMN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONFIGURATION:
                case languageParser.CONST:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.CYCLE:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEPENDS:
                case languageParser.DESC:
                case languageParser.DETECTION:
                case languageParser.DISABLED:
                case languageParser.DOCUMENTS:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.ENABLED:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.EVERY:
                case languageParser.ESCAPE:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXISTING:
                case languageParser.EXTEND:
                case languageParser.EXTENDED:
                case languageParser.FAST:
                case languageParser.FIRST:
                case languageParser.FLUSH:
                case languageParser.FULL:
                case languageParser.FULLTEXT:
                case languageParser.FUNCTION:
                case languageParser.FUZZY:
                case languageParser.GENERATED:
                case languageParser.GETNUMSERVERS:
                case languageParser.GROUP:
                case languageParser.HANA:
                case languageParser.HASH:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.IDENTITY:
                case languageParser.INCREMENT:
                case languageParser.INDEX:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.KEEPING:
                case languageParser.LANGUAGE:
                case languageParser.LAST:
                case languageParser.LAYOUT:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MAXVALUE:
                case languageParser.MERGE:
                case languageParser.MIGRATION:
                case languageParser.MINING:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MINUTES:
                case languageParser.MINVALUE:
                case languageParser.MIME:
                case languageParser.MIXIN:
                case languageParser.MODE:
                case languageParser.MONTH:
                case languageParser.NAME:
                case languageParser.NAMESPACE:
                case languageParser.NO:
                case languageParser.NULLS:
                case languageParser.OFF:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.ONLY:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OTHERS:
                case languageParser.OUTER:
                case languageParser.OVERLAY:
                case languageParser.QUEUE:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PARTITIONING:
                case languageParser.PARTITIONS:
                case languageParser.PHRASE:
                case languageParser.PREPROCESS:
                case languageParser.PRIORITY:
                case languageParser.PROJECTION:
                case languageParser.RANGE:
                case languageParser.RATIO:
                case languageParser.REDIRECTED:
                case languageParser.RESET:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROUNDROBIN:
                case languageParser.ROW:
                case languageParser.SEARCH:
                case languageParser.SECOND:
                case languageParser.SEPARATORS:
                case languageParser.SERVICE:
                case languageParser.START:
                case languageParser.STORAGE:
                case languageParser.STORE:
                case languageParser.SUBTYPE:
                case languageParser.SYNC:
                case languageParser.SYNCHRONOUS:
                case languageParser.TABLE:
                case languageParser.TECHNICAL:
                case languageParser.TEMPORARY:
                case languageParser.TEXT:
                case languageParser.THEN:
                case languageParser.TOKEN:
                case languageParser.TOP:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNIQUE:
                case languageParser.UNLOAD:
                case languageParser.USING:
                case languageParser.VALUE:
                case languageParser.VALUES:
                case languageParser.VIEW:
                case languageParser.VIRTUAL:
                case languageParser.YEAR:
                case languageParser.Identifier:
                    this.state = 2960;
                    localctx.e2 = this.expression();
                     localctx.expr.args.push(localctx.e2.expr); 
                    this.state = 2968; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 2962;
                        localctx.ow = this.match(languageParser.WHEN);
                        this.state = 2963;
                        localctx.ew = this.expression();
                        this.state = 2964;
                        this.match(languageParser.THEN);
                        this.state = 2965;
                        localctx.e3 = this.expression();
                         localctx.expr.args.push( this.createPrefixOp( localctx.ow, [ localctx.ew.expr, localctx.e3.expr ] ) ); 
                        this.state = 2970; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===languageParser.WHEN);
                    break;
                case languageParser.WHEN:
                    this.state = 2978; 
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    do {
                        this.state = 2972;
                        localctx.ow = this.match(languageParser.WHEN);
                        this.state = 2973;
                        localctx.c = this.condition();
                        this.state = 2974;
                        this.match(languageParser.THEN);
                        this.state = 2975;
                        localctx.e3 = this.expression();
                         localctx.expr.args.push( this.createPrefixOp( localctx.ow, [ localctx.c.cond, localctx.e3.expr ] ) ); 
                        this.state = 2980; 
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    } while(_la===languageParser.WHEN);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                this.state = 2988;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.ELSE) {
                    this.state = 2984;
                    localctx.el = this.match(languageParser.ELSE);
                    this.state = 2985;
                    localctx.e4 = this.expression();
                     localctx.expr.args.push( this.createPrefixOp( localctx.el, [ localctx.e4.expr ] ) ); 
                }

                this.state = 2990;
                this.match(languageParser.END);
                break;
            case languageParser.NEW:
                this.state = 2992;
                localctx.ne = this.match(languageParser.NEW);
                this.state = 2993;
                localctx.nqp = this.valuePath( 'ref', null);
                 localctx.expr =  { op: this.tokenLocation( localctx.ne, undefined, 'new' ), args: [] }
                        this.hanaFlavorOnly( localctx.ne ); 
                break;
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AFTER:
            case languageParser.ALWAYS:
            case languageParser.ANALYSIS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.ASYNC:
            case languageParser.ASYNCHRONOUS:
            case languageParser.AUTO:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.CACHE:
            case languageParser.COLUMN:
            case languageParser.COLUMNS:
            case languageParser.COMPOSITION:
            case languageParser.CONFIGURATION:
            case languageParser.CONST:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.CURRENT:
            case languageParser.CYCLE:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DEPENDS:
            case languageParser.DESC:
            case languageParser.DETECTION:
            case languageParser.DISABLED:
            case languageParser.DOCUMENTS:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.ENABLED:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.EVERY:
            case languageParser.ESCAPE:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXISTING:
            case languageParser.EXTEND:
            case languageParser.EXTENDED:
            case languageParser.FAST:
            case languageParser.FIRST:
            case languageParser.FLUSH:
            case languageParser.FULL:
            case languageParser.FULLTEXT:
            case languageParser.FUNCTION:
            case languageParser.FUZZY:
            case languageParser.GENERATED:
            case languageParser.GETNUMSERVERS:
            case languageParser.GROUP:
            case languageParser.HANA:
            case languageParser.HASH:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.IDENTITY:
            case languageParser.INCREMENT:
            case languageParser.INDEX:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.KEEPING:
            case languageParser.LANGUAGE:
            case languageParser.LAST:
            case languageParser.LAYOUT:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MAXVALUE:
            case languageParser.MERGE:
            case languageParser.MIGRATION:
            case languageParser.MINING:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MINUTES:
            case languageParser.MINVALUE:
            case languageParser.MIME:
            case languageParser.MIXIN:
            case languageParser.MODE:
            case languageParser.MONTH:
            case languageParser.NAME:
            case languageParser.NAMESPACE:
            case languageParser.NO:
            case languageParser.NULLS:
            case languageParser.OFF:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.ONLY:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OTHERS:
            case languageParser.OUTER:
            case languageParser.OVERLAY:
            case languageParser.QUEUE:
            case languageParser.PARAMETERS:
            case languageParser.PARTITION:
            case languageParser.PARTITIONING:
            case languageParser.PARTITIONS:
            case languageParser.PHRASE:
            case languageParser.PREPROCESS:
            case languageParser.PRIORITY:
            case languageParser.PROJECTION:
            case languageParser.RANGE:
            case languageParser.RATIO:
            case languageParser.REDIRECTED:
            case languageParser.RESET:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.ROUNDROBIN:
            case languageParser.ROW:
            case languageParser.SEARCH:
            case languageParser.SECOND:
            case languageParser.SEPARATORS:
            case languageParser.SERVICE:
            case languageParser.START:
            case languageParser.STORAGE:
            case languageParser.STORE:
            case languageParser.SUBTYPE:
            case languageParser.SYNC:
            case languageParser.SYNCHRONOUS:
            case languageParser.TABLE:
            case languageParser.TECHNICAL:
            case languageParser.TEMPORARY:
            case languageParser.TEXT:
            case languageParser.THEN:
            case languageParser.TOKEN:
            case languageParser.TOP:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.UNIQUE:
            case languageParser.UNLOAD:
            case languageParser.USING:
            case languageParser.VALUE:
            case languageParser.VALUES:
            case languageParser.VIEW:
            case languageParser.VIRTUAL:
            case languageParser.YEAR:
            case languageParser.Identifier:
                this.state = 2996;
                localctx.vp = this.valuePath( 'ref', null);

                        let path = localctx.vp.qp.path;
                        if (path[0] && path[0].args) {
                          let na = path[0].namedArgs; // TODO: XSN func path cleanup
                          localctx.expr =  { op: { location: path[0].location, val: 'call' },
                                    func: localctx.vp.qp, [na?'namedArgs':'args']: na||path[0].args }
                          if (localctx.expr && path.length > 1 || path.slice(1).some( s => s && s.args ))
                          { this.hanaFlavorOnly( 'Methods in expressions are not supported yet', localctx.start ); }
                        }
                        else  localctx.expr =  localctx.vp.qp
                      
                break;
            case languageParser.T__6:
                this.state = 2999;
                this.match(languageParser.T__6);
                this.state = 3005;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case languageParser.ABSTRACT:
                case languageParser.ACTION:
                case languageParser.ACTIONS:
                case languageParser.AFTER:
                case languageParser.ALWAYS:
                case languageParser.ANALYSIS:
                case languageParser.AND:
                case languageParser.ANNOTATE:
                case languageParser.ANNOTATION:
                case languageParser.ARRAY:
                case languageParser.ASC:
                case languageParser.ASPECT:
                case languageParser.ASSOCIATION:
                case languageParser.ASYNC:
                case languageParser.ASYNCHRONOUS:
                case languageParser.AUTO:
                case languageParser.BETWEEN:
                case languageParser.BOTH:
                case languageParser.CACHE:
                case languageParser.COLUMN:
                case languageParser.COLUMNS:
                case languageParser.COMPOSITION:
                case languageParser.CONFIGURATION:
                case languageParser.CONST:
                case languageParser.CONTEXT:
                case languageParser.CROSS:
                case languageParser.CURRENT:
                case languageParser.CYCLE:
                case languageParser.DAY:
                case languageParser.DEFAULT:
                case languageParser.DEFINE:
                case languageParser.DEPENDS:
                case languageParser.DESC:
                case languageParser.DETECTION:
                case languageParser.DISABLED:
                case languageParser.DOCUMENTS:
                case languageParser.ELEMENT:
                case languageParser.ELSE:
                case languageParser.ENABLED:
                case languageParser.END:
                case languageParser.ENTITY:
                case languageParser.ENUM:
                case languageParser.EVENT:
                case languageParser.EVERY:
                case languageParser.ESCAPE:
                case languageParser.EXCEPT:
                case languageParser.EXCLUDING:
                case languageParser.EXISTING:
                case languageParser.EXTEND:
                case languageParser.EXTENDED:
                case languageParser.FAST:
                case languageParser.FIRST:
                case languageParser.FLUSH:
                case languageParser.FULL:
                case languageParser.FULLTEXT:
                case languageParser.FUNCTION:
                case languageParser.FUZZY:
                case languageParser.GENERATED:
                case languageParser.GETNUMSERVERS:
                case languageParser.GROUP:
                case languageParser.HANA:
                case languageParser.HASH:
                case languageParser.HAVING:
                case languageParser.HOUR:
                case languageParser.IDENTITY:
                case languageParser.INCREMENT:
                case languageParser.INDEX:
                case languageParser.INNER:
                case languageParser.INTERSECT:
                case languageParser.INTO:
                case languageParser.IS:
                case languageParser.JOIN:
                case languageParser.KEEPING:
                case languageParser.LANGUAGE:
                case languageParser.LAST:
                case languageParser.LAYOUT:
                case languageParser.LEADING:
                case languageParser.LEFT:
                case languageParser.LIKE:
                case languageParser.LIMIT:
                case languageParser.LOCALIZED:
                case languageParser.MANY:
                case languageParser.MASKED:
                case languageParser.MAXVALUE:
                case languageParser.MERGE:
                case languageParser.MIGRATION:
                case languageParser.MINING:
                case languageParser.MINUS:
                case languageParser.MINUTE:
                case languageParser.MINUTES:
                case languageParser.MINVALUE:
                case languageParser.MIME:
                case languageParser.MIXIN:
                case languageParser.MODE:
                case languageParser.MONTH:
                case languageParser.NAME:
                case languageParser.NAMESPACE:
                case languageParser.NO:
                case languageParser.NULLS:
                case languageParser.OFF:
                case languageParser.OFFSET:
                case languageParser.ONE:
                case languageParser.ONLY:
                case languageParser.OR:
                case languageParser.ORDER:
                case languageParser.OTHERS:
                case languageParser.OUTER:
                case languageParser.OVERLAY:
                case languageParser.QUEUE:
                case languageParser.PARAMETERS:
                case languageParser.PARTITION:
                case languageParser.PARTITIONING:
                case languageParser.PARTITIONS:
                case languageParser.PHRASE:
                case languageParser.PREPROCESS:
                case languageParser.PRIORITY:
                case languageParser.PROJECTION:
                case languageParser.RANGE:
                case languageParser.RATIO:
                case languageParser.REDIRECTED:
                case languageParser.RESET:
                case languageParser.RETURNS:
                case languageParser.RIGHT:
                case languageParser.ROUNDROBIN:
                case languageParser.ROW:
                case languageParser.SEARCH:
                case languageParser.SECOND:
                case languageParser.SEPARATORS:
                case languageParser.SERVICE:
                case languageParser.START:
                case languageParser.STORAGE:
                case languageParser.STORE:
                case languageParser.SUBTYPE:
                case languageParser.SYNC:
                case languageParser.SYNCHRONOUS:
                case languageParser.TABLE:
                case languageParser.TECHNICAL:
                case languageParser.TEMPORARY:
                case languageParser.TEXT:
                case languageParser.THEN:
                case languageParser.TOKEN:
                case languageParser.TOP:
                case languageParser.TRAILING:
                case languageParser.TO:
                case languageParser.TYPE:
                case languageParser.UNION:
                case languageParser.UNIQUE:
                case languageParser.UNLOAD:
                case languageParser.USING:
                case languageParser.VALUE:
                case languageParser.VALUES:
                case languageParser.VIEW:
                case languageParser.VIRTUAL:
                case languageParser.YEAR:
                case languageParser.Identifier:
                    this.state = 3000;
                    localctx.vp = this.valuePath( 'paramref', this.startLocation() );
                     localctx.expr =  localctx.vp.qp; localctx.expr.scope = 'param'; 
                    break;
                case languageParser.Number:
                    this.state = 3003;
                    localctx.pp = this.match(languageParser.Number);
                     localctx.expr =  { param: this.numberLiteral( localctx.pp ), scope: 'param' }
                              this.csnParseOnly( 'Positional parameter ":' + (localctx.pp===null ? null : localctx.pp.text) + '" is not supported', localctx.pp );
                            
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                }
                break;
            case languageParser.T__26:
                this.state = 3007;
                localctx.qm = this.match(languageParser.T__26);
                 localctx.expr =  { param: this.tokenLocation( localctx.qm, undefined, '?' ), scope: 'param' }
                        this.csnParseOnly( 'Dynamic parameter "?" is not supported', localctx.qm );
                      
                break;
            case languageParser.T__7:
                this.state = 3009;
                this.match(languageParser.T__7);
                this.state = 3025;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,377,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 3010;
                    localctx.qe = this.queryExpression();
                     localctx.expr =  localctx.qe.query 
                    break;

                case 2:
                    this.state = 3013;
                    localctx.c1 = this.condition();
                     localctx.expr =  [ localctx.c1.cond ] 
                    this.state = 3022;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===languageParser.T__2) {
                        this.state = 3015;
                        this.match(languageParser.T__2);
                         if (this.isStraightBefore(')') && localctx.expr.length > 1) break; 
                        this.state = 3017;
                        localctx.cn = this.expression();
                         localctx.expr.push(localctx.cn.expr); 
                        this.state = 3024;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                    break;

                }
                this.state = 3027;
                this.match(languageParser.T__8);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ this.attachLocation(localctx.expr); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecialFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_specialFunction;
    this.ret = { }
    this.art = {}
    this.tr = null; // Token
    this.ex = null; // Token
    this.ca = null; // Token
    return this;
}

SpecialFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecialFunctionContext.prototype.constructor = SpecialFunctionContext;

SpecialFunctionContext.prototype.TRIM = function() {
    return this.getToken(languageParser.TRIM, 0);
};

SpecialFunctionContext.prototype.FROM = function() {
    return this.getToken(languageParser.FROM, 0);
};

SpecialFunctionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SpecialFunctionContext.prototype.LEADING = function() {
    return this.getToken(languageParser.LEADING, 0);
};

SpecialFunctionContext.prototype.TRAILING = function() {
    return this.getToken(languageParser.TRAILING, 0);
};

SpecialFunctionContext.prototype.BOTH = function() {
    return this.getToken(languageParser.BOTH, 0);
};

SpecialFunctionContext.prototype.EXTRACT = function() {
    return this.getToken(languageParser.EXTRACT, 0);
};

SpecialFunctionContext.prototype.YEAR = function() {
    return this.getToken(languageParser.YEAR, 0);
};

SpecialFunctionContext.prototype.MONTH = function() {
    return this.getToken(languageParser.MONTH, 0);
};

SpecialFunctionContext.prototype.DAY = function() {
    return this.getToken(languageParser.DAY, 0);
};

SpecialFunctionContext.prototype.HOUR = function() {
    return this.getToken(languageParser.HOUR, 0);
};

SpecialFunctionContext.prototype.MINUTE = function() {
    return this.getToken(languageParser.MINUTE, 0);
};

SpecialFunctionContext.prototype.SECOND = function() {
    return this.getToken(languageParser.SECOND, 0);
};

SpecialFunctionContext.prototype.AS = function() {
    return this.getToken(languageParser.AS, 0);
};

SpecialFunctionContext.prototype.typeRefOptArgs = function() {
    return this.getTypedRuleContext(TypeRefOptArgsContext,0);
};

SpecialFunctionContext.prototype.CAST = function() {
    return this.getToken(languageParser.CAST, 0);
};




languageParser.SpecialFunctionContext = SpecialFunctionContext;

languageParser.prototype.specialFunction = function() {

    var localctx = new SpecialFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, languageParser.RULE_specialFunction);
    var _la = 0; // Token type
    try {
        this.state = 3067;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.TRIM:
            this.enterOuterAlt(localctx, 1);
            this.state = 3033;
            localctx.tr = this.match(languageParser.TRIM);
            this.state = 3034;
            this.match(languageParser.T__7);
             this.hanaFlavorOnly( localctx.tr );
                  localctx.ret.op = this.tokenLocation( localctx.tr, undefined, 'special' ); localctx.ret.args = []; 
            this.state = 3047;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
            switch(la_) {
            case 1:
                this.state = 3036;
                _la = this._input.LA(1);
                if(!(_la===languageParser.BOTH || _la===languageParser.LEADING || _la===languageParser.TRAILING)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 3038;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__5) | (1 << languageParser.T__6) | (1 << languageParser.T__7) | (1 << languageParser.T__23) | (1 << languageParser.T__24) | (1 << languageParser.T__26))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (languageParser.String - 32)) | (1 << (languageParser.QuotedLiteral - 32)) | (1 << (languageParser.Boolean - 32)) | (1 << (languageParser.CASE - 32)) | (1 << (languageParser.CAST - 32)) | (1 << (languageParser.EXTRACT - 32)) | (1 << (languageParser.NEW - 32)) | (1 << (languageParser.NULL - 32)) | (1 << (languageParser.TRIM - 32)) | (1 << (languageParser.Number - 32)) | (1 << (languageParser.ABSTRACT - 32)) | (1 << (languageParser.ACTION - 32)) | (1 << (languageParser.ACTIONS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (languageParser.AFTER - 64)) | (1 << (languageParser.ALWAYS - 64)) | (1 << (languageParser.ANALYSIS - 64)) | (1 << (languageParser.AND - 64)) | (1 << (languageParser.ANNOTATE - 64)) | (1 << (languageParser.ANNOTATION - 64)) | (1 << (languageParser.ARRAY - 64)) | (1 << (languageParser.ASC - 64)) | (1 << (languageParser.ASPECT - 64)) | (1 << (languageParser.ASSOCIATION - 64)) | (1 << (languageParser.ASYNC - 64)) | (1 << (languageParser.ASYNCHRONOUS - 64)) | (1 << (languageParser.AUTO - 64)) | (1 << (languageParser.BETWEEN - 64)) | (1 << (languageParser.BOTH - 64)) | (1 << (languageParser.CACHE - 64)) | (1 << (languageParser.COLUMN - 64)) | (1 << (languageParser.COLUMNS - 64)) | (1 << (languageParser.COMPOSITION - 64)) | (1 << (languageParser.CONFIGURATION - 64)) | (1 << (languageParser.CONST - 64)) | (1 << (languageParser.CONTEXT - 64)) | (1 << (languageParser.CROSS - 64)) | (1 << (languageParser.CURRENT - 64)) | (1 << (languageParser.CYCLE - 64)) | (1 << (languageParser.DAY - 64)) | (1 << (languageParser.DEFAULT - 64)) | (1 << (languageParser.DEFINE - 64)) | (1 << (languageParser.DEPENDS - 64)) | (1 << (languageParser.DESC - 64)) | (1 << (languageParser.DETECTION - 64)) | (1 << (languageParser.DISABLED - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (languageParser.DOCUMENTS - 96)) | (1 << (languageParser.ELEMENT - 96)) | (1 << (languageParser.ELSE - 96)) | (1 << (languageParser.ENABLED - 96)) | (1 << (languageParser.END - 96)) | (1 << (languageParser.ENTITY - 96)) | (1 << (languageParser.ENUM - 96)) | (1 << (languageParser.EVENT - 96)) | (1 << (languageParser.EVERY - 96)) | (1 << (languageParser.ESCAPE - 96)) | (1 << (languageParser.EXCEPT - 96)) | (1 << (languageParser.EXCLUDING - 96)) | (1 << (languageParser.EXISTING - 96)) | (1 << (languageParser.EXTEND - 96)) | (1 << (languageParser.EXTENDED - 96)) | (1 << (languageParser.FAST - 96)) | (1 << (languageParser.FIRST - 96)) | (1 << (languageParser.FLUSH - 96)) | (1 << (languageParser.FULL - 96)) | (1 << (languageParser.FULLTEXT - 96)) | (1 << (languageParser.FUNCTION - 96)) | (1 << (languageParser.FUZZY - 96)) | (1 << (languageParser.GENERATED - 96)) | (1 << (languageParser.GETNUMSERVERS - 96)) | (1 << (languageParser.GROUP - 96)) | (1 << (languageParser.HANA - 96)) | (1 << (languageParser.HASH - 96)) | (1 << (languageParser.HAVING - 96)) | (1 << (languageParser.HOUR - 96)) | (1 << (languageParser.IDENTITY - 96)) | (1 << (languageParser.INCREMENT - 96)) | (1 << (languageParser.INDEX - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.INNER - 128)) | (1 << (languageParser.INTERSECT - 128)) | (1 << (languageParser.INTO - 128)) | (1 << (languageParser.IS - 128)) | (1 << (languageParser.JOIN - 128)) | (1 << (languageParser.KEEPING - 128)) | (1 << (languageParser.LANGUAGE - 128)) | (1 << (languageParser.LAST - 128)) | (1 << (languageParser.LAYOUT - 128)) | (1 << (languageParser.LEADING - 128)) | (1 << (languageParser.LEFT - 128)) | (1 << (languageParser.LIKE - 128)) | (1 << (languageParser.LIMIT - 128)) | (1 << (languageParser.LOCALIZED - 128)) | (1 << (languageParser.MANY - 128)) | (1 << (languageParser.MASKED - 128)) | (1 << (languageParser.MAXVALUE - 128)) | (1 << (languageParser.MERGE - 128)) | (1 << (languageParser.MIGRATION - 128)) | (1 << (languageParser.MINING - 128)) | (1 << (languageParser.MINUS - 128)) | (1 << (languageParser.MINUTE - 128)) | (1 << (languageParser.MINUTES - 128)) | (1 << (languageParser.MINVALUE - 128)) | (1 << (languageParser.MIME - 128)) | (1 << (languageParser.MIXIN - 128)) | (1 << (languageParser.MODE - 128)) | (1 << (languageParser.MONTH - 128)) | (1 << (languageParser.NAME - 128)) | (1 << (languageParser.NAMESPACE - 128)) | (1 << (languageParser.NO - 128)) | (1 << (languageParser.NULLS - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (languageParser.OFF - 160)) | (1 << (languageParser.OFFSET - 160)) | (1 << (languageParser.ONE - 160)) | (1 << (languageParser.ONLY - 160)) | (1 << (languageParser.OR - 160)) | (1 << (languageParser.ORDER - 160)) | (1 << (languageParser.OTHERS - 160)) | (1 << (languageParser.OUTER - 160)) | (1 << (languageParser.OVERLAY - 160)) | (1 << (languageParser.QUEUE - 160)) | (1 << (languageParser.PARAMETERS - 160)) | (1 << (languageParser.PARTITION - 160)) | (1 << (languageParser.PARTITIONING - 160)) | (1 << (languageParser.PARTITIONS - 160)) | (1 << (languageParser.PHRASE - 160)) | (1 << (languageParser.PREPROCESS - 160)) | (1 << (languageParser.PRIORITY - 160)) | (1 << (languageParser.PROJECTION - 160)) | (1 << (languageParser.RANGE - 160)) | (1 << (languageParser.RATIO - 160)) | (1 << (languageParser.REDIRECTED - 160)) | (1 << (languageParser.RESET - 160)) | (1 << (languageParser.RETURNS - 160)) | (1 << (languageParser.RIGHT - 160)) | (1 << (languageParser.ROUNDROBIN - 160)) | (1 << (languageParser.ROW - 160)) | (1 << (languageParser.SEARCH - 160)) | (1 << (languageParser.SECOND - 160)) | (1 << (languageParser.SEPARATORS - 160)) | (1 << (languageParser.SERVICE - 160)) | (1 << (languageParser.START - 160)) | (1 << (languageParser.STORAGE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (languageParser.STORE - 192)) | (1 << (languageParser.SUBTYPE - 192)) | (1 << (languageParser.SYNC - 192)) | (1 << (languageParser.SYNCHRONOUS - 192)) | (1 << (languageParser.TABLE - 192)) | (1 << (languageParser.TECHNICAL - 192)) | (1 << (languageParser.TEMPORARY - 192)) | (1 << (languageParser.TEXT - 192)) | (1 << (languageParser.THEN - 192)) | (1 << (languageParser.TOKEN - 192)) | (1 << (languageParser.TOP - 192)) | (1 << (languageParser.TRAILING - 192)) | (1 << (languageParser.TO - 192)) | (1 << (languageParser.TYPE - 192)) | (1 << (languageParser.UNION - 192)) | (1 << (languageParser.UNIQUE - 192)) | (1 << (languageParser.UNLOAD - 192)) | (1 << (languageParser.USING - 192)) | (1 << (languageParser.VALUE - 192)) | (1 << (languageParser.VALUES - 192)) | (1 << (languageParser.VIEW - 192)) | (1 << (languageParser.VIRTUAL - 192)) | (1 << (languageParser.YEAR - 192)) | (1 << (languageParser.Identifier - 192)))) !== 0)) {
                    this.state = 3037;
                    this.expression();
                }

                this.state = 3040;
                this.match(languageParser.FROM);
                this.state = 3041;
                this.expression();
                break;

            case 2:
                this.state = 3042;
                this.expression();
                this.state = 3045;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===languageParser.FROM) {
                    this.state = 3043;
                    this.match(languageParser.FROM);
                    this.state = 3044;
                    this.expression();
                }

                break;

            }
            this.state = 3049;
            this.match(languageParser.T__8);
            break;
        case languageParser.EXTRACT:
            this.enterOuterAlt(localctx, 2);
            this.state = 3051;
            localctx.ex = this.match(languageParser.EXTRACT);
            this.state = 3052;
            this.match(languageParser.T__7);
             this.hanaFlavorOnly( localctx.ex );
                  localctx.ret.op = this.tokenLocation( localctx.ex, undefined, 'special' ); localctx.ret.args = []; 
            this.state = 3054;
            _la = this._input.LA(1);
            if(!(_la===languageParser.DAY || ((((_la - 124)) & ~0x1f) == 0 && ((1 << (_la - 124)) & ((1 << (languageParser.HOUR - 124)) | (1 << (languageParser.MINUTE - 124)) | (1 << (languageParser.MONTH - 124)))) !== 0) || _la===languageParser.SECOND || _la===languageParser.YEAR)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 3055;
            this.match(languageParser.FROM);
            this.state = 3056;
            this.expression();
            this.state = 3057;
            this.match(languageParser.T__8);
            break;
        case languageParser.CAST:
            this.enterOuterAlt(localctx, 3);
            this.state = 3059;
            localctx.ca = this.match(languageParser.CAST);
            this.state = 3060;
            this.match(languageParser.T__7);
             this.hanaFlavorOnly( localctx.ca );
                  localctx.ret.op = this.tokenLocation( localctx.ca, undefined, 'special' ); localctx.ret.args = []; 
            this.state = 3062;
            this.expression();
            this.state = 3063;
            this.match(languageParser.AS);
            this.state = 3064;
            this.typeRefOptArgs( localctx.art );
            this.state = 3065;
            this.match(languageParser.T__8);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValuePathContext(parser, parent, invokingState, category, location) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_valuePath;
    this.category = null
    this.location = null
    this.qp = { path: [] }
    this._sync = 'nop'
    this.id = null; // IdentContext
    this.category = category || null;
    this.location = location || null;
    return this;
}

ValuePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuePathContext.prototype.constructor = ValuePathContext;

ValuePathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};

ValuePathContext.prototype.pathArguments = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathArgumentsContext);
    } else {
        return this.getTypedRuleContext(PathArgumentsContext,i);
    }
};

ValuePathContext.prototype.cardinalityAndFilter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CardinalityAndFilterContext);
    } else {
        return this.getTypedRuleContext(CardinalityAndFilterContext,i);
    }
};




languageParser.ValuePathContext = ValuePathContext;

languageParser.prototype.valuePath = function(category, location) {

    var localctx = new ValuePathContext(this, this._ctx, this.state, category, location);
    this.enterRule(localctx, 234, languageParser.RULE_valuePath);
     localctx.qp.location = location || this.startLocation(); 
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3069;
        localctx.id = this.ident( localctx.category );
         if (localctx.id.id) localctx.qp.path.push(localctx.id.id); else localctx.qp.path.broken = true; 
        this.state = 3076;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case languageParser.T__7:
        	this.state = 3071;
        	this.pathArguments( localctx.id.id );
        	this.state = 3073;
        	this._errHandler.sync(this);
        	_la = this._input.LA(1);
        	if(_la===languageParser.T__14) {
        	    this.state = 3072;
        	    this.cardinalityAndFilter( localctx.id.id );
        	}

        	break;
        case languageParser.T__14:
        	this.state = 3075;
        	this.cardinalityAndFilter( localctx.id.id );
        	break;
        case languageParser.EOF:
        case languageParser.T__0:
        case languageParser.T__1:
        case languageParser.T__2:
        case languageParser.T__3:
        case languageParser.T__6:
        case languageParser.T__8:
        case languageParser.T__9:
        case languageParser.T__10:
        case languageParser.T__11:
        case languageParser.T__12:
        case languageParser.T__13:
        case languageParser.T__16:
        case languageParser.T__17:
        case languageParser.T__18:
        case languageParser.T__19:
        case languageParser.T__20:
        case languageParser.T__21:
        case languageParser.T__22:
        case languageParser.T__23:
        case languageParser.T__24:
        case languageParser.T__25:
        case languageParser.ALL:
        case languageParser.AS:
        case languageParser.DISTINCT:
        case languageParser.FROM:
        case languageParser.IN:
        case languageParser.NOT:
        case languageParser.NULL:
        case languageParser.ON:
        case languageParser.WHEN:
        case languageParser.WHERE:
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
        case languageParser.DOTbeforeBRACE:
        	break;
        default:
        	break;
        }
        this.state = 3090;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__17) {
            this.state = 3078;
            this.match(languageParser.T__17);
            this.state = 3079;
            localctx.id = this.ident('ref');
             if (localctx.id.id) localctx.qp.path.push(localctx.id.id); else localctx.qp.path.broken = true; 
            this.state = 3086;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case languageParser.T__7:
            	this.state = 3081;
            	this.pathArguments( localctx.id.id );
            	this.state = 3083;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===languageParser.T__14) {
            	    this.state = 3082;
            	    this.cardinalityAndFilter( localctx.id.id );
            	}

            	break;
            case languageParser.T__14:
            	this.state = 3085;
            	this.cardinalityAndFilter( localctx.id.id );
            	break;
            case languageParser.EOF:
            case languageParser.T__0:
            case languageParser.T__1:
            case languageParser.T__2:
            case languageParser.T__3:
            case languageParser.T__6:
            case languageParser.T__8:
            case languageParser.T__9:
            case languageParser.T__10:
            case languageParser.T__11:
            case languageParser.T__12:
            case languageParser.T__13:
            case languageParser.T__16:
            case languageParser.T__17:
            case languageParser.T__18:
            case languageParser.T__19:
            case languageParser.T__20:
            case languageParser.T__21:
            case languageParser.T__22:
            case languageParser.T__23:
            case languageParser.T__24:
            case languageParser.T__25:
            case languageParser.ALL:
            case languageParser.AS:
            case languageParser.DISTINCT:
            case languageParser.FROM:
            case languageParser.IN:
            case languageParser.NOT:
            case languageParser.NULL:
            case languageParser.ON:
            case languageParser.WHEN:
            case languageParser.WHERE:
            case languageParser.ABSTRACT:
            case languageParser.ACTION:
            case languageParser.ACTIONS:
            case languageParser.AFTER:
            case languageParser.ALWAYS:
            case languageParser.ANALYSIS:
            case languageParser.AND:
            case languageParser.ANNOTATE:
            case languageParser.ANNOTATION:
            case languageParser.ARRAY:
            case languageParser.ASC:
            case languageParser.ASPECT:
            case languageParser.ASSOCIATION:
            case languageParser.ASYNC:
            case languageParser.ASYNCHRONOUS:
            case languageParser.AUTO:
            case languageParser.BETWEEN:
            case languageParser.BOTH:
            case languageParser.CACHE:
            case languageParser.COLUMN:
            case languageParser.COLUMNS:
            case languageParser.COMPOSITION:
            case languageParser.CONFIGURATION:
            case languageParser.CONST:
            case languageParser.CONTEXT:
            case languageParser.CROSS:
            case languageParser.CURRENT:
            case languageParser.CYCLE:
            case languageParser.DAY:
            case languageParser.DEFAULT:
            case languageParser.DEFINE:
            case languageParser.DEPENDS:
            case languageParser.DESC:
            case languageParser.DETECTION:
            case languageParser.DISABLED:
            case languageParser.DOCUMENTS:
            case languageParser.ELEMENT:
            case languageParser.ELSE:
            case languageParser.ENABLED:
            case languageParser.END:
            case languageParser.ENTITY:
            case languageParser.ENUM:
            case languageParser.EVENT:
            case languageParser.EVERY:
            case languageParser.ESCAPE:
            case languageParser.EXCEPT:
            case languageParser.EXCLUDING:
            case languageParser.EXISTING:
            case languageParser.EXTEND:
            case languageParser.EXTENDED:
            case languageParser.FAST:
            case languageParser.FIRST:
            case languageParser.FLUSH:
            case languageParser.FULL:
            case languageParser.FULLTEXT:
            case languageParser.FUNCTION:
            case languageParser.FUZZY:
            case languageParser.GENERATED:
            case languageParser.GETNUMSERVERS:
            case languageParser.GROUP:
            case languageParser.HANA:
            case languageParser.HASH:
            case languageParser.HAVING:
            case languageParser.HOUR:
            case languageParser.IDENTITY:
            case languageParser.INCREMENT:
            case languageParser.INDEX:
            case languageParser.INNER:
            case languageParser.INTERSECT:
            case languageParser.INTO:
            case languageParser.IS:
            case languageParser.JOIN:
            case languageParser.KEEPING:
            case languageParser.LANGUAGE:
            case languageParser.LAST:
            case languageParser.LAYOUT:
            case languageParser.LEADING:
            case languageParser.LEFT:
            case languageParser.LIKE:
            case languageParser.LIMIT:
            case languageParser.LOCALIZED:
            case languageParser.MANY:
            case languageParser.MASKED:
            case languageParser.MAXVALUE:
            case languageParser.MERGE:
            case languageParser.MIGRATION:
            case languageParser.MINING:
            case languageParser.MINUS:
            case languageParser.MINUTE:
            case languageParser.MINUTES:
            case languageParser.MINVALUE:
            case languageParser.MIME:
            case languageParser.MIXIN:
            case languageParser.MODE:
            case languageParser.MONTH:
            case languageParser.NAME:
            case languageParser.NAMESPACE:
            case languageParser.NO:
            case languageParser.NULLS:
            case languageParser.OFF:
            case languageParser.OFFSET:
            case languageParser.ONE:
            case languageParser.ONLY:
            case languageParser.OR:
            case languageParser.ORDER:
            case languageParser.OTHERS:
            case languageParser.OUTER:
            case languageParser.OVERLAY:
            case languageParser.QUEUE:
            case languageParser.PARAMETERS:
            case languageParser.PARTITION:
            case languageParser.PARTITIONING:
            case languageParser.PARTITIONS:
            case languageParser.PHRASE:
            case languageParser.PREPROCESS:
            case languageParser.PRIORITY:
            case languageParser.PROJECTION:
            case languageParser.RANGE:
            case languageParser.RATIO:
            case languageParser.REDIRECTED:
            case languageParser.RESET:
            case languageParser.RETURNS:
            case languageParser.RIGHT:
            case languageParser.ROUNDROBIN:
            case languageParser.ROW:
            case languageParser.SEARCH:
            case languageParser.SECOND:
            case languageParser.SEPARATORS:
            case languageParser.SERVICE:
            case languageParser.START:
            case languageParser.STORAGE:
            case languageParser.STORE:
            case languageParser.SUBTYPE:
            case languageParser.SYNC:
            case languageParser.SYNCHRONOUS:
            case languageParser.TABLE:
            case languageParser.TECHNICAL:
            case languageParser.TEMPORARY:
            case languageParser.TEXT:
            case languageParser.THEN:
            case languageParser.TOKEN:
            case languageParser.TOP:
            case languageParser.TRAILING:
            case languageParser.TO:
            case languageParser.TYPE:
            case languageParser.UNION:
            case languageParser.UNIQUE:
            case languageParser.UNLOAD:
            case languageParser.USING:
            case languageParser.VALUE:
            case languageParser.VALUES:
            case languageParser.VIEW:
            case languageParser.VIRTUAL:
            case languageParser.YEAR:
            case languageParser.Identifier:
            case languageParser.DOTbeforeBRACE:
            	break;
            default:
            	break;
            }
            this.state = 3092;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.qp); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FromArgumentsContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_fromArguments;
    this.pathStep = null
    this.paren = null; // Token
    this.pathStep = pathStep || null;
    return this;
}

FromArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromArgumentsContext.prototype.constructor = FromArgumentsContext;

FromArgumentsContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};




languageParser.FromArgumentsContext = FromArgumentsContext;

languageParser.prototype.fromArguments = function(pathStep) {

    var localctx = new FromArgumentsContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 236, languageParser.RULE_fromArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3093;
        localctx.paren = this.match(languageParser.T__7);
        this.state = 3094;
        this.namedExpression( localctx.pathStep );
        this.state = 3100;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 3095;
            this.match(languageParser.T__2);
             if (this.isStraightBefore(')')) break; 
            this.state = 3097;
            this.namedExpression( localctx.pathStep );
            this.state = 3102;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3103;
        this.match(languageParser.T__8);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathArgumentsContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_pathArguments;
    this.pathStep = null
    this.paren = null; // Token
    this.e1 = null; // ExpressionContext
    this.e2 = null; // ExpressionContext
    this.a = null; // Token
    this.d = null; // Token
    this.star = null; // Token
    this.pathStep = pathStep || null;
    return this;
}

PathArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathArgumentsContext.prototype.constructor = PathArgumentsContext;

PathArgumentsContext.prototype.namedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedExpressionContext);
    } else {
        return this.getTypedRuleContext(NamedExpressionContext,i);
    }
};

PathArgumentsContext.prototype.arrowedExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrowedExpressionContext);
    } else {
        return this.getTypedRuleContext(ArrowedExpressionContext,i);
    }
};

PathArgumentsContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PathArgumentsContext.prototype.ALL = function() {
    return this.getToken(languageParser.ALL, 0);
};

PathArgumentsContext.prototype.DISTINCT = function() {
    return this.getToken(languageParser.DISTINCT, 0);
};




languageParser.PathArgumentsContext = PathArgumentsContext;

languageParser.prototype.pathArguments = function(pathStep) {

    var localctx = new PathArgumentsContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 238, languageParser.RULE_pathArguments);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3105;
        localctx.paren = this.match(languageParser.T__7);
        this.state = 3158;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
        switch(la_) {
        case 1:
            this.state = 3106;
            this.namedExpression( localctx.pathStep );
            this.state = 3112;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 3107;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 3109;
                this.namedExpression( localctx.pathStep );
                this.state = 3114;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
             localctx.pathStep.args = []; 
            this.state = 3116;
            this.arrowedExpression( localctx.pathStep );
            this.state = 3122;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 3117;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 3119;
                this.arrowedExpression( localctx.pathStep );
                this.state = 3124;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.state = 3125;
            localctx.e1 = this.expression();
             localctx.pathStep.args = [ localctx.e1.expr ]; 
            this.state = 3134;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 3127;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore(')')) break; 
                this.state = 3129;
                localctx.e2 = this.expression();
                 localctx.pathStep.args.push( localctx.e2.expr ); 
                this.state = 3136;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 4:
            this.state = 3137;
            localctx.a = this.match(languageParser.ALL);
             this.hanaFlavorOnly( 'ALL in functions is not supported yet', localctx.a ); 
            this.state = 3139;
            localctx.e1 = this.expression();
             localctx.pathStep.args = [ localctx.e1.expr ]; 
            break;

        case 5:
            this.state = 3142;
            localctx.d = this.match(languageParser.DISTINCT);
             this.hanaFlavorOnly ( 'DISTINCT in functions is not supported yet', localctx.d );
            this.state = 3144;
            localctx.e1 = this.expression();
             localctx.pathStep.args = [ localctx.e1.expr ]; 
            this.state = 3152;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 3146;
                this.match(languageParser.T__2);
                this.state = 3147;
                localctx.e2 = this.expression();
                 localctx.pathStep.args.push( localctx.e2.expr ); 
                this.state = 3154;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 6:
            this.state = 3155;
            localctx.star = this.match(languageParser.T__10);
             localctx.pathStep.args = [ { location: this.tokenLocation(localctx.star), val: '*', literal: 'token' } ]; 
            break;

        case 7:
             localctx.pathStep.args = []; 
            break;

        }
        this.state = 3160;
        this.match(languageParser.T__8);
        this._ctx.stop = this._input.LT(-1);
         /* #ATN 1 */ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedExpressionContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namedExpression;
    this.pathStep = null
    this.name = null; // IdentContext
    this.elem = null; // ExpressionContext
    this.pathStep = pathStep || null;
    return this;
}

NamedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedExpressionContext.prototype.constructor = NamedExpressionContext;

NamedExpressionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.NamedExpressionContext = NamedExpressionContext;

languageParser.prototype.namedExpression = function(pathStep) {

    var localctx = new NamedExpressionContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 240, languageParser.RULE_namedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3162;
        localctx.name = this.ident('paramname');
        this.state = 3163;
        this.match(languageParser.T__6);
        this.state = 3164;
        localctx.elem = this.expression();
         if (localctx.pathStep && localctx.name.id) this.addDef( localctx.pathStep, 'namedArgs', 0, localctx.name.id, true,
                                         (localctx.elem) ? localctx.elem.expr : { location: localctx.name.id.location } ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrowedExpressionContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_arrowedExpression;
    this.pathStep = null
    this.name = null; // IdentContext
    this.a = null; // Token
    this.elem = null; // ExpressionContext
    this.pathStep = pathStep || null;
    return this;
}

ArrowedExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrowedExpressionContext.prototype.constructor = ArrowedExpressionContext;

ArrowedExpressionContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

ArrowedExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};




languageParser.ArrowedExpressionContext = ArrowedExpressionContext;

languageParser.prototype.arrowedExpression = function(pathStep) {

    var localctx = new ArrowedExpressionContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 242, languageParser.RULE_arrowedExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3167;
        localctx.name = this.ident('paramname');
        this.state = 3168;
        localctx.a = this.match(languageParser.T__27);
        this.state = 3169;
        localctx.elem = this.expression();
         if (localctx.name.id) this.addDef( localctx.pathStep, 'namedArgs', 0, localctx.name.id, true,
                                         (localctx.elem) ? localctx.elem.expr : { location: localctx.name.id.location } ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CardinalityAndFilterContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_cardinalityAndFilter;
    this.pathStep = null
    this._sync = 'nop'
    this.co = null; // ConditionContext
    this.pathStep = pathStep || null;
    return this;
}

CardinalityAndFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CardinalityAndFilterContext.prototype.constructor = CardinalityAndFilterContext;

CardinalityAndFilterContext.prototype.optionalWhereForFilter = function() {
    return this.getTypedRuleContext(OptionalWhereForFilterContext,0);
};

CardinalityAndFilterContext.prototype.condition = function() {
    return this.getTypedRuleContext(ConditionContext,0);
};

CardinalityAndFilterContext.prototype.optionalCardinality = function() {
    return this.getTypedRuleContext(OptionalCardinalityContext,0);
};




languageParser.CardinalityAndFilterContext = CardinalityAndFilterContext;

languageParser.prototype.cardinalityAndFilter = function(pathStep) {

    var localctx = new CardinalityAndFilterContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 244, languageParser.RULE_cardinalityAndFilter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3172;
        this.match(languageParser.T__14);
        this.state = 3174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.Number) {
            this.state = 3173;
            this.optionalCardinality( pathStep );
        }

        this.state = 3176;
        this.optionalWhereForFilter();
        this.state = 3177;
        localctx.co = this.condition();
         if (localctx.pathStep) localctx.pathStep.where = localctx.co.cond; 
        this.state = 3179;
        this.match(languageParser.T__16);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionalCardinalityContext(parser, parent, invokingState, pathStep) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_optionalCardinality;
    this.pathStep = null
    this.trgMax = null; // Token
    this.pathStep = pathStep || null;
    return this;
}

OptionalCardinalityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalCardinalityContext.prototype.constructor = OptionalCardinalityContext;

OptionalCardinalityContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};




languageParser.OptionalCardinalityContext = OptionalCardinalityContext;

languageParser.prototype.optionalCardinality = function(pathStep) {

    var localctx = new OptionalCardinalityContext(this, this._ctx, this.state, pathStep);
    this.enterRule(localctx, 246, languageParser.RULE_optionalCardinality);
    try {
        this.enterOuterAlt(localctx, 1);
         if (this._input.LT(2).text !== ':') return localctx; 

        this.state = 3182;
        localctx.trgMax = this.match(languageParser.Number);
        this.state = 3183;
        this.match(languageParser.T__6);
         if (localctx.pathStep) localctx.pathStep.cardinality = { targetMax: this.numberLiteral( localctx.trgMax ) } 
        this._ctx.stop = this._input.LT(-1);
         if (localctx.pathStep && localctx.pathStep.cardinality) this.attachLocation(localctx.pathStep.cardinality); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionalWhereForFilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_optionalWhereForFilter;
    return this;
}

OptionalWhereForFilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalWhereForFilterContext.prototype.constructor = OptionalWhereForFilterContext;

OptionalWhereForFilterContext.prototype.WHERE = function() {
    return this.getToken(languageParser.WHERE, 0);
};




languageParser.OptionalWhereForFilterContext = OptionalWhereForFilterContext;

languageParser.prototype.optionalWhereForFilter = function() {

    var localctx = new OptionalWhereForFilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, languageParser.RULE_optionalWhereForFilter);
    try {
        this.enterOuterAlt(localctx, 1);

              var text = this.getCurrentToken().text.toUpperCase();
              if (!['WHERE','GROUP','ORDER','LIMIT'].includes( text )) return;
              // TODO: should we somehow add those keywords to $(EXPECTED)?
            
        this.state = 3187;
        this.match(languageParser.WHERE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectItemInlineContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_selectItemInline;
    this.o = {}
    this.cb = null; // Token
    return this;
}

SelectItemInlineContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectItemInlineContext.prototype.constructor = SelectItemInlineContext;

SelectItemInlineContext.prototype.selectItemDef = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectItemDefContext);
    } else {
        return this.getTypedRuleContext(SelectItemDefContext,i);
    }
};




languageParser.SelectItemInlineContext = SelectItemInlineContext;

languageParser.prototype.selectItemInline = function() {

    var localctx = new SelectItemInlineContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, languageParser.RULE_selectItemInline);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3189;
        localctx.cb = this.match(languageParser.T__1);
         this.hanaFlavorOnly( 'Inline select items are not supported yet', localctx.cb ); 
        this.state = 3191;
        this.selectItemDef(localctx.o);
        this.state = 3196;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__2) {
            this.state = 3192;
            this.match(languageParser.T__2);
            this.state = 3193;
            this.selectItemDef(localctx.o);
            this.state = 3198;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 3199;
        this.match(languageParser.T__3);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_value;
    this.val = null
    this.head = null; // ArrayValueContext
    this.tail = null; // ArrayValueContext
    this.v1 = null; // LiteralValueContext
    this.plus = null; // Token
    this.min = null; // Token
    this.num = null; // Token
    return this;
}

ValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueContext.prototype.constructor = ValueContext;

ValueContext.prototype.namedValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedValueContext);
    } else {
        return this.getTypedRuleContext(NamedValueContext,i);
    }
};

ValueContext.prototype.arrayValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayValueContext);
    } else {
        return this.getTypedRuleContext(ArrayValueContext,i);
    }
};

ValueContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

ValueContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

ValueContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};




languageParser.ValueContext = ValueContext;

languageParser.prototype.value = function() {

    var localctx = new ValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, languageParser.RULE_value);
    var _la = 0; // Token type
    try {
        this.state = 3242;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
             localctx.val =  { literal: 'struct', location: this.startLocation() } 
            this.state = 3202;
            this.match(languageParser.T__1);
            this.state = 3203;
            this.namedValue( localctx.val );
            this.state = 3209;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 3204;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore('}')) break; 
                this.state = 3206;
                this.namedValue( localctx.val );
                this.state = 3211;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3212;
            this.match(languageParser.T__3);
            break;
        case languageParser.T__14:
            this.enterOuterAlt(localctx, 2);
             localctx.val =  { literal: 'array', location: this.startLocation(), val: [] } 
            this.state = 3215;
            this.match(languageParser.T__14);
            this.state = 3228;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__5) | (1 << languageParser.T__14) | (1 << languageParser.T__23) | (1 << languageParser.T__24))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (languageParser.String - 32)) | (1 << (languageParser.QuotedLiteral - 32)) | (1 << (languageParser.Boolean - 32)) | (1 << (languageParser.NULL - 32)) | (1 << (languageParser.Number - 32)) | (1 << (languageParser.ABSTRACT - 32)) | (1 << (languageParser.ACTION - 32)) | (1 << (languageParser.ACTIONS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (languageParser.AFTER - 64)) | (1 << (languageParser.ALWAYS - 64)) | (1 << (languageParser.ANALYSIS - 64)) | (1 << (languageParser.AND - 64)) | (1 << (languageParser.ANNOTATE - 64)) | (1 << (languageParser.ANNOTATION - 64)) | (1 << (languageParser.ARRAY - 64)) | (1 << (languageParser.ASC - 64)) | (1 << (languageParser.ASPECT - 64)) | (1 << (languageParser.ASSOCIATION - 64)) | (1 << (languageParser.ASYNC - 64)) | (1 << (languageParser.ASYNCHRONOUS - 64)) | (1 << (languageParser.AUTO - 64)) | (1 << (languageParser.BETWEEN - 64)) | (1 << (languageParser.BOTH - 64)) | (1 << (languageParser.CACHE - 64)) | (1 << (languageParser.COLUMN - 64)) | (1 << (languageParser.COLUMNS - 64)) | (1 << (languageParser.COMPOSITION - 64)) | (1 << (languageParser.CONFIGURATION - 64)) | (1 << (languageParser.CONST - 64)) | (1 << (languageParser.CONTEXT - 64)) | (1 << (languageParser.CROSS - 64)) | (1 << (languageParser.CURRENT - 64)) | (1 << (languageParser.CYCLE - 64)) | (1 << (languageParser.DAY - 64)) | (1 << (languageParser.DEFAULT - 64)) | (1 << (languageParser.DEFINE - 64)) | (1 << (languageParser.DEPENDS - 64)) | (1 << (languageParser.DESC - 64)) | (1 << (languageParser.DETECTION - 64)) | (1 << (languageParser.DISABLED - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (languageParser.DOCUMENTS - 96)) | (1 << (languageParser.ELEMENT - 96)) | (1 << (languageParser.ELSE - 96)) | (1 << (languageParser.ENABLED - 96)) | (1 << (languageParser.END - 96)) | (1 << (languageParser.ENTITY - 96)) | (1 << (languageParser.ENUM - 96)) | (1 << (languageParser.EVENT - 96)) | (1 << (languageParser.EVERY - 96)) | (1 << (languageParser.ESCAPE - 96)) | (1 << (languageParser.EXCEPT - 96)) | (1 << (languageParser.EXCLUDING - 96)) | (1 << (languageParser.EXISTING - 96)) | (1 << (languageParser.EXTEND - 96)) | (1 << (languageParser.EXTENDED - 96)) | (1 << (languageParser.FAST - 96)) | (1 << (languageParser.FIRST - 96)) | (1 << (languageParser.FLUSH - 96)) | (1 << (languageParser.FULL - 96)) | (1 << (languageParser.FULLTEXT - 96)) | (1 << (languageParser.FUNCTION - 96)) | (1 << (languageParser.FUZZY - 96)) | (1 << (languageParser.GENERATED - 96)) | (1 << (languageParser.GETNUMSERVERS - 96)) | (1 << (languageParser.GROUP - 96)) | (1 << (languageParser.HANA - 96)) | (1 << (languageParser.HASH - 96)) | (1 << (languageParser.HAVING - 96)) | (1 << (languageParser.HOUR - 96)) | (1 << (languageParser.IDENTITY - 96)) | (1 << (languageParser.INCREMENT - 96)) | (1 << (languageParser.INDEX - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.INNER - 128)) | (1 << (languageParser.INTERSECT - 128)) | (1 << (languageParser.INTO - 128)) | (1 << (languageParser.IS - 128)) | (1 << (languageParser.JOIN - 128)) | (1 << (languageParser.KEEPING - 128)) | (1 << (languageParser.LANGUAGE - 128)) | (1 << (languageParser.LAST - 128)) | (1 << (languageParser.LAYOUT - 128)) | (1 << (languageParser.LEADING - 128)) | (1 << (languageParser.LEFT - 128)) | (1 << (languageParser.LIKE - 128)) | (1 << (languageParser.LIMIT - 128)) | (1 << (languageParser.LOCALIZED - 128)) | (1 << (languageParser.MANY - 128)) | (1 << (languageParser.MASKED - 128)) | (1 << (languageParser.MAXVALUE - 128)) | (1 << (languageParser.MERGE - 128)) | (1 << (languageParser.MIGRATION - 128)) | (1 << (languageParser.MINING - 128)) | (1 << (languageParser.MINUS - 128)) | (1 << (languageParser.MINUTE - 128)) | (1 << (languageParser.MINUTES - 128)) | (1 << (languageParser.MINVALUE - 128)) | (1 << (languageParser.MIME - 128)) | (1 << (languageParser.MIXIN - 128)) | (1 << (languageParser.MODE - 128)) | (1 << (languageParser.MONTH - 128)) | (1 << (languageParser.NAME - 128)) | (1 << (languageParser.NAMESPACE - 128)) | (1 << (languageParser.NO - 128)) | (1 << (languageParser.NULLS - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (languageParser.OFF - 160)) | (1 << (languageParser.OFFSET - 160)) | (1 << (languageParser.ONE - 160)) | (1 << (languageParser.ONLY - 160)) | (1 << (languageParser.OR - 160)) | (1 << (languageParser.ORDER - 160)) | (1 << (languageParser.OTHERS - 160)) | (1 << (languageParser.OUTER - 160)) | (1 << (languageParser.OVERLAY - 160)) | (1 << (languageParser.QUEUE - 160)) | (1 << (languageParser.PARAMETERS - 160)) | (1 << (languageParser.PARTITION - 160)) | (1 << (languageParser.PARTITIONING - 160)) | (1 << (languageParser.PARTITIONS - 160)) | (1 << (languageParser.PHRASE - 160)) | (1 << (languageParser.PREPROCESS - 160)) | (1 << (languageParser.PRIORITY - 160)) | (1 << (languageParser.PROJECTION - 160)) | (1 << (languageParser.RANGE - 160)) | (1 << (languageParser.RATIO - 160)) | (1 << (languageParser.REDIRECTED - 160)) | (1 << (languageParser.RESET - 160)) | (1 << (languageParser.RETURNS - 160)) | (1 << (languageParser.RIGHT - 160)) | (1 << (languageParser.ROUNDROBIN - 160)) | (1 << (languageParser.ROW - 160)) | (1 << (languageParser.SEARCH - 160)) | (1 << (languageParser.SECOND - 160)) | (1 << (languageParser.SEPARATORS - 160)) | (1 << (languageParser.SERVICE - 160)) | (1 << (languageParser.START - 160)) | (1 << (languageParser.STORAGE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (languageParser.STORE - 192)) | (1 << (languageParser.SUBTYPE - 192)) | (1 << (languageParser.SYNC - 192)) | (1 << (languageParser.SYNCHRONOUS - 192)) | (1 << (languageParser.TABLE - 192)) | (1 << (languageParser.TECHNICAL - 192)) | (1 << (languageParser.TEMPORARY - 192)) | (1 << (languageParser.TEXT - 192)) | (1 << (languageParser.THEN - 192)) | (1 << (languageParser.TOKEN - 192)) | (1 << (languageParser.TOP - 192)) | (1 << (languageParser.TRAILING - 192)) | (1 << (languageParser.TO - 192)) | (1 << (languageParser.TYPE - 192)) | (1 << (languageParser.UNION - 192)) | (1 << (languageParser.UNIQUE - 192)) | (1 << (languageParser.UNLOAD - 192)) | (1 << (languageParser.USING - 192)) | (1 << (languageParser.VALUE - 192)) | (1 << (languageParser.VALUES - 192)) | (1 << (languageParser.VIEW - 192)) | (1 << (languageParser.VIRTUAL - 192)) | (1 << (languageParser.YEAR - 192)) | (1 << (languageParser.Identifier - 192)))) !== 0)) {
                this.state = 3216;
                localctx.head = this.arrayValue();
                 localctx.val.val.push( localctx.head.val ); 
                this.state = 3225;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 3218;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore(']')) break; 
                    this.state = 3220;
                    localctx.tail = this.arrayValue();
                     localctx.val.val.push( localctx.tail.val ); 
                    this.state = 3227;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 3230;
            this.match(languageParser.T__16);
            break;
        case languageParser.T__5:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.NULL:
        case languageParser.Number:
            this.enterOuterAlt(localctx, 3);
            this.state = 3231;
            localctx.v1 = this.literalValue();
             localctx.val =  localctx.v1.val 
            break;
        case languageParser.T__23:
        case languageParser.T__24:
            this.enterOuterAlt(localctx, 4);
            this.state = 3236;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__23:
                this.state = 3234;
                localctx.plus = this.match(languageParser.T__23);
                break;
            case languageParser.T__24:
                this.state = 3235;
                localctx.min = this.match(languageParser.T__24);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3238;
            localctx.num = this.match(languageParser.Number);
             localctx.val =  this.numberLiteral( localctx.num, localctx.plus||localctx.min ) 
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 5);
             localctx.val =  {} 
            this.state = 3241;
            this.simplePath( localctx.val, 'ref' );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.val); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedValueContext(parser, parent, invokingState, struct) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namedValue;
    this.struct = null
    this.namedVal = { name: {} }
    this.variant = null; // IdentContext
    this.elem = null; // ValueContext
    this.struct = struct || null;
    return this;
}

NamedValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedValueContext.prototype.constructor = NamedValueContext;

NamedValueContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};

NamedValueContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamedValueContext.prototype.value = function() {
    return this.getTypedRuleContext(ValueContext,0);
};




languageParser.NamedValueContext = NamedValueContext;

languageParser.prototype.namedValue = function(struct) {

    var localctx = new NamedValueContext(this, this._ctx, this.state, struct);
    this.enterRule(localctx, 254, languageParser.RULE_namedValue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3244;
        this.simplePath( localctx.namedVal.name, 'name' );
        this.state = 3249;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__5) {
            this.state = 3245;
            this.match(languageParser.T__5);
            this.state = 3246;
            localctx.variant = this.ident('variant');
             localctx.namedVal.name.variant = localctx.variant.id; 
        }

        this.state = 3253;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__6) {
            this.state = 3251;
            this.match(languageParser.T__6);
            this.state = 3252;
            localctx.elem = this.value();
        }

         this.addItem( localctx.struct, '_struct', null, true, // TODO: re-check _struct
                            (localctx.elem) ? Object.assign(localctx.namedVal, localctx.elem.val) : localctx.namedVal ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_arrayValue;
    this.val = null
    this.head = null; // ArrayValueContext
    this.tail = null; // ArrayValueContext
    this.v1 = null; // LiteralValueContext
    this.plus = null; // Token
    this.min = null; // Token
    this.num = null; // Token
    return this;
}

ArrayValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayValueContext.prototype.constructor = ArrayValueContext;

ArrayValueContext.prototype.namedValueInArray = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamedValueInArrayContext);
    } else {
        return this.getTypedRuleContext(NamedValueInArrayContext,i);
    }
};

ArrayValueContext.prototype.arrayValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArrayValueContext);
    } else {
        return this.getTypedRuleContext(ArrayValueContext,i);
    }
};

ArrayValueContext.prototype.literalValue = function() {
    return this.getTypedRuleContext(LiteralValueContext,0);
};

ArrayValueContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

ArrayValueContext.prototype.simplePath = function() {
    return this.getTypedRuleContext(SimplePathContext,0);
};




languageParser.ArrayValueContext = ArrayValueContext;

languageParser.prototype.arrayValue = function() {

    var localctx = new ArrayValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, languageParser.RULE_arrayValue);
    var _la = 0; // Token type
    try {
        this.state = 3298;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__1:
            this.enterOuterAlt(localctx, 1);
             localctx.val =  { literal: 'struct', location: this.startLocation() } 
            this.state = 3258;
            this.match(languageParser.T__1);
            this.state = 3259;
            this.namedValueInArray( localctx.val );
            this.state = 3265;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===languageParser.T__2) {
                this.state = 3260;
                this.match(languageParser.T__2);
                 if (this.isStraightBefore('}')) break; 
                this.state = 3262;
                this.namedValueInArray( localctx.val );
                this.state = 3267;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 3268;
            this.match(languageParser.T__3);
            break;
        case languageParser.T__14:
            this.enterOuterAlt(localctx, 2);
             localctx.val =  { literal: 'array', location: this.startLocation(), val: [] } 
            this.state = 3271;
            this.match(languageParser.T__14);
            this.state = 3284;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << languageParser.T__1) | (1 << languageParser.T__5) | (1 << languageParser.T__14) | (1 << languageParser.T__23) | (1 << languageParser.T__24))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (languageParser.String - 32)) | (1 << (languageParser.QuotedLiteral - 32)) | (1 << (languageParser.Boolean - 32)) | (1 << (languageParser.NULL - 32)) | (1 << (languageParser.Number - 32)) | (1 << (languageParser.ABSTRACT - 32)) | (1 << (languageParser.ACTION - 32)) | (1 << (languageParser.ACTIONS - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (languageParser.AFTER - 64)) | (1 << (languageParser.ALWAYS - 64)) | (1 << (languageParser.ANALYSIS - 64)) | (1 << (languageParser.AND - 64)) | (1 << (languageParser.ANNOTATE - 64)) | (1 << (languageParser.ANNOTATION - 64)) | (1 << (languageParser.ARRAY - 64)) | (1 << (languageParser.ASC - 64)) | (1 << (languageParser.ASPECT - 64)) | (1 << (languageParser.ASSOCIATION - 64)) | (1 << (languageParser.ASYNC - 64)) | (1 << (languageParser.ASYNCHRONOUS - 64)) | (1 << (languageParser.AUTO - 64)) | (1 << (languageParser.BETWEEN - 64)) | (1 << (languageParser.BOTH - 64)) | (1 << (languageParser.CACHE - 64)) | (1 << (languageParser.COLUMN - 64)) | (1 << (languageParser.COLUMNS - 64)) | (1 << (languageParser.COMPOSITION - 64)) | (1 << (languageParser.CONFIGURATION - 64)) | (1 << (languageParser.CONST - 64)) | (1 << (languageParser.CONTEXT - 64)) | (1 << (languageParser.CROSS - 64)) | (1 << (languageParser.CURRENT - 64)) | (1 << (languageParser.CYCLE - 64)) | (1 << (languageParser.DAY - 64)) | (1 << (languageParser.DEFAULT - 64)) | (1 << (languageParser.DEFINE - 64)) | (1 << (languageParser.DEPENDS - 64)) | (1 << (languageParser.DESC - 64)) | (1 << (languageParser.DETECTION - 64)) | (1 << (languageParser.DISABLED - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (languageParser.DOCUMENTS - 96)) | (1 << (languageParser.ELEMENT - 96)) | (1 << (languageParser.ELSE - 96)) | (1 << (languageParser.ENABLED - 96)) | (1 << (languageParser.END - 96)) | (1 << (languageParser.ENTITY - 96)) | (1 << (languageParser.ENUM - 96)) | (1 << (languageParser.EVENT - 96)) | (1 << (languageParser.EVERY - 96)) | (1 << (languageParser.ESCAPE - 96)) | (1 << (languageParser.EXCEPT - 96)) | (1 << (languageParser.EXCLUDING - 96)) | (1 << (languageParser.EXISTING - 96)) | (1 << (languageParser.EXTEND - 96)) | (1 << (languageParser.EXTENDED - 96)) | (1 << (languageParser.FAST - 96)) | (1 << (languageParser.FIRST - 96)) | (1 << (languageParser.FLUSH - 96)) | (1 << (languageParser.FULL - 96)) | (1 << (languageParser.FULLTEXT - 96)) | (1 << (languageParser.FUNCTION - 96)) | (1 << (languageParser.FUZZY - 96)) | (1 << (languageParser.GENERATED - 96)) | (1 << (languageParser.GETNUMSERVERS - 96)) | (1 << (languageParser.GROUP - 96)) | (1 << (languageParser.HANA - 96)) | (1 << (languageParser.HASH - 96)) | (1 << (languageParser.HAVING - 96)) | (1 << (languageParser.HOUR - 96)) | (1 << (languageParser.IDENTITY - 96)) | (1 << (languageParser.INCREMENT - 96)) | (1 << (languageParser.INDEX - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (languageParser.INNER - 128)) | (1 << (languageParser.INTERSECT - 128)) | (1 << (languageParser.INTO - 128)) | (1 << (languageParser.IS - 128)) | (1 << (languageParser.JOIN - 128)) | (1 << (languageParser.KEEPING - 128)) | (1 << (languageParser.LANGUAGE - 128)) | (1 << (languageParser.LAST - 128)) | (1 << (languageParser.LAYOUT - 128)) | (1 << (languageParser.LEADING - 128)) | (1 << (languageParser.LEFT - 128)) | (1 << (languageParser.LIKE - 128)) | (1 << (languageParser.LIMIT - 128)) | (1 << (languageParser.LOCALIZED - 128)) | (1 << (languageParser.MANY - 128)) | (1 << (languageParser.MASKED - 128)) | (1 << (languageParser.MAXVALUE - 128)) | (1 << (languageParser.MERGE - 128)) | (1 << (languageParser.MIGRATION - 128)) | (1 << (languageParser.MINING - 128)) | (1 << (languageParser.MINUS - 128)) | (1 << (languageParser.MINUTE - 128)) | (1 << (languageParser.MINUTES - 128)) | (1 << (languageParser.MINVALUE - 128)) | (1 << (languageParser.MIME - 128)) | (1 << (languageParser.MIXIN - 128)) | (1 << (languageParser.MODE - 128)) | (1 << (languageParser.MONTH - 128)) | (1 << (languageParser.NAME - 128)) | (1 << (languageParser.NAMESPACE - 128)) | (1 << (languageParser.NO - 128)) | (1 << (languageParser.NULLS - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (languageParser.OFF - 160)) | (1 << (languageParser.OFFSET - 160)) | (1 << (languageParser.ONE - 160)) | (1 << (languageParser.ONLY - 160)) | (1 << (languageParser.OR - 160)) | (1 << (languageParser.ORDER - 160)) | (1 << (languageParser.OTHERS - 160)) | (1 << (languageParser.OUTER - 160)) | (1 << (languageParser.OVERLAY - 160)) | (1 << (languageParser.QUEUE - 160)) | (1 << (languageParser.PARAMETERS - 160)) | (1 << (languageParser.PARTITION - 160)) | (1 << (languageParser.PARTITIONING - 160)) | (1 << (languageParser.PARTITIONS - 160)) | (1 << (languageParser.PHRASE - 160)) | (1 << (languageParser.PREPROCESS - 160)) | (1 << (languageParser.PRIORITY - 160)) | (1 << (languageParser.PROJECTION - 160)) | (1 << (languageParser.RANGE - 160)) | (1 << (languageParser.RATIO - 160)) | (1 << (languageParser.REDIRECTED - 160)) | (1 << (languageParser.RESET - 160)) | (1 << (languageParser.RETURNS - 160)) | (1 << (languageParser.RIGHT - 160)) | (1 << (languageParser.ROUNDROBIN - 160)) | (1 << (languageParser.ROW - 160)) | (1 << (languageParser.SEARCH - 160)) | (1 << (languageParser.SECOND - 160)) | (1 << (languageParser.SEPARATORS - 160)) | (1 << (languageParser.SERVICE - 160)) | (1 << (languageParser.START - 160)) | (1 << (languageParser.STORAGE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (languageParser.STORE - 192)) | (1 << (languageParser.SUBTYPE - 192)) | (1 << (languageParser.SYNC - 192)) | (1 << (languageParser.SYNCHRONOUS - 192)) | (1 << (languageParser.TABLE - 192)) | (1 << (languageParser.TECHNICAL - 192)) | (1 << (languageParser.TEMPORARY - 192)) | (1 << (languageParser.TEXT - 192)) | (1 << (languageParser.THEN - 192)) | (1 << (languageParser.TOKEN - 192)) | (1 << (languageParser.TOP - 192)) | (1 << (languageParser.TRAILING - 192)) | (1 << (languageParser.TO - 192)) | (1 << (languageParser.TYPE - 192)) | (1 << (languageParser.UNION - 192)) | (1 << (languageParser.UNIQUE - 192)) | (1 << (languageParser.UNLOAD - 192)) | (1 << (languageParser.USING - 192)) | (1 << (languageParser.VALUE - 192)) | (1 << (languageParser.VALUES - 192)) | (1 << (languageParser.VIEW - 192)) | (1 << (languageParser.VIRTUAL - 192)) | (1 << (languageParser.YEAR - 192)) | (1 << (languageParser.Identifier - 192)))) !== 0)) {
                this.state = 3272;
                localctx.head = this.arrayValue();
                 localctx.val.val.push( localctx.head.val ); 
                this.state = 3281;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===languageParser.T__2) {
                    this.state = 3274;
                    this.match(languageParser.T__2);
                     if (this.isStraightBefore(']')) break; 
                    this.state = 3276;
                    localctx.tail = this.arrayValue();
                     localctx.val.val.push( localctx.tail.val ); 
                    this.state = 3283;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 3286;
            this.match(languageParser.T__16);
            break;
        case languageParser.T__5:
        case languageParser.String:
        case languageParser.QuotedLiteral:
        case languageParser.Boolean:
        case languageParser.NULL:
        case languageParser.Number:
            this.enterOuterAlt(localctx, 3);
            this.state = 3287;
            localctx.v1 = this.literalValue();
             localctx.val =  localctx.v1.val 
            break;
        case languageParser.T__23:
        case languageParser.T__24:
            this.enterOuterAlt(localctx, 4);
            this.state = 3292;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case languageParser.T__23:
                this.state = 3290;
                localctx.plus = this.match(languageParser.T__23);
                break;
            case languageParser.T__24:
                this.state = 3291;
                localctx.min = this.match(languageParser.T__24);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 3294;
            localctx.num = this.match(languageParser.Number);
             localctx.val =  this.numberLiteral( localctx.num, localctx.plus||localctx.min ) 
            break;
        case languageParser.ABSTRACT:
        case languageParser.ACTION:
        case languageParser.ACTIONS:
        case languageParser.AFTER:
        case languageParser.ALWAYS:
        case languageParser.ANALYSIS:
        case languageParser.AND:
        case languageParser.ANNOTATE:
        case languageParser.ANNOTATION:
        case languageParser.ARRAY:
        case languageParser.ASC:
        case languageParser.ASPECT:
        case languageParser.ASSOCIATION:
        case languageParser.ASYNC:
        case languageParser.ASYNCHRONOUS:
        case languageParser.AUTO:
        case languageParser.BETWEEN:
        case languageParser.BOTH:
        case languageParser.CACHE:
        case languageParser.COLUMN:
        case languageParser.COLUMNS:
        case languageParser.COMPOSITION:
        case languageParser.CONFIGURATION:
        case languageParser.CONST:
        case languageParser.CONTEXT:
        case languageParser.CROSS:
        case languageParser.CURRENT:
        case languageParser.CYCLE:
        case languageParser.DAY:
        case languageParser.DEFAULT:
        case languageParser.DEFINE:
        case languageParser.DEPENDS:
        case languageParser.DESC:
        case languageParser.DETECTION:
        case languageParser.DISABLED:
        case languageParser.DOCUMENTS:
        case languageParser.ELEMENT:
        case languageParser.ELSE:
        case languageParser.ENABLED:
        case languageParser.END:
        case languageParser.ENTITY:
        case languageParser.ENUM:
        case languageParser.EVENT:
        case languageParser.EVERY:
        case languageParser.ESCAPE:
        case languageParser.EXCEPT:
        case languageParser.EXCLUDING:
        case languageParser.EXISTING:
        case languageParser.EXTEND:
        case languageParser.EXTENDED:
        case languageParser.FAST:
        case languageParser.FIRST:
        case languageParser.FLUSH:
        case languageParser.FULL:
        case languageParser.FULLTEXT:
        case languageParser.FUNCTION:
        case languageParser.FUZZY:
        case languageParser.GENERATED:
        case languageParser.GETNUMSERVERS:
        case languageParser.GROUP:
        case languageParser.HANA:
        case languageParser.HASH:
        case languageParser.HAVING:
        case languageParser.HOUR:
        case languageParser.IDENTITY:
        case languageParser.INCREMENT:
        case languageParser.INDEX:
        case languageParser.INNER:
        case languageParser.INTERSECT:
        case languageParser.INTO:
        case languageParser.IS:
        case languageParser.JOIN:
        case languageParser.KEEPING:
        case languageParser.LANGUAGE:
        case languageParser.LAST:
        case languageParser.LAYOUT:
        case languageParser.LEADING:
        case languageParser.LEFT:
        case languageParser.LIKE:
        case languageParser.LIMIT:
        case languageParser.LOCALIZED:
        case languageParser.MANY:
        case languageParser.MASKED:
        case languageParser.MAXVALUE:
        case languageParser.MERGE:
        case languageParser.MIGRATION:
        case languageParser.MINING:
        case languageParser.MINUS:
        case languageParser.MINUTE:
        case languageParser.MINUTES:
        case languageParser.MINVALUE:
        case languageParser.MIME:
        case languageParser.MIXIN:
        case languageParser.MODE:
        case languageParser.MONTH:
        case languageParser.NAME:
        case languageParser.NAMESPACE:
        case languageParser.NO:
        case languageParser.NULLS:
        case languageParser.OFF:
        case languageParser.OFFSET:
        case languageParser.ONE:
        case languageParser.ONLY:
        case languageParser.OR:
        case languageParser.ORDER:
        case languageParser.OTHERS:
        case languageParser.OUTER:
        case languageParser.OVERLAY:
        case languageParser.QUEUE:
        case languageParser.PARAMETERS:
        case languageParser.PARTITION:
        case languageParser.PARTITIONING:
        case languageParser.PARTITIONS:
        case languageParser.PHRASE:
        case languageParser.PREPROCESS:
        case languageParser.PRIORITY:
        case languageParser.PROJECTION:
        case languageParser.RANGE:
        case languageParser.RATIO:
        case languageParser.REDIRECTED:
        case languageParser.RESET:
        case languageParser.RETURNS:
        case languageParser.RIGHT:
        case languageParser.ROUNDROBIN:
        case languageParser.ROW:
        case languageParser.SEARCH:
        case languageParser.SECOND:
        case languageParser.SEPARATORS:
        case languageParser.SERVICE:
        case languageParser.START:
        case languageParser.STORAGE:
        case languageParser.STORE:
        case languageParser.SUBTYPE:
        case languageParser.SYNC:
        case languageParser.SYNCHRONOUS:
        case languageParser.TABLE:
        case languageParser.TECHNICAL:
        case languageParser.TEMPORARY:
        case languageParser.TEXT:
        case languageParser.THEN:
        case languageParser.TOKEN:
        case languageParser.TOP:
        case languageParser.TRAILING:
        case languageParser.TO:
        case languageParser.TYPE:
        case languageParser.UNION:
        case languageParser.UNIQUE:
        case languageParser.UNLOAD:
        case languageParser.USING:
        case languageParser.VALUE:
        case languageParser.VALUES:
        case languageParser.VIEW:
        case languageParser.VIRTUAL:
        case languageParser.YEAR:
        case languageParser.Identifier:
            this.enterOuterAlt(localctx, 5);
             localctx.val =  {} 
            this.state = 3297;
            this.simplePath( localctx.val, 'ref' );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.val); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamedValueInArrayContext(parser, parent, invokingState, struct) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_namedValueInArray;
    this.struct = null
    this.name = null; // IdentContext
    this.elem = null; // ArrayValueContext
    this.struct = struct || null;
    return this;
}

NamedValueInArrayContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamedValueInArrayContext.prototype.constructor = NamedValueInArrayContext;

NamedValueInArrayContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

NamedValueInArrayContext.prototype.arrayValue = function() {
    return this.getTypedRuleContext(ArrayValueContext,0);
};




languageParser.NamedValueInArrayContext = NamedValueInArrayContext;

languageParser.prototype.namedValueInArray = function(struct) {

    var localctx = new NamedValueInArrayContext(this, this._ctx, this.state, struct);
    this.enterRule(localctx, 258, languageParser.RULE_namedValueInArray);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3300;
        localctx.name = this.ident('name');
        this.state = 3303;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===languageParser.T__6) {
            this.state = 3301;
            this.match(languageParser.T__6);
            this.state = 3302;
            localctx.elem = this.arrayValue();
        }

         if (localctx.name.id) this.addDef( localctx.struct, 'struct', null, localctx.name.id, true,
                                         (localctx.elem) ? localctx.elem.val : { location: localctx.name.id.location } ); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_literalValue;
    this.val = null
    this.tok = null
    this.name = null; // IdentContext
    return this;
}

LiteralValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralValueContext.prototype.constructor = LiteralValueContext;

LiteralValueContext.prototype.ident = function() {
    return this.getTypedRuleContext(IdentContext,0);
};

LiteralValueContext.prototype.NULL = function() {
    return this.getToken(languageParser.NULL, 0);
};

LiteralValueContext.prototype.Boolean = function() {
    return this.getToken(languageParser.Boolean, 0);
};

LiteralValueContext.prototype.Number = function() {
    return this.getToken(languageParser.Number, 0);
};

LiteralValueContext.prototype.String = function() {
    return this.getToken(languageParser.String, 0);
};

LiteralValueContext.prototype.QuotedLiteral = function() {
    return this.getToken(languageParser.QuotedLiteral, 0);
};




languageParser.LiteralValueContext = LiteralValueContext;

languageParser.prototype.literalValue = function() {

    var localctx = new LiteralValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, languageParser.RULE_literalValue);
     localctx.tok =  this.getCurrentToken() 
    try {
        this.state = 3321;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case languageParser.T__5:
            this.enterOuterAlt(localctx, 1);
            this.state = 3307;
            this.match(languageParser.T__5);
            this.state = 3308;
            localctx.name = this.ident('enumref');
             localctx.val = { literal: 'enum', symbol: localctx.name.id } 
            break;
        case languageParser.NULL:
            this.enterOuterAlt(localctx, 2);
            this.state = 3311;
            this.match(languageParser.NULL);
             localctx.val =  { literal: 'null', val: null } 
            break;
        case languageParser.Boolean:
            this.enterOuterAlt(localctx, 3);
            this.state = 3313;
            this.match(languageParser.Boolean);
             localctx.val =  { literal: 'boolean', val: localctx.tok.text.toLowerCase() != 'false' } 
            break;
        case languageParser.Number:
            this.enterOuterAlt(localctx, 4);
            this.state = 3315;
            this.match(languageParser.Number);
             localctx.val =  this.numberLiteral( localctx.tok, '' ) 
            break;
        case languageParser.String:
            this.enterOuterAlt(localctx, 5);
            this.state = 3317;
            this.match(languageParser.String);
             localctx.val =  this.quotedLiteral( localctx.tok, 'string' ) 
            break;
        case languageParser.QuotedLiteral:
            this.enterOuterAlt(localctx, 6);
            this.state = 3319;
            this.match(languageParser.QuotedLiteral);
             localctx.val =  this.quotedLiteral( localctx.tok ) 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.val); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimplePathContext(parser, parent, invokingState, art, category) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_simplePath;
    this.art = null
    this.category = null
    this._sync = 'nop'
    this.head = null; // IdentContext
    this.tail = null; // IdentContext
    this.art = art || null;
    this.category = category || null;
    return this;
}

SimplePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimplePathContext.prototype.constructor = SimplePathContext;

SimplePathContext.prototype.ident = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentContext);
    } else {
        return this.getTypedRuleContext(IdentContext,i);
    }
};




languageParser.SimplePathContext = SimplePathContext;

languageParser.prototype.simplePath = function(art, category) {

    var localctx = new SimplePathContext(this, this._ctx, this.state, art, category);
    this.enterRule(localctx, 262, languageParser.RULE_simplePath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3323;
        localctx.head = this.ident( localctx.category );
         if (localctx.art.path) localctx.art.path.push ( localctx.head.id ); else localctx.art.path = [ localctx.head.id ];
              if (localctx.category === 'artref') localctx.art.scope = 0;
              if (!localctx.head.id) localctx.art.path.broken = true;
            
        this.state = 3331;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===languageParser.T__17) {
            this.state = 3325;
            this.match(languageParser.T__17);
            this.state = 3326;
            localctx.tail = this.ident( localctx.category );
             localctx.art.path.push ( localctx.tail.id ); if (!localctx.tail.id) localctx.art.path.broken = true; 
            this.state = 3333;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this._ctx.stop = this._input.LT(-1);
         this.attachLocation(localctx.art); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentNoKeywordContext(parser, parent, invokingState, category) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_identNoKeyword;
    this.category = null
    this.id = null
    this.category = category || null;
    return this;
}

IdentNoKeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentNoKeywordContext.prototype.constructor = IdentNoKeywordContext;

IdentNoKeywordContext.prototype.Identifier = function() {
    return this.getToken(languageParser.Identifier, 0);
};




languageParser.IdentNoKeywordContext = IdentNoKeywordContext;

languageParser.prototype.identNoKeyword = function(category) {

    var localctx = new IdentNoKeywordContext(this, this._ctx, this.state, category);
    this.enterRule(localctx, 264, languageParser.RULE_identNoKeyword);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3334;
        this.match(languageParser.Identifier);
        this._ctx.stop = this._input.LT(-1);
         localctx.id =  this.identAst( localctx.stop, localctx.category ) 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentContext(parser, parent, invokingState, category) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = languageParser.RULE_ident;
    this.category = null
    this.id = null
    this.category = category || null;
    return this;
}

IdentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentContext.prototype.constructor = IdentContext;

IdentContext.prototype.Identifier = function() {
    return this.getToken(languageParser.Identifier, 0);
};

IdentContext.prototype.ABSTRACT = function() {
    return this.getToken(languageParser.ABSTRACT, 0);
};

IdentContext.prototype.ACTION = function() {
    return this.getToken(languageParser.ACTION, 0);
};

IdentContext.prototype.ACTIONS = function() {
    return this.getToken(languageParser.ACTIONS, 0);
};

IdentContext.prototype.AFTER = function() {
    return this.getToken(languageParser.AFTER, 0);
};

IdentContext.prototype.ALWAYS = function() {
    return this.getToken(languageParser.ALWAYS, 0);
};

IdentContext.prototype.ANALYSIS = function() {
    return this.getToken(languageParser.ANALYSIS, 0);
};

IdentContext.prototype.AND = function() {
    return this.getToken(languageParser.AND, 0);
};

IdentContext.prototype.ANNOTATE = function() {
    return this.getToken(languageParser.ANNOTATE, 0);
};

IdentContext.prototype.ANNOTATION = function() {
    return this.getToken(languageParser.ANNOTATION, 0);
};

IdentContext.prototype.ARRAY = function() {
    return this.getToken(languageParser.ARRAY, 0);
};

IdentContext.prototype.ASC = function() {
    return this.getToken(languageParser.ASC, 0);
};

IdentContext.prototype.ASPECT = function() {
    return this.getToken(languageParser.ASPECT, 0);
};

IdentContext.prototype.ASSOCIATION = function() {
    return this.getToken(languageParser.ASSOCIATION, 0);
};

IdentContext.prototype.ASYNC = function() {
    return this.getToken(languageParser.ASYNC, 0);
};

IdentContext.prototype.ASYNCHRONOUS = function() {
    return this.getToken(languageParser.ASYNCHRONOUS, 0);
};

IdentContext.prototype.AUTO = function() {
    return this.getToken(languageParser.AUTO, 0);
};

IdentContext.prototype.BETWEEN = function() {
    return this.getToken(languageParser.BETWEEN, 0);
};

IdentContext.prototype.BOTH = function() {
    return this.getToken(languageParser.BOTH, 0);
};

IdentContext.prototype.CACHE = function() {
    return this.getToken(languageParser.CACHE, 0);
};

IdentContext.prototype.COLUMN = function() {
    return this.getToken(languageParser.COLUMN, 0);
};

IdentContext.prototype.COLUMNS = function() {
    return this.getToken(languageParser.COLUMNS, 0);
};

IdentContext.prototype.COMPOSITION = function() {
    return this.getToken(languageParser.COMPOSITION, 0);
};

IdentContext.prototype.CONFIGURATION = function() {
    return this.getToken(languageParser.CONFIGURATION, 0);
};

IdentContext.prototype.CONST = function() {
    return this.getToken(languageParser.CONST, 0);
};

IdentContext.prototype.CONTEXT = function() {
    return this.getToken(languageParser.CONTEXT, 0);
};

IdentContext.prototype.CURRENT = function() {
    return this.getToken(languageParser.CURRENT, 0);
};

IdentContext.prototype.CROSS = function() {
    return this.getToken(languageParser.CROSS, 0);
};

IdentContext.prototype.CYCLE = function() {
    return this.getToken(languageParser.CYCLE, 0);
};

IdentContext.prototype.DAY = function() {
    return this.getToken(languageParser.DAY, 0);
};

IdentContext.prototype.DEFAULT = function() {
    return this.getToken(languageParser.DEFAULT, 0);
};

IdentContext.prototype.DEFINE = function() {
    return this.getToken(languageParser.DEFINE, 0);
};

IdentContext.prototype.DEPENDS = function() {
    return this.getToken(languageParser.DEPENDS, 0);
};

IdentContext.prototype.DESC = function() {
    return this.getToken(languageParser.DESC, 0);
};

IdentContext.prototype.DETECTION = function() {
    return this.getToken(languageParser.DETECTION, 0);
};

IdentContext.prototype.DISABLED = function() {
    return this.getToken(languageParser.DISABLED, 0);
};

IdentContext.prototype.DOCUMENTS = function() {
    return this.getToken(languageParser.DOCUMENTS, 0);
};

IdentContext.prototype.ELEMENT = function() {
    return this.getToken(languageParser.ELEMENT, 0);
};

IdentContext.prototype.ELSE = function() {
    return this.getToken(languageParser.ELSE, 0);
};

IdentContext.prototype.ENABLED = function() {
    return this.getToken(languageParser.ENABLED, 0);
};

IdentContext.prototype.END = function() {
    return this.getToken(languageParser.END, 0);
};

IdentContext.prototype.ENTITY = function() {
    return this.getToken(languageParser.ENTITY, 0);
};

IdentContext.prototype.ENUM = function() {
    return this.getToken(languageParser.ENUM, 0);
};

IdentContext.prototype.ESCAPE = function() {
    return this.getToken(languageParser.ESCAPE, 0);
};

IdentContext.prototype.EVENT = function() {
    return this.getToken(languageParser.EVENT, 0);
};

IdentContext.prototype.EVERY = function() {
    return this.getToken(languageParser.EVERY, 0);
};

IdentContext.prototype.EXCEPT = function() {
    return this.getToken(languageParser.EXCEPT, 0);
};

IdentContext.prototype.EXCLUDING = function() {
    return this.getToken(languageParser.EXCLUDING, 0);
};

IdentContext.prototype.EXISTING = function() {
    return this.getToken(languageParser.EXISTING, 0);
};

IdentContext.prototype.EXTEND = function() {
    return this.getToken(languageParser.EXTEND, 0);
};

IdentContext.prototype.EXTENDED = function() {
    return this.getToken(languageParser.EXTENDED, 0);
};

IdentContext.prototype.FAST = function() {
    return this.getToken(languageParser.FAST, 0);
};

IdentContext.prototype.FIRST = function() {
    return this.getToken(languageParser.FIRST, 0);
};

IdentContext.prototype.FLUSH = function() {
    return this.getToken(languageParser.FLUSH, 0);
};

IdentContext.prototype.FULL = function() {
    return this.getToken(languageParser.FULL, 0);
};

IdentContext.prototype.FULLTEXT = function() {
    return this.getToken(languageParser.FULLTEXT, 0);
};

IdentContext.prototype.FUNCTION = function() {
    return this.getToken(languageParser.FUNCTION, 0);
};

IdentContext.prototype.FUZZY = function() {
    return this.getToken(languageParser.FUZZY, 0);
};

IdentContext.prototype.GENERATED = function() {
    return this.getToken(languageParser.GENERATED, 0);
};

IdentContext.prototype.GETNUMSERVERS = function() {
    return this.getToken(languageParser.GETNUMSERVERS, 0);
};

IdentContext.prototype.GROUP = function() {
    return this.getToken(languageParser.GROUP, 0);
};

IdentContext.prototype.HANA = function() {
    return this.getToken(languageParser.HANA, 0);
};

IdentContext.prototype.HASH = function() {
    return this.getToken(languageParser.HASH, 0);
};

IdentContext.prototype.HAVING = function() {
    return this.getToken(languageParser.HAVING, 0);
};

IdentContext.prototype.HOUR = function() {
    return this.getToken(languageParser.HOUR, 0);
};

IdentContext.prototype.IDENTITY = function() {
    return this.getToken(languageParser.IDENTITY, 0);
};

IdentContext.prototype.INCREMENT = function() {
    return this.getToken(languageParser.INCREMENT, 0);
};

IdentContext.prototype.INDEX = function() {
    return this.getToken(languageParser.INDEX, 0);
};

IdentContext.prototype.INNER = function() {
    return this.getToken(languageParser.INNER, 0);
};

IdentContext.prototype.INTERSECT = function() {
    return this.getToken(languageParser.INTERSECT, 0);
};

IdentContext.prototype.INTO = function() {
    return this.getToken(languageParser.INTO, 0);
};

IdentContext.prototype.IS = function() {
    return this.getToken(languageParser.IS, 0);
};

IdentContext.prototype.JOIN = function() {
    return this.getToken(languageParser.JOIN, 0);
};

IdentContext.prototype.KEEPING = function() {
    return this.getToken(languageParser.KEEPING, 0);
};

IdentContext.prototype.LANGUAGE = function() {
    return this.getToken(languageParser.LANGUAGE, 0);
};

IdentContext.prototype.LAST = function() {
    return this.getToken(languageParser.LAST, 0);
};

IdentContext.prototype.LAYOUT = function() {
    return this.getToken(languageParser.LAYOUT, 0);
};

IdentContext.prototype.LEADING = function() {
    return this.getToken(languageParser.LEADING, 0);
};

IdentContext.prototype.LEFT = function() {
    return this.getToken(languageParser.LEFT, 0);
};

IdentContext.prototype.LIKE = function() {
    return this.getToken(languageParser.LIKE, 0);
};

IdentContext.prototype.LIMIT = function() {
    return this.getToken(languageParser.LIMIT, 0);
};

IdentContext.prototype.LOCALIZED = function() {
    return this.getToken(languageParser.LOCALIZED, 0);
};

IdentContext.prototype.MANY = function() {
    return this.getToken(languageParser.MANY, 0);
};

IdentContext.prototype.MASKED = function() {
    return this.getToken(languageParser.MASKED, 0);
};

IdentContext.prototype.MAXVALUE = function() {
    return this.getToken(languageParser.MAXVALUE, 0);
};

IdentContext.prototype.MERGE = function() {
    return this.getToken(languageParser.MERGE, 0);
};

IdentContext.prototype.MIGRATION = function() {
    return this.getToken(languageParser.MIGRATION, 0);
};

IdentContext.prototype.MINING = function() {
    return this.getToken(languageParser.MINING, 0);
};

IdentContext.prototype.MINUS = function() {
    return this.getToken(languageParser.MINUS, 0);
};

IdentContext.prototype.MINUTE = function() {
    return this.getToken(languageParser.MINUTE, 0);
};

IdentContext.prototype.MINUTES = function() {
    return this.getToken(languageParser.MINUTES, 0);
};

IdentContext.prototype.MINVALUE = function() {
    return this.getToken(languageParser.MINVALUE, 0);
};

IdentContext.prototype.MIME = function() {
    return this.getToken(languageParser.MIME, 0);
};

IdentContext.prototype.MIXIN = function() {
    return this.getToken(languageParser.MIXIN, 0);
};

IdentContext.prototype.MODE = function() {
    return this.getToken(languageParser.MODE, 0);
};

IdentContext.prototype.MONTH = function() {
    return this.getToken(languageParser.MONTH, 0);
};

IdentContext.prototype.NAME = function() {
    return this.getToken(languageParser.NAME, 0);
};

IdentContext.prototype.NAMESPACE = function() {
    return this.getToken(languageParser.NAMESPACE, 0);
};

IdentContext.prototype.NO = function() {
    return this.getToken(languageParser.NO, 0);
};

IdentContext.prototype.NULLS = function() {
    return this.getToken(languageParser.NULLS, 0);
};

IdentContext.prototype.OFF = function() {
    return this.getToken(languageParser.OFF, 0);
};

IdentContext.prototype.OFFSET = function() {
    return this.getToken(languageParser.OFFSET, 0);
};

IdentContext.prototype.ONE = function() {
    return this.getToken(languageParser.ONE, 0);
};

IdentContext.prototype.ONLY = function() {
    return this.getToken(languageParser.ONLY, 0);
};

IdentContext.prototype.OR = function() {
    return this.getToken(languageParser.OR, 0);
};

IdentContext.prototype.ORDER = function() {
    return this.getToken(languageParser.ORDER, 0);
};

IdentContext.prototype.OTHERS = function() {
    return this.getToken(languageParser.OTHERS, 0);
};

IdentContext.prototype.OUTER = function() {
    return this.getToken(languageParser.OUTER, 0);
};

IdentContext.prototype.OVERLAY = function() {
    return this.getToken(languageParser.OVERLAY, 0);
};

IdentContext.prototype.QUEUE = function() {
    return this.getToken(languageParser.QUEUE, 0);
};

IdentContext.prototype.PARAMETERS = function() {
    return this.getToken(languageParser.PARAMETERS, 0);
};

IdentContext.prototype.PARTITION = function() {
    return this.getToken(languageParser.PARTITION, 0);
};

IdentContext.prototype.PARTITIONING = function() {
    return this.getToken(languageParser.PARTITIONING, 0);
};

IdentContext.prototype.PARTITIONS = function() {
    return this.getToken(languageParser.PARTITIONS, 0);
};

IdentContext.prototype.PHRASE = function() {
    return this.getToken(languageParser.PHRASE, 0);
};

IdentContext.prototype.PREPROCESS = function() {
    return this.getToken(languageParser.PREPROCESS, 0);
};

IdentContext.prototype.PRIORITY = function() {
    return this.getToken(languageParser.PRIORITY, 0);
};

IdentContext.prototype.PROJECTION = function() {
    return this.getToken(languageParser.PROJECTION, 0);
};

IdentContext.prototype.RANGE = function() {
    return this.getToken(languageParser.RANGE, 0);
};

IdentContext.prototype.RATIO = function() {
    return this.getToken(languageParser.RATIO, 0);
};

IdentContext.prototype.REDIRECTED = function() {
    return this.getToken(languageParser.REDIRECTED, 0);
};

IdentContext.prototype.RESET = function() {
    return this.getToken(languageParser.RESET, 0);
};

IdentContext.prototype.RETURNS = function() {
    return this.getToken(languageParser.RETURNS, 0);
};

IdentContext.prototype.RIGHT = function() {
    return this.getToken(languageParser.RIGHT, 0);
};

IdentContext.prototype.ROUNDROBIN = function() {
    return this.getToken(languageParser.ROUNDROBIN, 0);
};

IdentContext.prototype.ROW = function() {
    return this.getToken(languageParser.ROW, 0);
};

IdentContext.prototype.SEARCH = function() {
    return this.getToken(languageParser.SEARCH, 0);
};

IdentContext.prototype.SECOND = function() {
    return this.getToken(languageParser.SECOND, 0);
};

IdentContext.prototype.SEPARATORS = function() {
    return this.getToken(languageParser.SEPARATORS, 0);
};

IdentContext.prototype.SERVICE = function() {
    return this.getToken(languageParser.SERVICE, 0);
};

IdentContext.prototype.START = function() {
    return this.getToken(languageParser.START, 0);
};

IdentContext.prototype.STORAGE = function() {
    return this.getToken(languageParser.STORAGE, 0);
};

IdentContext.prototype.STORE = function() {
    return this.getToken(languageParser.STORE, 0);
};

IdentContext.prototype.SUBTYPE = function() {
    return this.getToken(languageParser.SUBTYPE, 0);
};

IdentContext.prototype.SYNC = function() {
    return this.getToken(languageParser.SYNC, 0);
};

IdentContext.prototype.SYNCHRONOUS = function() {
    return this.getToken(languageParser.SYNCHRONOUS, 0);
};

IdentContext.prototype.TABLE = function() {
    return this.getToken(languageParser.TABLE, 0);
};

IdentContext.prototype.TECHNICAL = function() {
    return this.getToken(languageParser.TECHNICAL, 0);
};

IdentContext.prototype.TEMPORARY = function() {
    return this.getToken(languageParser.TEMPORARY, 0);
};

IdentContext.prototype.TEXT = function() {
    return this.getToken(languageParser.TEXT, 0);
};

IdentContext.prototype.THEN = function() {
    return this.getToken(languageParser.THEN, 0);
};

IdentContext.prototype.TOKEN = function() {
    return this.getToken(languageParser.TOKEN, 0);
};

IdentContext.prototype.TOP = function() {
    return this.getToken(languageParser.TOP, 0);
};

IdentContext.prototype.TRAILING = function() {
    return this.getToken(languageParser.TRAILING, 0);
};

IdentContext.prototype.UNION = function() {
    return this.getToken(languageParser.UNION, 0);
};

IdentContext.prototype.UNIQUE = function() {
    return this.getToken(languageParser.UNIQUE, 0);
};

IdentContext.prototype.UNLOAD = function() {
    return this.getToken(languageParser.UNLOAD, 0);
};

IdentContext.prototype.TO = function() {
    return this.getToken(languageParser.TO, 0);
};

IdentContext.prototype.TYPE = function() {
    return this.getToken(languageParser.TYPE, 0);
};

IdentContext.prototype.USING = function() {
    return this.getToken(languageParser.USING, 0);
};

IdentContext.prototype.VALUE = function() {
    return this.getToken(languageParser.VALUE, 0);
};

IdentContext.prototype.VALUES = function() {
    return this.getToken(languageParser.VALUES, 0);
};

IdentContext.prototype.VIEW = function() {
    return this.getToken(languageParser.VIEW, 0);
};

IdentContext.prototype.VIRTUAL = function() {
    return this.getToken(languageParser.VIRTUAL, 0);
};

IdentContext.prototype.YEAR = function() {
    return this.getToken(languageParser.YEAR, 0);
};




languageParser.IdentContext = IdentContext;

languageParser.prototype.ident = function(category) {

    var localctx = new IdentContext(this, this._ctx, this.state, category);
    this.enterRule(localctx, 266, languageParser.RULE_ident);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 3336;
        _la = this._input.LA(1);
        if(!(((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (languageParser.ABSTRACT - 61)) | (1 << (languageParser.ACTION - 61)) | (1 << (languageParser.ACTIONS - 61)) | (1 << (languageParser.AFTER - 61)) | (1 << (languageParser.ALWAYS - 61)) | (1 << (languageParser.ANALYSIS - 61)) | (1 << (languageParser.AND - 61)) | (1 << (languageParser.ANNOTATE - 61)) | (1 << (languageParser.ANNOTATION - 61)) | (1 << (languageParser.ARRAY - 61)) | (1 << (languageParser.ASC - 61)) | (1 << (languageParser.ASPECT - 61)) | (1 << (languageParser.ASSOCIATION - 61)) | (1 << (languageParser.ASYNC - 61)) | (1 << (languageParser.ASYNCHRONOUS - 61)) | (1 << (languageParser.AUTO - 61)) | (1 << (languageParser.BETWEEN - 61)) | (1 << (languageParser.BOTH - 61)) | (1 << (languageParser.CACHE - 61)) | (1 << (languageParser.COLUMN - 61)) | (1 << (languageParser.COLUMNS - 61)) | (1 << (languageParser.COMPOSITION - 61)) | (1 << (languageParser.CONFIGURATION - 61)) | (1 << (languageParser.CONST - 61)) | (1 << (languageParser.CONTEXT - 61)) | (1 << (languageParser.CROSS - 61)) | (1 << (languageParser.CURRENT - 61)) | (1 << (languageParser.CYCLE - 61)) | (1 << (languageParser.DAY - 61)) | (1 << (languageParser.DEFAULT - 61)) | (1 << (languageParser.DEFINE - 61)) | (1 << (languageParser.DEPENDS - 61)))) !== 0) || ((((_la - 93)) & ~0x1f) == 0 && ((1 << (_la - 93)) & ((1 << (languageParser.DESC - 93)) | (1 << (languageParser.DETECTION - 93)) | (1 << (languageParser.DISABLED - 93)) | (1 << (languageParser.DOCUMENTS - 93)) | (1 << (languageParser.ELEMENT - 93)) | (1 << (languageParser.ELSE - 93)) | (1 << (languageParser.ENABLED - 93)) | (1 << (languageParser.END - 93)) | (1 << (languageParser.ENTITY - 93)) | (1 << (languageParser.ENUM - 93)) | (1 << (languageParser.EVENT - 93)) | (1 << (languageParser.EVERY - 93)) | (1 << (languageParser.ESCAPE - 93)) | (1 << (languageParser.EXCEPT - 93)) | (1 << (languageParser.EXCLUDING - 93)) | (1 << (languageParser.EXISTING - 93)) | (1 << (languageParser.EXTEND - 93)) | (1 << (languageParser.EXTENDED - 93)) | (1 << (languageParser.FAST - 93)) | (1 << (languageParser.FIRST - 93)) | (1 << (languageParser.FLUSH - 93)) | (1 << (languageParser.FULL - 93)) | (1 << (languageParser.FULLTEXT - 93)) | (1 << (languageParser.FUNCTION - 93)) | (1 << (languageParser.FUZZY - 93)) | (1 << (languageParser.GENERATED - 93)) | (1 << (languageParser.GETNUMSERVERS - 93)) | (1 << (languageParser.GROUP - 93)) | (1 << (languageParser.HANA - 93)) | (1 << (languageParser.HASH - 93)) | (1 << (languageParser.HAVING - 93)) | (1 << (languageParser.HOUR - 93)))) !== 0) || ((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (languageParser.IDENTITY - 125)) | (1 << (languageParser.INCREMENT - 125)) | (1 << (languageParser.INDEX - 125)) | (1 << (languageParser.INNER - 125)) | (1 << (languageParser.INTERSECT - 125)) | (1 << (languageParser.INTO - 125)) | (1 << (languageParser.IS - 125)) | (1 << (languageParser.JOIN - 125)) | (1 << (languageParser.KEEPING - 125)) | (1 << (languageParser.LANGUAGE - 125)) | (1 << (languageParser.LAST - 125)) | (1 << (languageParser.LAYOUT - 125)) | (1 << (languageParser.LEADING - 125)) | (1 << (languageParser.LEFT - 125)) | (1 << (languageParser.LIKE - 125)) | (1 << (languageParser.LIMIT - 125)) | (1 << (languageParser.LOCALIZED - 125)) | (1 << (languageParser.MANY - 125)) | (1 << (languageParser.MASKED - 125)) | (1 << (languageParser.MAXVALUE - 125)) | (1 << (languageParser.MERGE - 125)) | (1 << (languageParser.MIGRATION - 125)) | (1 << (languageParser.MINING - 125)) | (1 << (languageParser.MINUS - 125)) | (1 << (languageParser.MINUTE - 125)) | (1 << (languageParser.MINUTES - 125)) | (1 << (languageParser.MINVALUE - 125)) | (1 << (languageParser.MIME - 125)) | (1 << (languageParser.MIXIN - 125)) | (1 << (languageParser.MODE - 125)) | (1 << (languageParser.MONTH - 125)) | (1 << (languageParser.NAME - 125)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (languageParser.NAMESPACE - 157)) | (1 << (languageParser.NO - 157)) | (1 << (languageParser.NULLS - 157)) | (1 << (languageParser.OFF - 157)) | (1 << (languageParser.OFFSET - 157)) | (1 << (languageParser.ONE - 157)) | (1 << (languageParser.ONLY - 157)) | (1 << (languageParser.OR - 157)) | (1 << (languageParser.ORDER - 157)) | (1 << (languageParser.OTHERS - 157)) | (1 << (languageParser.OUTER - 157)) | (1 << (languageParser.OVERLAY - 157)) | (1 << (languageParser.QUEUE - 157)) | (1 << (languageParser.PARAMETERS - 157)) | (1 << (languageParser.PARTITION - 157)) | (1 << (languageParser.PARTITIONING - 157)) | (1 << (languageParser.PARTITIONS - 157)) | (1 << (languageParser.PHRASE - 157)) | (1 << (languageParser.PREPROCESS - 157)) | (1 << (languageParser.PRIORITY - 157)) | (1 << (languageParser.PROJECTION - 157)) | (1 << (languageParser.RANGE - 157)) | (1 << (languageParser.RATIO - 157)) | (1 << (languageParser.REDIRECTED - 157)) | (1 << (languageParser.RESET - 157)) | (1 << (languageParser.RETURNS - 157)) | (1 << (languageParser.RIGHT - 157)) | (1 << (languageParser.ROUNDROBIN - 157)) | (1 << (languageParser.ROW - 157)) | (1 << (languageParser.SEARCH - 157)) | (1 << (languageParser.SECOND - 157)) | (1 << (languageParser.SEPARATORS - 157)))) !== 0) || ((((_la - 189)) & ~0x1f) == 0 && ((1 << (_la - 189)) & ((1 << (languageParser.SERVICE - 189)) | (1 << (languageParser.START - 189)) | (1 << (languageParser.STORAGE - 189)) | (1 << (languageParser.STORE - 189)) | (1 << (languageParser.SUBTYPE - 189)) | (1 << (languageParser.SYNC - 189)) | (1 << (languageParser.SYNCHRONOUS - 189)) | (1 << (languageParser.TABLE - 189)) | (1 << (languageParser.TECHNICAL - 189)) | (1 << (languageParser.TEMPORARY - 189)) | (1 << (languageParser.TEXT - 189)) | (1 << (languageParser.THEN - 189)) | (1 << (languageParser.TOKEN - 189)) | (1 << (languageParser.TOP - 189)) | (1 << (languageParser.TRAILING - 189)) | (1 << (languageParser.TO - 189)) | (1 << (languageParser.TYPE - 189)) | (1 << (languageParser.UNION - 189)) | (1 << (languageParser.UNIQUE - 189)) | (1 << (languageParser.UNLOAD - 189)) | (1 << (languageParser.USING - 189)) | (1 << (languageParser.VALUE - 189)) | (1 << (languageParser.VALUES - 189)) | (1 << (languageParser.VIEW - 189)) | (1 << (languageParser.VIRTUAL - 189)) | (1 << (languageParser.YEAR - 189)) | (1 << (languageParser.Identifier - 189)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this._ctx.stop = this._input.LT(-1);
         localctx.id =  this.identAst( localctx.stop, localctx.category ) 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.languageParser = languageParser;
