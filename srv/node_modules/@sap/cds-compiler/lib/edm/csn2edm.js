'use strict';

/* eslint max-lines:off */
/* eslint max-statements-per-line:off */

let NAVPROP_TRENNER = '_';
let VALUELIST_NAVPROP_PREFIX = '';

const edmUtils = require('./edmUtils.js')
const { initializeModel } = require('./edmPreprocessor.js');
const translate = require('./annotations/genericTranslation.js');
const alerts = require('../base/alerts');
const { setProp } = require('../base/model');
const { getUtils, cloneCsn } = require('../model/csnUtils');
const { isNewCSN } = require('../json/csnVersion');
const { CompilationError } = require('../base/messages');

/*
OData V2 spec 06/01/2017 PDF version is available from here:
https://msdn.microsoft.com/en-us/library/dd541474.aspx
*/

/* invocation:
  metadata: csn2edm(forOdata, { version:'v2' })
*/

function csn2edm(_csn, serviceName, _options) {
  return csn2edmAll(_csn, _options, serviceName)[serviceName];
}

function csn2edmAll(_csn, _options, serviceName=undefined) {
  // get us a fresh model copy that we can work with
  let csn = cloneCsn(_csn);

  const { error, warning, info, signal } = alerts(csn);
  if (!isNewCSN(csn, _options)) {
    let version = csn.version ? csn.version.csn : csn.$version ? csn.$version : 'not available';
    signal(error`CSN Version not supported, version tag: "${version}", options.newCsn: ${_options.newCsn}`);
    throw new CompilationError(csn.messages, csn);
  }

  let rc = Object.create(null);
  const { isBuiltinType, hasBoolAnnotation } = getUtils(csn);

  let [services, options] = initializeModel(csn, _options, signal, error, warning, info);
  const Edm = require('./edm.js')(csn, options);


  let v = options.v;
  if(services.length == 0)
    signal(error`No Services found in model`);

  if(serviceName) {
    let serviceCsn = services.filter(s => s.name == serviceName)[0];
    if(serviceCsn == undefined) {
      signal(warning`No service definition with name "${serviceName}" found in the model`);
    }
    else {
      rc[serviceName] = createEdm(serviceCsn);
    }
    return rc;
  }
  else {
    return services.reduce((services, serviceCsn) => {
      services[serviceCsn.name] = createEdm(serviceCsn);
      return services; }, rc);
  }

  //--------------------------------------------------------------------------------
  // embedded functions
  //--------------------------------------------------------------------------------
  function createEdm(serviceCsn) {
    let navigationProperties = [];

    function baseName(str, del) { let l = str.lastIndexOf(del);   // eslint-disable-line no-unused-vars
      return (l >= 0) ? str.slice(l+del.length, str.length) : str; }

    // if we have a real alias take it, otherwise use basename of service
    // let alias = serviceCsn.alias || baseName(baseName(serviceCsn.name, '::'), '.');

    // FIXME: UI5 cannot deal with spec conforming simpleid alias names
    let serviceName = serviceCsn.name;
    let alias = serviceName;

    let Schema = new Edm.Schema(v, serviceName, undefined /* unset alias */);

    // now namespace and alias are used to create the fullQualified(name)
    const namespace = serviceName + '.'
    alias += '.'

    let service = new Edm.DataServices(v, Schema);
    let edm = new Edm.Edm(v, service);

    /* create the entitytypes and sets
      Do not create an entity set if:
          V4 containment: _containerEntity is set and not equal with the artifact name
          Entity starts with 'localserviceNameized.' or ends with '_localized'
    */
    edmUtils.foreach(csn.definitions,
      a => edmUtils.isEntityOrView(a) && !a.abstract && a.name.startsWith(serviceName + '.'),
      createEntityTypeAndSet
    );
    // create unbound actions/functions
    edmUtils.foreach(csn.definitions, a => edmUtils.isActionOrFunction(a) && a.name.startsWith(serviceName + '.'),
                (options.isV4()) ? createActionV4 : createActionV2);

    // create the complex types
    edmUtils.foreach(csn.definitions, a => edmUtils.isStructuredType(a) && a.name.startsWith(serviceName + '.'), createComplexType);

    if(options.isV4())
    {
      edmUtils.foreach(csn.definitions,
        artifact => edmUtils.isDerivedType(artifact) &&
        !edmUtils.isAssociationOrComposition(artifact) &&
        artifact.name.startsWith(serviceName + '.'),
          createTypeDefinition);
    }

    // fetch all exising children names in a map
    let NamesInSchemaXRef = Schema._children.reduce((acc, cur) => {
      if(acc[cur.Name] === undefined) {
        acc[cur.Name] = [ cur ]; 
      } else {
        acc[cur.Name].push(cur);
      }
      return acc;
    }, Object.create(null) );

    navigationProperties.forEach(np => {
      if(options.isV4()) {
        // V4: No referential constraints for Containment Relationships
        if(!np.isContainment() && !np.isToMany())
          np.addReferentialConstraintNodes();
      }
      else
        addAssociation(np);
    });

    createAnnotations(edm);

    for(let name in NamesInSchemaXRef) {
      if(NamesInSchemaXRef[name].length > 1) {
        let artifactName = `${Schema.Namespace}.${name}`;
        signal(error`Duplicate name "${name}" in Namespace "${Schema.Namespace}"`, ['definitions',artifactName]);
      }
    }
    if(Schema._ec._children.length == 0)
      signal(error`EntityContainer must contain at least one EntitySet`, ['definitions',Schema.Namespace]);

    return edm

    function createEntityTypeAndSet(entityCsn)
    {
    // EntityType attributes are: Name, BaseType, Abstract, OpenType, HasStream
      // Sub Elements are: Key, Property, NavigationProperty

      let EntityTypeName = entityCsn.name.replace(namespace, '');
      let EntitySetName = (entityCsn.entitySetName || entityCsn.name).replace(namespace, '');

      let [ properties, hasStream ] = createProperties(entityCsn);

      if(properties.length === 0) {
        signal(error`EntityType "${serviceName}/${EntityTypeName}" has no properties`, ['definitions',entityCsn.name]);
      }
      if(properties.filter(p => p.isKey).length === 0) {
        signal(error`EntityType "${serviceName}/${EntityTypeName}" has no primary key`, ['definitions',entityCsn.name]);
      }

      // construct EntityType attributes
      let attributes = { Name : EntityTypeName };

      // CDXCORE-CDXCORE-173
      if(options.isV2() && hasStream)
        attributes['m:HasStream'] = hasStream;

      Schema.append(new Edm.EntityType(v, attributes, properties, entityCsn));

      if (entityCsn.hasEntitySet)
      {
        let entitySet = new Edm.EntitySet(v, { Name: EntitySetName, EntityType: fullQualified(EntityTypeName) }, entityCsn);

        // V4: Create NavigationPropertyBinding in EntitySet
        // if NavigationProperty is not a Containment and if the target is not a containee
        if(options.isV4())
          properties.filter(np =>
          np instanceof Edm.NavigationProperty &&
          !np.isContainment() && !edmUtils.isContainee(np._targetCsn) && !np._targetCsn.$proxy
          ). forEach(np =>
              entitySet.append(np.createNavigationPropertyBinding(namespace)));

        Schema._ec.append(entitySet);
      }

      // put actions behind entity types in Schema/EntityContainer
      edmUtils.forAll(entityCsn.actions, (a, n) => {
        (options.isV4()) ? createActionV4(a, n, entityCsn)
                        : createActionV2(a, n, entityCsn)
      });
    }

    // add bound/unbound actions/functions for V4
    function createActionV4(actionCsn, name, entityCsn=undefined)
    {
      let iAmAnAction = actionCsn.kind == "action";

      let actionName = actionCsn.name.replace(namespace, '');

      let attributes = { Name: actionName, IsBound : false };

      if(!iAmAnAction)
        attributes.IsComposable = false;

      let actionNode = (iAmAnAction) ? new Edm.Action(v, attributes)
                                    : new Edm.FunctionDefinition(v, attributes);

      // bpName is eventually used later for EntitySetPath
      let bpNameAnno = actionCsn['@cds.odata.bindingparameter.name'];
      let bpName = bpNameAnno !== undefined ? (bpNameAnno['='] || bpNameAnno) : 'in';

      if(entityCsn != undefined)
      {
        actionNode.IsBound = true;
        let bpType = actionCsn['@cds.odata.bindingparameter.collection'] ? 
          'Collection('+fullQualified(entityCsn.name)+')' : fullQualified(entityCsn.name);
        // Binding Parameter: 'in' at first position in sequence, this is decisive!
        actionNode.append(new Edm.Parameter(v, { Name: bpName, Type: bpType }, {} ));
      }
      else // unbound => produce Action/FunctionImport
      {
        let actionImport = iAmAnAction
          ? new Edm.ActionImport(v, { Name: actionName, Action : fullQualified(actionName) })
          : new Edm.FunctionImport(v, { Name: actionName, Function : fullQualified(actionName) });

        let rt = actionCsn.returns && ((actionCsn.returns.items && actionCsn.returns.items.type) || actionCsn.returns.type);
        if(rt) // add EntitySet attribute only if return type is a non abstract entity
        {
          let definition = csn.definitions[rt];
          if(definition && definition.kind == 'entity' && !definition.abstract)
          {
            actionImport.EntitySet = rt.replace(namespace, '');
          }
        }
        Schema._ec.append(actionImport);
      }

      // Parameter Nodes
      edmUtils.forAll(actionCsn.params, (parameterCsn, parameterName) => {
        actionNode.append(new Edm.Parameter(v, { Name: parameterName }, parameterCsn ));
      });

      // return type if any
      if(actionCsn.returns) {
        actionNode._returnType = new Edm.ReturnType(v, actionCsn.returns, fullQualified);
        // if binding type matches return type add attribute EntitySetPath
        if(entityCsn != undefined && fullQualified(entityCsn.name) === actionNode._returnType._type) {
          actionNode.EntitySetPath = bpName;
        }
      }
      Schema.addAction(actionNode);
    }

    // add bound/unbound actions/functions for V2
    function createActionV2(actionCsn, name, entityCsn=undefined)
    {
      let functionImport = new Edm.FunctionImport(v, { Name: name.replace(namespace, '') } );

      // inserted now to maintain attribute order with old odata generator...
      /*
        V2 says (p33):
        * If the return type of FunctionImport is a collection of entities, the EntitySet
          attribute is defined.
        * If the return type of FunctionImport is of ComplexType or scalar type,
          the EntitySet attribute cannot be defined.
        The spec doesn't mention single ET: Ralf Handls confirmed that there is a gap
        in the spec and advised mention it as in V4
      */

      let rt = actionCsn.returns && ((actionCsn.returns.items && actionCsn.returns.items.type) || actionCsn.returns.type);
      if(rt) // add EntitySet attribute only if return type is an entity
      {
        let defintion = csn.definitions[rt];
        if(defintion && edmUtils.isEntityOrView(defintion))
        {
          functionImport.EntitySet = rt.replace(namespace, '');
        }
      }

      if(actionCsn.returns)
        functionImport.ReturnType = getReturnType(actionCsn);

      if(actionCsn.kind == 'function')
        functionImport.setXml( {'m:HttpMethod': 'GET' });
      else if(actionCsn.kind == 'action')
        functionImport.setXml( {'m:HttpMethod': 'POST'});
      else
        throw Error('Please debug me: Neither function nor action');

      if(entityCsn != undefined)
      {
        // Make bound function names always unique as per Ralf's recommendation
        functionImport.setXml( {'sap:action-for':  fullQualified(entityCsn.name) } );
        functionImport.Name = entityCsn.name.replace(namespace, '') + '_' + functionImport.Name;

        // Binding Parameter: Primary Keys at first position in sequence, this is decisive!
        // V2 XML: Nullable=false is set because we reuse the primary key property for the parameter
        edmUtils.foreach(entityCsn.elements,
          elementCsn => elementCsn.key && !edmUtils.isAssociationOrComposition(elementCsn),
          (elementCsn, elementName) => {
            functionImport.append(new Edm.Parameter(v, { Name: elementName }, elementCsn, 'In' ));
          }
        );
      }

      // is this still required?
      for (let p in actionCsn)
        if (p.match(/^@sap./)) 
          functionImport.setXml( { ['sap:' + p.slice(5).replace(/\./g, '-')] : actionCsn[p] });

      // then append all other parameters
      // V2 XML: Parameters that are not explicitly marked as Nullable or NotNullable in the CSN must become Nullable=true
      // V2 XML spec does only mention default Nullable=true for Properties not for Parameters so omitting Nullable=true let
      // the client assume that Nullable is false.... Correct Nullable Handling is done inside Parameter constructor
      edmUtils.forAll(actionCsn.params, (parameterCsn, parameterName) => {
        functionImport.append(new Edm.Parameter(v, { Name: parameterName }, parameterCsn, 'In' ));
      });

      Schema._ec.append(functionImport);
    }

    function getReturnType(action)
    {
      // it is safe to assume that either type or items.type are set
      let returns = action.returns.items || action.returns;
      let type = returns.type;
      if(type && isBuiltinType(type))
        type = edmUtils.mapCdsToEdmType(returns, signal, error, options.isV2());

      if(type && action.returns.items)
        type = `Collection(${type})`

      return type;
    }

    // returns a [ [ Edm Properties ], boolean hasStream ]
    // array of Edm Properties
    // boolean hasSstream : true if at least one element has @Core.MediaType assignment
    function createProperties(parentCsn)
    {
      let props = [];
      let hasStream = false;
      edmUtils.forAll(parentCsn.elements, (elementCsn, elementName) =>
      {
        if(elementCsn._parent == undefined)
          setProp(elementCsn, '_parent', parentCsn);

        if(!elementCsn._ignore) {
          if(edmUtils.isAssociationOrComposition(elementCsn))
          {
            // Foreign keys are part of the generic elementCsn.elements property creation

            // This is the V4 edmx:NavigationProperty
            // gets rewritten for V2 in addAssocations()

            // suppress navprop creation only if @odata.navigable:false is not annotated.
            // (undefined !== false) still evaluates to true
            if (!elementCsn._target.abstract && elementCsn['@odata.navigable'] !== false)
            {
              let navProp = new Edm.NavigationProperty(v, {
                Name: elementName,
                Type: fullQualified(elementCsn._target.name)
              }, elementCsn);

              props.push(navProp);
              // save the navProp in the global array for late constraint building
              navigationProperties.push(navProp);
            }
          }
          else if(!hasBoolAnnotation(elementCsn, '@cds.api.ignore', true) &&
                  !(hasBoolAnnotation(elementCsn, '@cds.odata.'+options.version+'.ignore', true) && options.betaMode))
          {
            // CDXCORE-CDXCORE-173
            // V2: filter  @Core.MediaType
            // V4: filter foreignKey elements of Container associations
            let isContainerAssoc = false;
            if(elementCsn['@odata.foreignKey4']) {

              let elements = parentCsn.elements;
              let assoc = undefined;
              let paths = elementCsn['@odata.foreignKey4'].split('.')
              for(let p of paths) {
                assoc = elements[p];
                if(assoc) // could be that the @odata.foreignKey4 was propagated...
                  elements = assoc.elements;
              }

              if(assoc)
                //let assoc = parentCsn.elements[elementCsn['@odata.foreignKey4']];
                isContainerAssoc = assoc._isToContainer || assoc['@odata.contained'];
            }
            if ( options.isV2() && elementCsn['@Core.MediaType']
              || options.isV4() && isContainerAssoc /*&& !elementCsn.key*/ ) {
              hasStream = true;
              // CDXCORE-CDXCORE-177: remove elementCsn from elements dictionary
              delete parentCsn.elements[elementName];
            } else
              props.push(new Edm.Property(v, { Name: elementName }, elementCsn));
          }
        }

      });
      return [ props, hasStream ];
    }

    function createComplexType(structuredTypeCsn) 
    {
      // V4 attributes: Name, BaseType, Abstract, OpenType
      let attributes = { Name: structuredTypeCsn.name.replace(namespace, '') };

      let complexType = new Edm.ComplexType(v, attributes, structuredTypeCsn);
      let elementsCsn = structuredTypeCsn.items || structuredTypeCsn;
      complexType.append(...(createProperties(elementsCsn)[0]));
      Schema.append(complexType);
    }

    // V4 <TypeDefintion>
    function createTypeDefinition(typeCsn)
    {
      // derived types are already resolved to base types
      let typeDef;
      let props = { Name: typeCsn.name.replace(namespace, '') };
      if((typeCsn.items && typeCsn.items.enum) || typeCsn.enum)
        typeDef = new Edm.EnumType(v, props, typeCsn);
      else
        typeDef = new Edm.TypeDefinition(v, props, typeCsn );
      Schema.append(typeDef);
    }

    /*
    * addAssociation() constructs a V2 association.
    * In V4 all this has been simplified very much, the only thing actually left over is
    * <ReferentialConstriant> that is then a sub element to <NavigationProperty>.
    * However, referential constraints are substantially different to its V2 counterpart,
    * so it is better to reimplement proper V4 construction of<NavigationProperty> in a separate
    * function.
    *
    * This method does:
    * rewrite <NavigationProperty> attributes to be V2 compliant
    * add <Association> elements to the schema
    * add <End>, <ReferentialConstraint>, <Dependent> and <Principal> sub elements to <Association>
    * add <AssociationSet> to the EntityContainer for each <Association>
    */
    function addAssociation(navigationProperty)
    {
      let constraints = navigationProperty._csn._constraints;
      let parentName = navigationProperty._csn._parent.name.replace(namespace, '');
      let plainAssocName = parentName + NAVPROP_TRENNER + navigationProperty.Name.replace(VALUELIST_NAVPROP_PREFIX, '');
      let assocName = plainAssocName;
      let i = 1;
      while(NamesInSchemaXRef[assocName] !== undefined) {
        assocName = plainAssocName + '_' + i++;
      }

      let fromRole = parentName;
      let toRole = navigationProperty.Type.replace(alias, ''); // <= navprops type should be prefixed with alias
    
      let fromEntityType = fromRole;
      let toEntityType = toRole;

      // The entity set name may not be the same as the type name (parameterized entities have 
      // differing set names (<T>Parameters => <T>, <T>Type => <T>Set)
      let fromEntitySet = ( navigationProperty._csn._parent.entitySetName || fromEntityType).replace(namespace, '');
      let toEntitySet = (navigationProperty._targetCsn.entitySetName || toEntityType).replace(namespace, '');

      // from and to roles must be distinguishable (in case of self association entity E { toE: association to E; ... })

      if(fromRole === toRole) {
        if(constraints._originAssocCsn)
          fromRole += '1';
        else
          toRole += '1';
      }

      // add V2 attributes to navigationProperty
      navigationProperty.Relationship = fullQualified(assocName);
      navigationProperty.FromRole = fromRole;
      navigationProperty.ToRole = toRole;

      // remove V4 attributes
      if(navigationProperty.Type != undefined)
        delete navigationProperty.Type;
      if(navigationProperty.Partner != undefined)
        delete navigationProperty.Partner;
      if(navigationProperty.ContainsTarget != undefined)
        delete navigationProperty.ContainsTarget;

      /*
        If NavigationProperty is a backlink association (constraints._originAssocCsn is set), then there are two options:
        1) Counterpart NavigationProperty exists and is responsible to create the edm:Association element which needs to
          be reused by this backlink association. This is save because at this point of the processing all NavProps are created.
        2) Counterpart NavigationProperty does not exist (@odata.navigable:false), then the missing edm:Association element
          of the origin association needs to be created as if it would have been already available in case (1).
      */

      let reuseAssoc = false;
      let forwardAssocCsn = constraints._originAssocCsn;
      if(forwardAssocCsn)
      {
        // This is a backlink, swap the roles and types, rewrite assocName
        [ fromRole, toRole ] = [ toRole, fromRole ];
        [ fromEntityType, toEntityType ] = [ toEntityType, fromEntityType ];
        [ fromEntitySet, toEntitySet ] = [ toEntitySet, fromEntitySet ];

        parentName = forwardAssocCsn._parent.name.replace(namespace, '');
        assocName = plainAssocName = parentName + NAVPROP_TRENNER + forwardAssocCsn.name.replace(VALUELIST_NAVPROP_PREFIX, '');
        i = 1;
        while(NamesInSchemaXRef[assocName] !== undefined && !(NamesInSchemaXRef[assocName][0] instanceof Edm.Association)) {
          assocName = plainAssocName + '_' + i++;
        }

        navigationProperty.Relationship = fullQualified(assocName)

        reuseAssoc = !!forwardAssocCsn._NavigationProperty;
        constraints = edmUtils.getReferentialConstraints(forwardAssocCsn, signal, warning);
        constraints._multiplicity = edmUtils.determineMultiplicity(forwardAssocCsn);
      }

      if(reuseAssoc)
      {
        // Example:
        // entity E { key id: Integer; toF: association to F; };
        // entity F { key id: Integer; toE: composition of E on toE.toF = $self; };
        //
        // Consider we're in NavigationProperty 'toE' which is the backlink to F.
        // Then forwardAssocCsn is 'E_toF' with two Ends: E, F.
        // Backlink F.toE is a composition, making E existentially dependant on F.
        // So End E of Association E_toF (which is End[0]) receives Edm.OnDelete.
        // Depending on the order of the navigation properties it might be that the
        // forward Edm.Association has not yet been produced. In this case Edm.OnDelete
        // is parked at the forward NavigationProperty.

        if(!forwardAssocCsn._NavigationProperty._edmAssociation && navigationProperty._csn.type == 'cds.Composition')
        {
          // TODO: to be specified via @sap.on.delete
          forwardAssocCsn._NavigationProperty.set( { _OnDeleteSrcEnd: new Edm.OnDelete(v, { Action: 'Cascade' }) } );
        }
        return;
      }

      // Create Association and AssociationSet if this is not a backlink association.
      // Store association at navigation property because in case the Ends must be modified
      // later by the partner (backlink) association
      navigationProperty._edmAssociation = new Edm.Association(v, { Name: assocName }, navigationProperty,
                                      [ fromRole, fullQualified(fromEntityType) ],
                                      [ toRole, fullQualified(toEntityType) ],
                                      constraints._multiplicity );
      if(NamesInSchemaXRef[assocName] === undefined) {
        NamesInSchemaXRef[assocName] = [ navigationProperty._edmAssociation ];
      }
      else {
        navigationProperty._edmAssociation.push(navigationProperty._edmAssociation);
      }
      // Add ReferentialConstraints if any
      if(!navigationProperty._isCollection && Object.keys(constraints.constraints).length > 0) {
        // A managed composition is treated as association
        if(navigationProperty._csn.type == 'cds.Composition' && (navigationProperty._csn.on || navigationProperty._csn.onCond)) {
          navigationProperty._edmAssociation.append(Edm.ReferentialConstraint.createV2(v,
            toRole, fromRole, constraints.constraints));
        }
        else {
          navigationProperty._edmAssociation.append(Edm.ReferentialConstraint.createV2(v,
            fromRole, toRole, constraints.constraints));
        }
      }

      Schema.append(navigationProperty._edmAssociation);
      if(!navigationProperty._targetCsn.$proxy) {
        let assocSet =  new Edm.AssociationSet(v, { Name: assocName, Association: fullQualified(assocName) },
          fromRole, toRole, fromEntitySet, toEntitySet);
        Schema._ec.append(assocSet);
      }
    }

    // produce a full qualified name replacing the namespace with the alias (if provided)
    function fullQualified(name) 
    {
      if (name == serviceCsn.name)
        return Schema.Alias
      else
        return alias + name.replace(namespace, '')
    }

    function createAnnotations(edm)
    {
      let annoEdm = translate.csn2annotationEdm(csn, serviceName, options);
      for(let i = 0; i < annoEdm.getSchemaCount(); i++)
      {
        edm.setAnnotations(annoEdm.getAnnotations(i), i);
      }
      edm._defaultRefs = annoEdm._defaultRefs;
    }
  }
}
module.exports = { csn2edm, csn2edmAll };