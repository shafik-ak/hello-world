let W = require("./walker");

/**
 * Sets the prototype of all dictionary-object to null
 * @param model CSN to process
 * @param options processing configuration:
 *  setAllMissingProtos - prepare the input for processing when setting all null-protos to Object.prototype
 * @returns the modified CSN model
 */
function nullProtos(model, options={}) {

  function nullProto(O, callback) {
    if(O !== undefined && O !== null) {
      Object.setPrototypeOf(O, null);
      if(callback)
        return [O, callback];
    }
    return undefined;
  }

  function cbEnum(/*O*/) {
    return [
    ]
  }

  function cbElement(O) {
    return [
      nullProto(O.elements, cbElement),
      nullProto(O.enum, cbEnum)
    ].concat(directItems(O.items))
  }

  function cbPayload(O) {
    return [
      nullProto(O.elements, cbPayload),
      nullProto(O.enum, cbEnum)
    ].concat(directItems(O.items))
  }

  function directItems(items) {
    if(items!==undefined) {
      return [
        nullProto(items.elements, cbElement),
        nullProto(items.enum, cbEnum)
      ]
    }
    return undefined;
  }

  function cbParam(O) {
    return [
      nullProto(O.elements, cbElement),
    ].concat(directItems(O.items))
  }

  function cbAction(O) {
    return [
      nullProto(O.params, cbParam),
      nullProto(O.returns && O.returns.elements, cbElement),
      nullProto(O.returns && O.returns.enum, cbEnum)
    ].concat(directItems(O.returns && O.returns.items))
  }

  function cbDefinition(O) {
    return [
      nullProto(O.elements, cbElement),
      nullProto(O.payload, cbPayload),
      nullProto(O.enum, cbEnum),
      nullProto(O.actions, cbAction),
      nullProto(O.params, cbParam),
      nullProto(O.returns && O.returns.elements, cbElement),
      nullProto(O.returns && O.returns.enum, cbEnum)
    ].concat(directItems(O.items))
     .concat(directItems(O.returns && O.returns.items))
  }

  function cbExtension(O) {
    return [
      nullProto(O.elements, cbElement),
      nullProto(O.enum, cbEnum),
      nullProto(O.actions, cbAction),
      nullProto(O.params, cbParam),
      nullProto(O.returns && O.returns.elements, cbElement),
      nullProto(O.returns && O.returns.enum, cbEnum)
    ].concat(directItems(O.items))
  }

  function doSetAllMissingProtos(o) {
    W.walk(o, (isNode, N) => {
      if(isNode && Object.getPrototypeOf(N)===null && !Array.isArray(N))
        Object.setPrototypeOf(N,Object.prototype)
    })
  }

  if(options.setAllMissingProtos)
    doSetAllMissingProtos(model);

  nullProto(model.definitions);
  W.walkNodesExFn(model.definitions, cbDefinition);
  W.walkNodesExFn(model.extensions, cbExtension);
  return model;
}

module.exports = nullProtos;
