'use strict';

const alerts = require('../base/alerts');

function getFunctionAndActionChecks(model) {
  const { warning, signal } = alerts(model);
  let options = model.options;

  return {
    checkActionOrFunction,
    checkActionOrFunctionParameter
  }

  function checkActionOrFunction(act, serviceName) {
    if (Array.isArray(act)) // duplicated declaration -> will be handle in some of the other steps of the compiler
      return;

    let location = act.location;

    if (!act.name.action) { // unbound action or function
      let actServiceName = getAbsNameWithoutId(act.name.absolute);
      if (actServiceName !== serviceName)
        signal(warning`Functions and actions must be declared in a service or bound to an entity`, location);
    }

    if (act.origin) {
      act = act.origin._artifact || /* old csn does not have the _artifact */ act;
      if (act.params) // params are still not propagated at this point, so have to be checked separately
        Object.keys(act.params).forEach(p => checkActionOrFunctionParameter(act.params[p], serviceName, location));
    }

    // check all the cases of the return statement
    if (act.returns) {
      if (act.returns._finalType.builtin) {
        // in ODATA v2 scalar types cannot be returned
        if (options.toOdata && options.toOdata.version === 'v2')
          signal(warning`Scalar return types are not allowed in OData V2`, location);
        return;
      }
      // check array return type
      if (act.returns.items)
        checkReturnTypeArray(act);
      // check if return type is entity from the current service
      else if (act.returns._finalType.kind === 'entity')
        checkReturnEntity(act);
      else if (act.returns._finalType.kind === 'type')
        checkReturnUserDefinedType(act);
    }

    function checkReturnTypeArray(act) {
      if (!act.returns.items)
        return;
      // array of array is not allowed
      if (act.returns._finalType.items._finalType.items)
        signal(warning`Array element cannot be an array`, location);

      // array of builtin not allowed in OData V2
      if (act.returns.items._finalType.builtin && options.toOdata && options.toOdata.version === 'v2')
        signal(warning`Scalar return types are not allowed in OData V2`, location);

      // array of <entity> - check if entity is from the current service
      if (act.returns.items._finalType.kind === 'entity')
        checkReturnEntity(act);
    }

    function checkReturnEntity(act) {
      // take the full name with the entity name
      let returnServiceName = act.returns.items
        ? act.returns.items._finalType.name.absolute
        : act.returns._finalType.name.absolute;
      // remove the entity name
      returnServiceName = getAbsNameWithoutId(returnServiceName);
      if (serviceName && returnServiceName !== serviceName)
        signal(warning`Entity type must be from the current service '${serviceName}'`, location);
    }

    function checkReturnUserDefinedType(act) {
      if (act.returns._finalType.builtin && options.toOdata && options.toOdata.version === 'v2') {
        signal(warning`Scalar return types are not allowed in OData V2`, location);
        return;
      }

      // the case when user defined is resolved to builtin
      if (act.returns._finalType.type && act.returns._finalType.type._artifact.builtin) {
        if (options.toOdata && options.toOdata.version == 'v2')
          signal(warning`Scalar return types are not allowed in OData V2`, location);
        return;
      }
    }
  }

  function checkActionOrFunctionParameter(param, serviceName, location) {
    location = location || param.location;

    let paramTypeArtifact = param.type && param.type._artifact || {};
    // check if the entity type is from the current service
    if (paramTypeArtifact.kind === 'entity')
      checkEntityParam(paramTypeArtifact);

    function checkEntityParam(paramTypeArtifact) {
      if (serviceName && getAbsNameWithoutId(paramTypeArtifact.name.absolute) !== serviceName)
        signal(warning`The parameter entity type must be from the current service '${serviceName}'`, location);
    }
  }
}

function getAbsNameWithoutId(name) {
  return name.split('.').slice(0, -1).join('.');
}

module.exports = getFunctionAndActionChecks;
