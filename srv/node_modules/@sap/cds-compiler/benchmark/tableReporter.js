'use strict';

/* eslint no-console:off */


/**
 * Converts a process.hrtime value to a string in milliseconds (with postfix)
 * @returns Milliseconds as a string with two decimal places and postfix 'ms'.
 */
function prettyTimeMilliSeconds(hrtime) {
  const [s, ns] = hrtime;
  const ms = (s * 1000 + ns / 1000 / 1000);
  return (Number.isNaN(ms) ? '<NaN>' : ms.toFixed(2) + 'ms');
}

/**
 * Benchmark reporter for human-readable tables.
 * @class
 *
 * @example
 *   bench.print(TableReporter);
 *   // Example output:
 *   // +-----------------+------------+-----------------+-----------------+
 *   // | Benchmark       | Executions |         Runtime |    Avg. Runtime |
 *   // |-----------------|------------|-----------------|-----------------|
 *   // | compiler: toSql |    2000000 |         5.858ms |         0.000ms |
 *   // | compiler: toCsn |    2000000 |        12.742ms |         0.000ms |
 *   // +-----------------+------------+-----------------+-----------------+
 */
function TableReporter(benchmarkSuite) {

  const columns = [
    { name: "Benchmark",    width: 10, align: 'left'  },
    { name: "WarmUp",       width: 10, align: 'right' },
    { name: "Executions",   width: 10, align: 'right' },
    { name: "Runtime",      width: 15, align: 'right' },
    { name: "Avg. Runtime", width: 15, align: 'right' },
  ];

  /** @param {...string} cells */
  const printRow = (...cells) => {
    let row = '| ';
    if (cells.length != columns.length) {
      throw new Error('Column count mismatch: Expected ' + columns.length + ', got ' + cells.length);
    }

    for (let i = 0; i < columns.length; i++) {
      const w = columns[i].width;
      cells[i] = String(cells[i]);
      row += (columns[i].align === 'right') ? cells[i].padStart(w, ' ') : cells[i].padEnd(w, ' ');
      row += ' | ';
    }
    console.log(row);
  };

  const printLineSep = (separator = '|') => {
    let row = separator;
    for (const column of columns) {
      row += '-'.repeat(column.width + 2) + separator;
    }
    console.log(row);
  };

  const printHeader = () => {
    printLineSep('+');
    printRow(...columns.map((column) => column.name));
    printLineSep();
  };

  const printBenchmarks = () => {
    // Dynamic width based on the benchmark identifier
    for (const benchmark of benchmarkSuite.benchmarks) {
      columns[0].width = columns[0].width < benchmark.identifier.length ? benchmark.identifier.length : columns[0].width;
    }

    printHeader();

    for (const benchmark of benchmarkSuite.benchmarks) {
      const runtime = benchmark.runtime || [];
      printRow(
        benchmark.identifier,
        String(benchmark.options.warmUpExecutions),
        String(benchmark.options.executions),
        prettyTimeMilliSeconds(runtime),
        prettyTimeMilliSeconds([
          runtime[0] / benchmark.options.executions,
          runtime[1] / benchmark.options.executions
        ])
      );
    }
    printLineSep('+');
  };

  printBenchmarks();
}

module.exports = TableReporter;
