'use strict';

// All CDS benchmarks are prepared and exported in this module.
// For usage example see benchmarks.js

const path = require('path');
const compiler = require('../lib/main');
const backends = require('../lib/backends');
const { BenchmarkSuite } = require('./benchmarkSuite');

const basedir = path.resolve(__dirname, '../test/scenarios/');
const scenarioFile = 'ConsentRepository/model/datamodel.cds';

// Sources are collected in prepareBenchmark();
// Use getCdlSources() to get a deep copy.
let collectedSources;

let getCdlSources = function() {
  // Get a deep copy of all test case scenarios, i.e. sources.
  // Essentially a deep copy: sources are a simple object with strings
  return JSON.parse(JSON.stringify(collectedSources));
}

// The generated XSN/CSN model. Generated in prepareBenchmarks();
let xsnModel;
let csnModel;
let csnModelStr;

/**
 * @returns {Promise} Promise that loads required files and does some setup like
 *                    generating a XSN model.
 */
function prepareBenchmarks() {
  return compiler.collectSources([scenarioFile], basedir).then((sourceBundle) => {
    collectedSources = sourceBundle.sources;
    xsnModel = compiler.compileSources(sourceBundle);
    csnModel = compiler.compactModel(xsnModel);
    csnModelStr = JSON.stringify(csnModel);
  });
}

let bench = new BenchmarkSuite;
const opts = (warmUpExecutions, executions) => ({ warmUpExecutions, executions });

bench.registerBenchmark('parse_cdl',  'parse: cdl to xsn',  opts(300, 2800), benchParseCdl);
bench.registerBenchmark('parse_csn',  'parse: csn to xsn',  opts(50,   170), () => compiler.parse(csnModelStr, scenarioFile.replace('.cds', '.csn')));

// backends
bench.registerBenchmark('backend_sql',   'backend: xsn to sql',   opts(100,  400), () => backends.toSql(xsnModel));
bench.registerBenchmark('backend_hana',  'backend: xsn to hana',  opts(100,  600), () => backends.toHana(xsnModel));
bench.registerBenchmark('backend_cdl',   'backend: xsn to cdl',   opts(400, 4000), () => backends.toCdl(xsnModel));
bench.registerBenchmark('backend_csn',   'backend: xsn to csn',   opts(900, 9000), () => backends.toCsn(xsnModel));
bench.registerBenchmark('backend_odata', 'backend: xsn to odata', opts(100,  800), () => backends.toOdata(xsnModel));

// new backends
bench.registerBenchmark('backend_new_odata', 'backend: csn to odata', opts(200, 1400), () => backends.toOdataWithCsn(csnModel));
bench.registerBenchmark('backend_new_hana',  'backend: csn to hana',  opts(220, 2200), () => backends.toHanaWithCsn(csnModel));
bench.registerBenchmark('backend_new_sql',   'backend: csn to sql',   opts(100, 600),  () => backends.toSqlWithCsn(csnModel));

function benchParseCdl() {
  const files = getCdlSources();
  for (let name in files) {
    BenchmarkSuite.Use(compiler.parse(files[name], name));
  }
}

module.exports = {
  prepareBenchmarks,
  benchmarkSuite : bench
};
