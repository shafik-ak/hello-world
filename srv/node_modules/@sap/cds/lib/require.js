const {sep} = require ('path')
const resolve = require('module')._resolveFilename
const local = { paths: resolve_paths (process.cwd()) }

module.exports = {
  resolve: Object.assign ( resolve, {
    local: resolve_local,
    paths: resolve_paths,
  }),
  local: require_local,
  optional: require_optional,
}


function require_local (module_, id, _notFound) {
  if (id in require_local)  return require_local [id]
  if (module_._checkedForLocal)  return;
  else module_._checkedForLocal = true
  try {
    const local = resolve.local (id)
    if (module_ && local !== module_.filename)
      return require_local[id] = module_.exports = require (local)
  } catch(e) {_ignored(e)}
  return require_local[id] = _notFound
}

function require_optional ( id, o={}) {
  try { return require (id) } catch(e) {_ignored(e)}
  if (o.else)  return o.else; else throw new Error (`

    This requires package '${id}' to be installed.
    Please do so with:

    npm add ${id} ${o.npm||''}
  `)
}

function resolve_local (id) {
  return resolve (id,local)
}

function resolve_paths (dir) {
  if (dir in resolve_paths)  return resolve_paths [dir]
  const a = dir.split(sep), n = a.length, nm = sep+'node_modules'
  return resolve_paths[dir] = a.map ((_,i,a)=> a.slice(0,n-i).join(sep)+nm)
}

function _ignored (e) { // not found locally --> will use std require
  if (e.code !== 'MODULE_NOT_FOUND')  throw e
}
