const cds = require('../../cds')
const _badRequest = (message) => { const err = new Error (message); err.statusCode = 400; return err}


exports.fiorify = (app) => {

  // fetch and instrument all OData providers
  const any = cds.service.providers.filter (srv => {
    const odata = srv._adapters [Object.keys(srv._adapters) .find (a => a.startsWith ('odata'))]
    if (odata) {
      // If there is a relative URL in UI5's manifest.json for the datasource, like 'catalog/',
      // we get called with a prefix to the service path, like '/browse/webapp/catalog/'.
      // Serve these requests by adding a wildcard (and hope we don't catch too much).
      app.use ('*' + srv.path, odata)

      // called from above to provide the data for the HTML link
      return Object.defineProperty (srv, '_previewLink', { value: link })
    }
  }) .length

  // install middleware once
  if (any) app.get (mountPoint.replace('$','\\$'), middleware)
}


const mountPoint = exports.mountPoint = '/$fiori-preview'

const middleware = exports.middleware = ({ query }, resp) => {
  const manifest = _manifest(query)
  resp.send(_html(manifest))
}
const link = exports.link = (serviceName, entityName) => {
  return {
    href: `${mountPoint}/?service=${serviceName}&entity=${entityName}`,
    title: 'Preview in Fiori elements',
    name: 'Fiori'
  }
}

function _serviceInfo (serviceProv, entityName) {
  const entities = serviceProv.model.entities(serviceProv.name)
  const entity = entities[entityName]
  if (!entity)  throw _badRequest (`No such entity '${entityName}' in service '${serviceProv.name}'`)
  return serviceProv.model.all ('Association', entity.elements)
    .filter (a =>
        !a.target.endsWith('_texts') &&
        !a.target.endsWith('DraftAdministrativeData') &&
        a.name !== 'SiblingEntity')
    .map (a => { return { navProperty: a.name, targetEntity: a.target.split('.')[1] } })
}

function _manifest({ service: serviceName, entity: entityName }) {
  const serviceProv = cds.service.providers.find (s => s.name === serviceName)
  if (!serviceProv)  throw _badRequest (`No such service '${serviceName}'. Available: [${cds.service.providers.map(p => p.name)}]`)
  const serviceInfo = _serviceInfo (serviceProv, entityName)

  const manifest = {
    _version: '1.8.0',
    'sap.app': {
      id: 'preview',
      type: 'application',
      title: `Preview â€’ List of ${serviceProv.name}.${entityName}`,
      description: 'Preview Application',
      dataSources: {
        mainService: {
          uri: `${serviceProv.path}/`,
          type: 'OData',
          settings: {
            odataVersion: '4.0'
          }
        }
      },
    },
    'sap.ui5': {
      dependencies: {
        libs: {
          'sap.fe': {}
        }
      },
      models: {
        '': {
          dataSource: 'mainService',
          settings: {
            synchronizationMode: 'None',
            operationMode: 'Server',
            autoExpandSelect: true,
            earlyRequests: true,
            groupProperties: {
              default: {
                submit: 'Auto'
              }
            }
          }
        }
      },
      routing: {
        routes: [
          {
            name: `${entityName}ListRoute`,
            target: `${entityName}ListTarget`,
            pattern: ':?query:',
          },
          {
            name: `${entityName}DetailsRoute`,
            target: `${entityName}DetailsTarget`,
            pattern: `${entityName}({key}):?query:`,
          }
        ],
        targets: {
          [`${entityName}ListTarget`]: {
            type: 'Component',
            id: `${entityName}ListTarget`,
            name: 'sap.fe.templates.ListReport',
            options: {
              settings: {
                entitySet: `${entityName}`,
                navigation: {
                  [`${entityName}`]: {
                    detail: {
                      route: `${entityName}DetailsRoute`
                    }
                  }
                }
              }
            }
          },
          [`${entityName}DetailsTarget`]: {
            type: 'Component',
            id: `${entityName}DetailsTarget`,
            name: 'sap.fe.templates.ObjectPage',
            options: {
              settings: {
                entitySet: `${entityName}`,
                navigation: {}
              }
            }
          }
        }
      },
    },
    contentDensities: {
      compact: true,
      cozy: true
    },
    'sap.ui': {
      technology: 'UI5',
      fullWidth: true
    },
    'sap.fiori': {
      registrationIds: [],
      archeType: 'transactional'
    },
  }

  const { routing } = manifest['sap.ui5']
  for (const {navProperty, targetEntity} of serviceInfo) {
    // add a route for the navigation property
    routing.routes.push(
      {
        name: `${navProperty}Route`,
        target: `${navProperty}Target`,
        pattern: `${entityName}({key}/${navProperty}({key2}):?query:`,
      }
    )
    // add a route target leading to the target entity
    routing.targets[`${navProperty}Target`] = {
      type: 'Component',
      id: `${navProperty}Target`,
      name: 'sap.fe.templates.ObjectPage',
      options: {
        settings: {
          entitySet: targetEntity
        }
      }
    }
    // wire the new route from the source entity's navigation (see above)
    routing.targets[`${entityName}DetailsTarget`].options.settings.navigation[navProperty] = {
      detail: {
        route: `${navProperty}Route`
      }
    }
  }

  return manifest
}

function _html(manifest) {
  return `
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>${manifest['sap.app'].title}</title>
    <script src="https://sapui5.hana.ondemand.com/resources/sap-ui-core.js"
        data-sap-ui-libs="sap.m, sap.ushell, sap.collaboration, sap.ui.layout" data-sap-ui-compatVersion="edge"
        data-sap-ui-theme="sap_belize" data-sap-ui-frameOptions="allow"></script>
    <script>
        sap.ui.getCore().attachInit(() => {
            sap.ui.require(["sap/fe/AppComponent", "sap/m/Shell", "sap/ui/core/ComponentContainer"], function (AppComponent, Shell, ComponentContainer) {
                var GenericComponent = AppComponent.extend("preview.Component", {
                    metadata: { manifest: ${JSON.stringify(manifest, null, 2)} }
                });
                new Shell({
                    app: new ComponentContainer({
                        height: "100%",
                        component: new GenericComponent({
                            id: "preview.Component"
                        }),
                        async: true
                    }),
                    appWidthLimited: false
                }).placeAt("content");
            })
        })
    </script>
</head>
<body class="sapUiBody" id="content"></body>
</html>
`
}
