const cds = require('../../cds')
const { find, path, readFileSync } = cds.utils, {app} = cds.env.folders
const htmls = find (app, ['*.html', '*/*.html', '*/*/*.html']).map(file => path.relative(app, file).normalize())
const odata = service => Object.keys(service._adapters).find (a => a.startsWith ('odata'))

exports.index = { get html(){ return this._html || (
    this._html = readFileSync(path.join(__dirname,'index.html'),'utf-8') .replace (
        '{{content}}',
        htmls.map(html => `\n<span><a href="${html}">/${html}</a></span>`).join(',') +
        cds.service.providers.map (service => `
        <h3>
            <a href="${service.path}">${service.path}</a>
            ${odata(service) ? `/ <a href="${service.path}/$metadata">$metadata</a>` : ``}
        </h3>
        <ul>${_exposedEntities4(service).map (e => {
            const prevLink = service._previewLink ? service._previewLink (service.name, e) : null
            return `
            <li>
                <a href="${service.path}/${e}">${e}</a>
                ${ prevLink ? `<a class="preview" href="${prevLink.href}" title="${prevLink.title}"> &hellip;in ${prevLink.name}</a>` : ``}
            </li>`}).join('')}
        </ul>
    `) .join(''))
)}}



function _exposedEntities4 (service) {
    const exposed=[], {entities} = service
    for (let each in entities) {
        const e = entities [each]
        if (e['@cds.autoexposed'] && !e['@cds.autoexpose'])  continue
        if (e.name.endsWith('DraftAdministrativeData'))  continue
        if (e.name.endsWith('_texts'))  continue
        exposed.push (each)
    }
    return exposed
}