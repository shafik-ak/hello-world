const {extend,lazify} = require('../cds')
const lib = lazify ({
    SELECT: lazy => require ('./SELECT'),
    INSERT: lazy => require ('./INSERT'),
    UPDATE: lazy => require ('./UPDATE'),
    DELETE: lazy => require ('./DELETE'),
    Query: lazy => require ('./Query'),
})

const cds = { ql (_context) { return {
    get SELECT(){ return lib.SELECT.in(_context) },
    get INSERT(){ return lib.INSERT.in(_context) },
    get UPDATE(){ return lib.UPDATE.in(_context) },
    get DELETE(){ return lib.DELETE.in(_context) },
    get Query() { return lib.Query },
}}}

module.exports = extend (cds.ql) .with (cds.ql())



////////////////////////////////////////////////////////////////////////////
/* eslint-disable no-console */
if (!module.parent) (async()=>{

    cds.ql.Query.prototype.then = function(r){
        r (console.log ('[IN '+ this._context +':]', this))
    }

    const {SELECT} = cds.ql ('context')
    console.log (SELECT.from('foo.bar.Car')+'where ID=111')

    await SELECT.from('Foo', ()=>{})
    await SELECT.from('Foo')
    await SELECT.one('Foo', ()=>{})
    await SELECT.one('Foo')
    await SELECT.one.from('Foo')
    await SELECT.one('bar').from('Foo')
    await SELECT.one('foo','bar').from('Foo')
    await SELECT.one(['foo','bar']).from('Foo')
    await SELECT.one('Foo', ['foo','bar'])
    await SELECT.one({wrong:11}).from('Foo')


})().catch (console.error)
