if (!global.cds) { // see last line..
const cds = require ('@sap/cds-reflect')
require = cds.lazify (module)  // eslint-disable-line

/** This is the central facade to all cds functions */
module.exports = Object.assign ( cds, {

    // Model Processing
    resolve: require ('./models/resolve'),
    load: require ('./models/load'),
    parse: require ('./models/parse'),
    compile: require ('./models/compile'),
    localize: require ('./models/i18n'),
    unfold: lazy => cds.compile,
    get: lazy => cds.load.only,

    // Services and Querying
    connect: require ('./runtime/connect'),
    service: require ('./runtime/service'),
    serve: require ('./runtime/serve'),
    ql: require ('./ql'),
    services: {},

    // Build and Deploy
    _compiler: require('@sap/cds-compiler'),  //> for lsp only
    deploy: require ('./runtime/deploy'),
    build: require('./build'),
    mtx: require('./mtx'),

    // Helpers
    in: cwd => !cwd ? cds : {__proto__:cds, cwd, env:cds.env.for('cds',cwd) },
    require: require ('./require'),
    error: require ('./utils/errors'),
    env: require ('./env'),  get config(){ return this.env },
    utils: require ('./utils/fs'), write: lazy => cds.utils.write,
    info: require ('../bin/version'),
    exec: require ('../bin/cds'),
    home: lazy => __dirname.slice(0,-4),
    version: lazy => module.require('../package.json').version,

    // Service API methods for primary datasource
    run(...args) { return db.run(...args) },
    stream(...args) { return db.stream(...args) },
    foreach(...args) { return db.foreach(...args) },
    transaction(...args) { return db.transaction(...args) },
    read(...args) { return db.read(...args) },
    insert(...args) { return db.insert(...args) },
    update(...args) { return db.update(...args) },
    delete(...args) { return db.delete(...args) },
    acquire(...args) { return db.acquire(...args) },
    release(...args) { return db.release(...args) },
    disconnect(...args) { return db.disconnect(...args) },

})


////////////////////////////////////////////////////////////////////////////
//
//      Service API getters for primary datasource
//
const _missing = new Proxy ({},{ get:()=> cds.error.no_primary_db() })
let db = _missing

cds.mixin (class {
    set db(primary) { db = primary || _missing }
    get db() { return db === _missing ? undefined : db }
    get then() { return db === _missing ? undefined : db.then }
    get catch() { return db === _missing ? undefined : db.catch }
    get model() { return db === _missing ? undefined : db.model }
    get options() { return db === _missing ? undefined : db.options }
    get entities() { return db.entities }
    get session() { return this.db } // compat
    set session(s) { this.db = s } // compat
})


////////////////////////////////////////////////////////////////////////////
//
//      Globals to cds and forwards to cds.ql
//

// Workaround for a glitch with jest in Node < v10
if (process.env.NODE_ENV === 'test' && process.version.match(/v(\d+)/)[1] < 10)  cds.ql

cds.extend (global) .with ({ cds,
    get SELECT() { return cds.ql.SELECT },
    get INSERT() { return cds.ql.INSERT },
    get UPDATE() { return cds.ql.UPDATE },
    get DELETE() { return cds.ql.DELETE },
    get CREATE() { return cds.ql.CREATE },
    get DROP() { return cds.ql.DROP },
})

} else module['exports'] = global.cds