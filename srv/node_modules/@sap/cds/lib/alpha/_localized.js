const DEBUG = /\b(y|all|alpha|_localized)\b/.test (process.env.DEBUG) && console.warn // eslint-disable-line
const cds = require('../cds')
const _4sqlite = cds.env.i18n.for_sqlite || []

///////////////////////////////////////////////////////////
//   cds-compiler part
//

/**
 * For each localized.<view> we get from the compiler, create additional
 * views for sqlite as CREATE VIEW localized_<locale_ ...
 */
function _add_localized_locale_views_to_ddl (ddl, csn, o) { // NOSONAR
	if (o && o.toSql && o.toSql.dialect === 'hana') return ddl
	ddl.filter (each => each.startsWith ('CREATE VIEW localized_')) .forEach (localized_view => {
		for (let locale of _4sqlite) ddl.push (localized_view
			.replace (/localized_/g, `localized_${locale}_`)
			.replace (/\.locale = 'en'/, `.locale = '${locale}'`)
		)
	})
	return ddl
}



///////////////////////////////////////////////////////////
//   cds.services part
//

/**
 * For each localized.<view> we get from the compiler, ensure there's a
 * corresponding localized.<locale>. entry in the model to support reflection.
 */
const _visited = Symbol()
function _add_localized_locale_views_to_csn (m) {
	if (m && !m[_visited]) {
		const added = []
		Object.defineProperty(m, _visited, {value:true}) //> tag model to do that only once
		Object.values(m.definitions) .filter (d => d.name.startsWith('localized.')) .forEach (d=>{
			for (let locale of _4sqlite) {
				const x = {__proto__:d,
					name: localized_(locale, d.name),
					source: localized_(locale, d.source),
				}
				m.definitions [x.name] = x
				added.push ([x,locale])
			}
		})
		// redirect associations/compositions in elements to localized.<locale> targets
		added.forEach (([d,locale]) => {
			let any = null
			for (let e of Object.values(d.elements)) {
				if (e.target && e.target.startsWith('localized.')){
					const elements = any || (any = d.elements = {...d.elements})
					const target = localized_(locale, e.target)
					elements[e.name] = {__proto__:e,
						target, _target: m.definitions[target]
					}
				}
			}
		})
	}
	return m
}


function localized_ (locale, view) {
	if (!view)  return
	if (!view.startsWith('localized.'))  return view
	return `localized.${locale}.${view.slice(10)}`
}


// feature-toggled exports
module.exports = cds.env.features.localized ? {
	unfold:_add_localized_locale_views_to_ddl,
	serve:_add_localized_locale_views_to_csn,
	connect:_add_localized_locale_views_to_csn
} : { unfold: x=>x, serve: x=>x, connect: x=>x }
