const {isdir,readdirSync,path} = require('../utils/fs'), {join,sep} = path
const {resolve} = require ('../require')
const suffixes = [ '.csn', '.cds', sep+'index.csn', sep+'index.cds', sep+'csn.json' ]

/**
 * Resolves given model references to an array of absolute filenames.
 * For the model references, all these are accepted:
 * - with suffix or without → will append `.csn|cds`, `/index.csn|cds`
 * - absolute refs like `@sap/cds/common`
 * - local refs with leading `.` or without, e.g. `srv/cat-service`
 * - directory names → will fetch all contained `.csn` and `.cds` files
 * - arrays of any of the above
 * @returns and array of absolute filenames
 */
module.exports = function (model, o={}) { // NOSONAR

    if (!model || model === '--')  return
    if (model._resolved)  return model
    if (Array.isArray(model))  return _resolved (
        [... new Set(model)] .reduce ((prev,next) => prev.concat (this.resolve(next,o)||[]), [])
    )

    const cwd = o.root || this.cwd || process.cwd()
    const local = path.resolve (cwd,model)
    const id = model.startsWith('.') ? local : model
    const paths = _paths(cwd), {cache} = paths
    if (id in cache)  return cache[id]

    // fetch file with .cds/.csn suffix as is
    if (/\.(csn|cds)$/.test(id)) try {
        return cache[id] = _resolved ([ resolve (id,paths) ])
    } catch(e) {/* ignored */}

    // try to resolve file with one of the suffixes
    for (let tail of o.suffixes || suffixes) try {
        return cache[id] = _resolved ([ resolve (id+tail,paths) ])
    } catch(e) {/* ignored */}

    // fetch all in a directory
    if (o.all !== false && isdir(local)) {
        const files = readdirSync(local), all=[], unique={}
        for (let f of files) if (f.endsWith('.csn')) {
            all.push (unique[f.slice(0,-4)] = join(local,f))
        }
        for (let f of files) if (f.endsWith('.cds')) {
            unique[f.slice(0,-4)] || all.push (join(local,f))
        }
        return cache[id] = _resolved (all)
    }

    // fetch file without suffix
    if (o.any !== false && !id.endsWith('/')) try { // NOTE: this also finds .js files!
        return cache[id] = _resolved ([ resolve (id,paths) ])
    } catch(e) {/* ignored */}

}



function _paths (dir) {
    if (dir in _paths)  return _paths[dir]
    return _paths[dir] = { paths:[ dir, ...resolve.paths(dir) ], cache:{} }
}
function _resolved (array) {
    if (array.length)  return Object.defineProperty (array, '_resolved', {value:true})
}
