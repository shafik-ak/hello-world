module.exports = Object.assign (load, {only:get})
const cdsv = require('./cdsv')

function load (model, options) {
  const all = this.resolve (model); if (!all) return notFound (model)
  let csn = cdsv.compile (all, undefined, options)
  // alpha fix for too eagerly unfolded models...
  if (options && options.clean)  csn = csn.then (require('../alpha/_cleanup-csn'))
  if (options && options.min)  csn = csn.then (require('../alpha/_skip_unused'))
  return csn
}

function get (model) {
  const all = this.resolve(model); if (!all) return notFound (model)
  if (all.length > 1) throw new Error(`You can only cds.get a single model`)
  return cdsv.compile (all, undefined, {parseOnly: true})
}

function notFound (model) {
  return Promise.reject(Object.assign(new Error(`Couldn't find a CDS model at: ${_local(model)}`), {
    code: 'MODEL_NOT_FOUND', model
  }))
}

const _cwd = process.cwd() + require('path').sep
const _local = (path) => ('' + path).replace(_cwd, '')

/* eslint no-console: off */
