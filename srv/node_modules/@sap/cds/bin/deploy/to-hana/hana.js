
const fse = require('@sap/cds-foss')('fs-extra');
const os = require('os');
const path = require('path');

const { BuildTaskEngine, BuildTaskFactory } = require('../../../lib/build');
const buildConstants = require('../../../lib/build/constants');
const cds = require('../../../lib/cds');
const cfUtil = require('./cfUtil');
const { defaultLogger, nullLogger } = require('./logger');
const hdiDeployUtil = require('./hdiDeployUtil');
const mtaUtil = require('../../../lib/utils/mtaUtil');
const runCommand = require('./runCommand');
const { bold } = require('../../utils/term');


const IS_WIN = (os.platform() === 'win32');
const UTF_8 = 'utf-8';
const SERVICE_PLAN = 'hdi-shared';
const PRODUCTION_PROFILE = '[production]';

const DEBUG = process.env.DEBUG;

class HanaDeployer {

  async _deployCF(projectPath, modelName, serviceName, tunnelAddress, credentials, cfServiceName, logger) {
    // get from param
    let cfServiceInstanceMta;
    let cfServiceInstanceName;
    if (serviceName) {
      cfServiceInstanceName = serviceName;
    } else {
      cfServiceInstanceMta = await mtaUtil.getHdiService(projectPath, modelName, logger);
      cfServiceInstanceName = cfServiceInstanceMta ? cfServiceInstanceMta.name : mtaUtil.getDefaultHdiServiceName(projectPath, modelName);
    }

    logger.log();
    this._validateServiceInstanceName(cfServiceInstanceName);
    logger.log(`[cds.deploy] - Using container ${bold(cfServiceInstanceName)}`);

    let cfConfig = cfServiceInstanceMta && cfServiceInstanceMta.parameters && cfServiceInstanceMta.parameters.config;
    await cfUtil.createService(cfServiceName, SERVICE_PLAN, cfServiceInstanceName, cfConfig, logger);

    let serviceKey;
    if (!credentials) {
      const cfServiceInstanceKey = `${cfServiceInstanceName}-key`;
      serviceKey = await cfUtil.getServiceKey(cfServiceInstanceName, cfServiceInstanceKey, logger);
      if (!serviceKey) {
        throw new Error(`[cds.deploy] - Could not create service key ${bold(cfServiceInstanceKey)}.`);
      }
    } else {
      serviceKey = credentials.hana[0];
    }

    if (tunnelAddress) {
      serviceKey = this._injectTunnelAddress(serviceKey, tunnelAddress)
      logger.log(`[cds.deploy] - Using tunnel address ${bold(tunnelAddress)}`);
    }

    return { cfServiceInstanceName, serviceKey }
  }


  async _build(buildTaskOptions, model, logger) {
    buildTaskOptions = buildTaskOptions || {
      root: process.cwd()
    };

    if (typeof model === 'string') {
      model = [model];
    }

    logger.log(`[cds.deploy] - Creating build tasks`);
    const buildTaskFactory = new BuildTaskFactory((DEBUG ? logger : nullLogger), cds);
    const allTasks = await buildTaskFactory.getTasks(buildTaskOptions);

    const hanaTasks = allTasks.filter((task => {
      return task.for === buildConstants.BUILD_TASK_HANA && (!model || model.includes(task.src));
    }));

    let srcFolder = cds.env.folders.db || 'db';
    if (Array.isArray(srcFolder)) {
      srcFolder = srcFolder[0] || 'db';
    }

    if (hanaTasks.length === 0) {
      hanaTasks.push({
        for: buildConstants.BUILD_TASK_HANA,
        src: srcFolder,
        options: {
          model: cds.env.requires.db && cds.env.requires.db.model || cds.env.deploy.models
        }
      });
    }

    logger.log(`[cds.deploy] - Running build`);

    const buildResults = await new BuildTaskEngine((DEBUG ? logger : nullLogger)).processTasks(hanaTasks, buildTaskOptions);
    return { buildResults, allTasks }
  }


  async deploy(model, serviceName, noSave, tunnelAddress, buildTaskOptions, credentials, undeployWhitelist, hdiOptions = {}, logger = defaultLogger) { // NOSONAR

    logger.log(`[cds.deploy] - ${bold('Starting deploy to SAP HANA ...')}`);
    logger.log();

    this._validateEnvironment();

    const projectPath = path.resolve(process.cwd());

    const { buildResults, allTasks } = await this._build(buildTaskOptions, model, logger);

    // hana or hanatrial, error if neither found
    const cfServiceName = await this._getCfServiceName(logger);

    for (const buildResult of buildResults) {
      const currentModelFolder = buildResult.result.dest;
      const modelName = path.basename(currentModelFolder);

      if (undeployWhitelist) {
        logger.log('[cds.deploy] - Writing undeploy.json');
        await fse.writeJSON(path.join(currentModelFolder, 'undeploy.json'), undeployWhitelist);
      }

      const { cfServiceInstanceName, serviceKey } = await this._deployCF(projectPath, modelName, serviceName, tunnelAddress, credentials, cfServiceName, logger);

      let hasJava;
      for (const task of allTasks) {
        switch (task.for) {
          case buildConstants.BUILD_TASK_NODE:
            break;

          case buildConstants.BUILD_TASK_JAVA:
            hasJava = true;
            await this._writeConnectionProperties(task.src, serviceKey, logger);
            break;

          default:
            break;
        }
      }

      const defaultEnvJsonPath = path.join(currentModelFolder, 'default-env.json');
      await this._writeDefaultEnvJson(defaultEnvJsonPath, cfServiceInstanceName, serviceKey, logger);
      await this._addToGitignore(path.join(projectPath, '.gitignore'), 'default-env.json', logger);

      if (hasJava) {
        await this._addToGitignore(path.join(projectPath, '.gitignore'), 'connection.properties', logger);
      }

      await this._writeDefaultEnvJson(path.join(projectPath, 'default-env.json'), cfServiceInstanceName, serviceKey, logger);

      // Check if deployer is already installed, otherwise only install this one, not the rest of dependencies.
      if (!await hdiDeployUtil.findHdiDeployLib(currentModelFolder, logger)) {
        const { deployerName, deployerVersionSpec } = hdiDeployUtil
        logger.log(`[cds.deploy] - installing ${deployerName}`);
        await runCommand('npm', ['install', `${deployerName}@${deployerVersionSpec}`,
          (noSave ? '--no-save' : '--save-dev')], logger, {
          cwd: currentModelFolder,
          shell: IS_WIN,
          stdio: 'inherit'
        });
      }

      if (!noSave) {
        await this._writePackageJson(path.join(projectPath, 'package.json'), modelName, buildResult.task, logger);
      }

      await hdiDeployUtil.deploy(currentModelFolder, this._getVCAPEntry(cfServiceInstanceName, serviceKey), hdiOptions, logger);
    }

    logger.log(`[cds.deploy] - Done.`);

    return { buildResults };
  }


  async _getCfServiceName(logger) {
    let cfServiceName = 'hana';
    if (!await cfUtil.hasMarketplaceService(cfServiceName, SERVICE_PLAN, logger)) {
      cfServiceName = 'hanatrial';
      if (!await cfUtil.hasMarketplaceService(cfServiceName, SERVICE_PLAN, logger)) {
        throw new Error('[cds.deploy] - Services not found');
      }
    }

    return cfServiceName;
  }


  async _writeDefaultEnvJson(defaultEnvJsonPath, serviceInstanceName, serviceKey, logger) {
    let defaultEnvJson = {};
    if (await fse.pathExists(defaultEnvJsonPath)) {
      defaultEnvJson = await fse.readJSON(defaultEnvJsonPath, UTF_8);
    }

    defaultEnvJson.VCAP_SERVICES = defaultEnvJson.VCAP_SERVICES || {};
    defaultEnvJson.VCAP_SERVICES.hana = defaultEnvJson.VCAP_SERVICES.hana || [];
    defaultEnvJson.VCAP_SERVICES.hana = defaultEnvJson.VCAP_SERVICES.hana.filter(entry => {
      return entry.name !== serviceInstanceName;
    });

    defaultEnvJson.VCAP_SERVICES.hana.push(this._getVCAPEntry(serviceInstanceName, serviceKey));

    logger.log(`[cds.deploy] - Writing ${defaultEnvJsonPath}`);
    await fse.outputJSON(defaultEnvJsonPath, defaultEnvJson, {
      spaces: 2
    });
  }


  async _writeConnectionProperties(javaModulePath, serviceKey, logger) {

    const connectionPropertiesPath = path.join(javaModulePath, 'src', 'main', 'resources', 'connection.properties');

    const content = `#Db connection properties created by cds deploy
schema=${serviceKey.schema}
username=${serviceKey.user}
password=${serviceKey.password}
connectionURL=${serviceKey.url.replace(/=/g, '\\=')}
`;

    logger.log(`[cds.deploy] - Writing ${connectionPropertiesPath}`);
    await fse.outputFile(connectionPropertiesPath, content);
  }


  async _addToGitignore(gitIgnorePath, entry, logger) {

    let entryMustBeAdded = true;
    try {
      const gitCheckCmd = await runCommand('git', ['check-ignore', entry], nullLogger);
      if (gitCheckCmd.code === 0) {
        // git verifies the chain of gitignore files, code === 0 file is ignored
        entryMustBeAdded = false;
      }
    } catch (err) {
      // git command not available or some problem occurred
      logger.warn(`[cds.deploy] - Error while calling git: ${err}`);
    }

    if (entryMustBeAdded) {
      let gitignore = '';
      if (await fse.pathExists(gitIgnorePath)) {
        gitignore = await fse.readFile(gitIgnorePath, UTF_8);
        if (gitignore.includes(entry)) {
          // entry exists in file
          return;
        }
      }

      logger.log(`[cds.deploy] - Adding ${entry} to ${gitIgnorePath}`);
      gitignore = gitignore + `${os.EOL}${os.EOL}# added by cds deploy${os.EOL}${entry}${os.EOL}`;
      await fse.outputFile(gitIgnorePath, gitignore);
    }
  }


  _validateEnvironment() {
    if (IS_WIN && !process.env.SECUDIR) {
      throw new Error(`[cds.deploy] - In order to use the hdi deployer for Windows you require the SAP CommonCryptoLib.
Please follow https://help.sap.com/viewer/e54136ab6a4a43e6a370265bf0a2d744/4.2.12/en-US/c049e28431ee4e8280cd6f5d1a8937d8.html for further information.`);
    }
  }


  _getVCAPEntry(serviceInstanceName, serviceKey) {
    return {
      name: serviceInstanceName,
      tags: ['hana'],
      credentials: serviceKey
    };
  }


  async _writePackageJson(packageJsonPath, modelName, task, logger) {
    if (await fse.pathExists(packageJsonPath)) {
      const packageJson = await fse.readJSON(packageJsonPath, UTF_8);

      if (!packageJson.dependencies || !packageJson.dependencies.hdb) {
        const hdbVersion = await this._getHDBVersion();
        packageJson.dependencies = packageJson.dependencies || {};
        packageJson.dependencies.hdb = `^${hdbVersion}`;
      }

      packageJson.cds = packageJson.cds || {};
      packageJson.cds.requires = packageJson.cds.requires || {};
      packageJson.cds.requires[modelName] = packageJson.cds.requires[modelName] || {};

      if (packageJson.cds.requires[modelName].kind !== 'hana') {
        packageJson.cds.requires[modelName][PRODUCTION_PROFILE] = packageJson.cds.requires[modelName][PRODUCTION_PROFILE] || {};
        packageJson.cds.requires[modelName][PRODUCTION_PROFILE].kind = 'hana';
        // only fill the hana model if it's not yet set and only if there is no default model
        if (!packageJson.cds.requires[modelName][PRODUCTION_PROFILE].model && !packageJson.cds.requires[modelName].model) {
          packageJson.cds.requires[modelName][PRODUCTION_PROFILE].model = task.options.model;
        }

        logger.log(`[cds.deploy] - Writing ${packageJsonPath}`);
        await fse.outputJSON(packageJsonPath, packageJson, { spaces: 2 });
      }
    }
  }

  async _getHDBVersion() {
    const cmdResult = await runCommand('npm', ['show', 'hdb', 'version'], nullLogger, {
      shell: IS_WIN
    });
    return cmdResult.stdout.trim();
  }

  _validateServiceInstanceName(serviceInstanceName) {
    // valid service name chars: alpha-numeric, hyphens, and underscores
    if (/[^\w\d-_]+/g.exec(serviceInstanceName)) {
      throw new Error(`[cds.deploy] - Service name ${serviceInstanceName} must only contain alpha-numeric, hyphens, and underscores.`);
    }
  }

  _injectTunnelAddress(serviceKey, tunnelAddress) {
    if (!/\w+:\d+/.test(tunnelAddress)) {
      throw new Error(`Invalid tunnel address '${tunnelAddress}' - must be in form 'host:port'`)
    }
    const [tunnelHost, tunnelPort] = tunnelAddress.split(':')
    const { host, port } = serviceKey
    serviceKey.host = tunnelHost
    serviceKey.port = tunnelPort
    serviceKey.url = serviceKey.url.replace(`${host}:${port}`, tunnelAddress)
    serviceKey.hostname_in_certificate = host  // make cert. verification happy, see xs2/hdideploy.js#527
    serviceKey.url = serviceKey.url + (serviceKey.url.includes('?') ? '&' : '?') + 'hostNameInCertificate=' + host
    return serviceKey
  }
}

module.exports = new HanaDeployer();
