import { SELECT, INSERT, UPDATE, DELETE, Query, ConstructedQuery } from './ql'
import { LinkedModel, Definitions } from './reflect'
import { csn, Definition } from "./specs/CSN"

/** Class cds.Service --- instances are obtained through `cds.connect` or `cds.serve`.  */
export interface Service extends QueryAPI, ProviderAPI, MessagingAPI {

	/** The model from which the service's definition was loaded */
	model: LinkedModel

	/** Provides access to the entities exposed by a service
	 * @see [capire](https://github.wdf.sap.corp/pages/cap/node.js/api#srventities-types--namespace--defs)
	 */
	entities: Definitions & ((namespace: string) => Definitions)

	/** Provides access to the types exposed by a service
	 * @see [capire](https://github.wdf.sap.corp/pages/cap/node.js/api#srventities-types--namespace--defs)
	 */
	types: Definitions & ((namespace: string) => Definitions)

	/** Starts or joins a transation
	 * @see [capire](https://github.wdf.sap.corp/pages/cap/node.js/api#srvtransaction--context--tx)
	 */
	transaction (context : object) : Transaction
}

export interface Transaction extends QueryAPI {
	commit() : Promise<void>
	rollback() : Promise<void>
}

export interface Database extends Service {
	deploy (model?: csn | string) : Promise<csn>
	begin() : Promise<void>
	commit() : Promise<void>
	rollback() : Promise<void>
}

export interface ResultSet extends Array<{}> {}

interface QueryAPI {
	read <T>(entity : Definition | string) : SELECT<T>
	insert <T>(entity : Definition | string) : INSERT<T>
	update <T>(entity : Definition | string) : UPDATE<T>
	delete <T>(entity : Definition | string) : DELETE<T>
	run (block : (tx:Transaction) => void) : Promise<ResultSet | any>
	run (query : ConstructedQuery) : Promise<ResultSet | any>
	run (query : Query) : Promise<ResultSet | any>
	foreach (query : Query, callback: (row:object) => void) : this
}

interface ProviderAPI {
	impl (fn: ServiceImpl) : this
	on: (
		(eve: Event_, entity: Target, handler: EventHandler) => this
	)&(
		(eve: Event_, handler: EventHandler) => this
	)&{
		resultsOf (eve: Event_, entity: Target, handler?: EventHandler) : ProviderAPI
		succeeded (eve: Event_, entity: Target, handler?: EventHandler) : ProviderAPI
		failed (eve: Event_, entity: Target, handler?: EventHandler) : ProviderAPI
	}&{
		resultsOf (eve: Event_, handler?: EventHandler) : ProviderAPI
		succeeded (eve: Event_, handler?: EventHandler) : ProviderAPI
		failed (eve: Event_, handler?: EventHandler) : ProviderAPI
	}
	before (eve: Event_, entity?: Target, handler?: EventHandler) : this
	after (eve: Event_, entity?: Target, handler?: ResultsHandler) : this
	reject (eves: CRUD | CRUD[], ...entity: Target[]) : this
	dispatch (msg : EventMessage)
}

interface MessagingAPI {
	emit (eve: Event_, entity: Target, data?: object) : this
	emit (eve: Event_, data?: object) : this
}

export interface ServiceImpl {
	( this: Service, srv: Service ) : any
}

export interface EventHandler {
	// (msg : EventMessage) : Promise<any> | any | void
	(req : Request) : Promise<any> | any | void
}

interface ResultsHandler {
	(results : any[])
	(each : any)
}

interface EventMessage {
	event : string
	data : any
}

interface Request extends EventMessage {
	target : Definition
	query : Query
	reply()
	error()
	reject()
}

type Event_ = Event | Event[]
type Event = CRUD | TX | HTTP | DRAFT | string
type CRUD = 'CREATE' | 'READ' | 'UPDATE' | 'DELETE'
type DRAFT = 'NEW' | 'EDIT' | 'PATCH' | 'SAVE'
type HTTP = 'GET' | 'PUT' | 'POST' | 'DELETE' | 'PATCH'
type TX = 'COMMIT' | 'ROLLBACK'
type CustomOp = string
type Target = string | Definition
