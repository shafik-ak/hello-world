const EventEmitter = require('events')

/** Modified event emitter which delays emits
 */
class DelayedEmitter extends EventEmitter {
  constructor (isDelayed = false) {
    super()
    this.isDelayed = isDelayed
  }

  get _collector () {
    if (!this._collectorArray) {
      this._collectorArray = []
    }

    return this._collectorArray
  }

  /**
   * Set store of the instance of DelayedEmitter
   * @param {Array} emitterStore Store
   */
  setStore (emitterStore) {
    emitterStore.push(this)
  }

  /**
   * Does not emit directly but stores the emits
   */
  emit (...args) {
    if (this.isDelayed) {
      this._collector.push(args)
    } else {
      super.emit(...args)
    }
  }

  /**
   * Dispatch all stored emits
   * @param {*} [err] Error object
   */
  dispatch (err) {
    if (err) {
      super.emit('failed', err)
      super.emit('done')

      return
    }

    this._collector.forEach(args => super.emit(...args))
  }
}

module.exports = DelayedEmitter
