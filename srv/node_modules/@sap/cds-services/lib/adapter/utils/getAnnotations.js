const _addRestriction = (event, restrict, annotations) => {
  if (!annotations.hasOwnProperty(event)) {
    annotations[event] = []
  }

  const normalizedRestrict = {}
  if (restrict.to) {
    normalizedRestrict.to = Array.isArray(restrict.to) ? restrict.to : [restrict.to]
  }
  if (restrict.where) {
    normalizedRestrict.where = restrict.where
  }

  annotations[event].push(normalizedRestrict)
}

const _addRestrictions = (event, restrict, annotations) => {
  const list = []
  if (event === '*') {
    list.push('READ', 'CREATE', 'UPDATE', 'DELETE')
  } else if (event === 'WRITE') {
    list.push('CREATE', 'UPDATE', 'DELETE')
  } else {
    // READ, CREATE, UPDATE, DELETE, bound action
    list.push(event)
  }

  for (const method of list) {
    _addRestriction(method, restrict, annotations)
  }
}

const _isOperation = def => {
  return ['action', 'function'].includes(def.kind)
}

const _addRestrictionsForMultipleEvents = (events, restrict, annotations) => {
  for (const event of restrict.grant) {
    _addRestrictions(event, restrict, annotations)
  }
}

/**
 * Collect authorization annotations for an entity or an action/function in form {EVENT: {to: [], where: []}}.
 * For actions/functions EVENT is always set to 'operation'.
 *
 * @param {Object} def - definition of the entity or action/function
 * @returns {Object}
 *
 */
const getAnnotations = def => {
  const annotations = {}

  if (def['@requires']) {
    const requires = def['@requires']
    if (_isOperation(def)) {
      _addRestriction('operation', { to: requires }, annotations)
    } else if (typeof requires === 'string' || Array.isArray(requires)) {
      _addRestrictions('*', { to: requires }, annotations)
    }
  }

  if (def['@restrict']) {
    for (const restrict of def['@restrict']) {
      if (_isOperation(def)) {
        _addRestriction('operation', restrict, annotations)
      } else if (typeof restrict.grant === 'string') {
        _addRestrictions(restrict.grant, restrict, annotations)
      } else if (Array.isArray(restrict.grant)) {
        _addRestrictionsForMultipleEvents(restrict.grant, restrict, annotations)
      }
    }
  }

  return annotations
}

module.exports = getAnnotations
