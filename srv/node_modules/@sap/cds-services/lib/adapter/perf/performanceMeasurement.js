const { performance, PerformanceObserver } = require('perf_hooks')
const generateUUID = require('@sap/cds-foss')('uuid/v4')

const hasPackage = require('../utils/hasPackage')
const packageName = '@dynatrace/oneagent-sdk'
let dynatrace

if (hasPackage(packageName)) {
  const sdk = require(packageName)
  const api = sdk.createInstance()
  dynatrace = {
    sdk,
    api
  }
}

const _addDurationToRequest = (req, splitName, duration) => {
  if (splitName[2] === 'Total') {
    req.performanceMeasurement.results.total = duration
  } else if (splitName[splitName.length - 2] === 'SQL') {
    req.performanceMeasurement.results.db += duration
  } else if (splitName[splitName.length - 1] === 'ODataIn') {
    req.performanceMeasurement.results.ODataIn = duration
  } else if (splitName[splitName.length - 1] === 'default') {
    req.performanceMeasurement.results.defaulthandler += duration
  } else if (splitName[splitName.length - 1] === 'custom') {
    req.performanceMeasurement.results.customhandler += duration
  }
}

const _clearMeasuresAndMarksOfRequest = req => {
  for (const mark of req.performanceMeasurement.marks) {
    performance.clearMarks(mark)
  }

  if (performance.clearMeasures) {
    for (const measure of req.performanceMeasurement.measures) {
      performance.clearMeasures(measure)
    }
  }
}

const _observerCallback = req => items => {
  const entry = items.getEntries()[0]
  const splitName = entry.name.split(' ')

  if (splitName[0] === req.performanceMeasurement.uuid) {
    if (entry.entryType === 'mark') {
      req.performanceMeasurement.marks.push(entry.name)
    } else if (entry.entryType === 'measure') {
      req.performanceMeasurement.measures.push(entry.name)
      _addDurationToRequest(req, splitName, entry.duration)
    }
  }
}

const sapStatistics = (req, res, next) => {
  if (
    (req.query && req.query['sap-statistics'] === 'true') ||
    (req.headers && req.headers['sap-statistics'] === 'true' && (!req.query || !req.query['sap-statistics']))
  ) {
    const originalEnd = res.end
    const uuid = generateUUID()
    const startMark = `${uuid} Start`
    const endMark = `${uuid} End`

    req.performanceMeasurement = {
      uuid,
      performance,
      sqlId: 0,
      results: { total: 0.0, db: 0.0, ODataIn: 0.0, defaulthandler: 0.0, customhandler: 0.0 },
      marks: [],
      measures: []
    }
    req.performanceMeasurement.observer = new PerformanceObserver(_observerCallback(req))
    req.performanceMeasurement.observer.observe({ entryTypes: ['measure', 'mark'] })

    res.end = function (...args) {
      performance.mark(endMark)
      performance.measure(`${uuid} 0 Total`, startMark, endMark)

      _clearMeasuresAndMarksOfRequest(req)

      req.performanceMeasurement.observer.disconnect()

      const statusCode = res.statusCode && res.statusCode.toString()

      if (!statusCode.startsWith('4') && !statusCode.startsWith('5')) {
        res.setHeader(
          'sap-statistics',
          `total=${req.performanceMeasurement.results.total.toFixed(
            2
          )},defaulthandler=${req.performanceMeasurement.results.defaulthandler.toFixed(
            2
          )},customhandler=${req.performanceMeasurement.results.customhandler.toFixed(
            2
          )},db=${req.performanceMeasurement.results.db.toFixed(2)}`
        )
      }

      originalEnd.call(this, ...args)
    }

    performance.mark(startMark)
  }

  next()
}

const useDynatrace = (req, res, next) => {
  req.dynatrace = dynatrace
  next()
}

const performanceMeasurement = app => {
  app.use(sapStatistics)

  if (dynatrace) {
    app.use(useDynatrace)
  }
}

module.exports = performanceMeasurement
