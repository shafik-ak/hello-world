const {
  Components: { DATA_UPDATE_HANDLER }
} = require('@sap/odata-server')
const OdataContext = require('../utils/OdataContext')
const setSapMessageHeader = require('../utils/sap-message-header')
const { toODataResult } = require('../utils/event')
const { validateResourcePath } = require('../utils/request')

/**
 * The handler that will be registered with odata-v4.
 *
 * In case of success it calls next with the number of updated entries as result.
 * In case of error it calls next with error.
 *
 * @param {Service} service
 * @param {Object} options
 * @return {Function}
 */
const update = (service, options) => {
  return (req, res, next) => {
    // End here if length is greater then allowed
    validateResourcePath(req, options, service.model)
    // TODO: Measure ODataIn, also in other handlers
    const context = new OdataContext(DATA_UPDATE_HANDLER, service, req, res)

    service
      .processEvent(context)
      .then(result => {
        if (req.getConcurrentResource() !== null) {
          const element = Object.values(context.target.elements).find(element => {
            return element['@odata.etag']
          })
          result['*@odata.etag'] = result[element.name]
        }

        setSapMessageHeader(res, context._.infos)
        context.emit('succeeded')
        context.emit('done')
        next(null, toODataResult(result))
      })
      .catch(err => {
        setSapMessageHeader(res, context._.infos)
        context.emit('failed', err)
        context.emit('done')
        next(err)
      })
  }
}

module.exports = update
