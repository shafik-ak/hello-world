const isStreaming = segments => {
  const lastSegment = segments[segments.length - 1]
  return (
    segments.length > 1 &&
    lastSegment.getKind() === 'PRIMITIVE.PROPERTY' &&
    lastSegment
      .getProperty()
      .getType()
      .getName() === 'Stream'
  )
}

const _getType = (property, context) => {
  context._.streaming = false
  return context
    .run(
      context.statements.SELECT.from(context.query.SELECT.from)
        .columns(property)
        .where(context.query.SELECT.where)
    )
    .then(res => {
      context._.streaming = true
      return res.length !== 0 ? res[0][property] : undefined
    })
}

const getContentType = (segments, serviceName, definitions, context) => {
  const propertyName = segments[segments.length - 1].getProperty().getName()
  let propertyType
  if (segments[segments.length - 2].getKind() === 'ENTITY') {
    const entityName = segments[segments.length - 2].getEntitySet().getName()
    propertyType = definitions[`${serviceName}.${entityName}`].elements[`${propertyName}`]['@Core.MediaType']
    if (typeof propertyType === 'object') {
      return _getType(Object.values(propertyType)[0], context)
    }
  }

  return Promise.resolve(propertyType)
}

module.exports = { isStreaming, getContentType }
