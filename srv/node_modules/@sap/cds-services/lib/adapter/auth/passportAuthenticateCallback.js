const { getIpFromRequest, getUserFromRequest } = require('../../services/utils/clientFromRequest')
const getError = require('../../util/getError')

const _getUserAndIpFromRequest = req => {
  const ip = getIpFromRequest(req)
  const user = getUserFromRequest(req)

  return { user: user || ip, ip }
}

// workaround for not enumerable property 'message' of error (disappears in JSON.stringify)
const _error = err => {
  return {
    error: {
      message: err.message
    }
  }
}

// client credential flow will result in an empty object
const _user = (user, info) => {
  if (Object.keys(user).length === 0 && info.clientId) {
    return { id: info.clientId }
  }

  if (info && info.userAttributes) {
    return Object.assign(user, info.userAttributes)
  }

  return user
}

const _add401Challenge = (res, challenge = '') => {
  if (res.statusCode === 401 && challenge.length) {
    res.setHeader('WWW-Authenticate', challenge)
  }
}

/**
 * Calls passport.authenticate with callback to prevent that passport ends requests itself.
 * With this it can be made sure that audit logs are written in case a user is not authorized.
 *
 * If user is authorized, user and authInfo objects are attached to req.
 *
 * @param passport - the passport object
 * @param strategy - the passport strategy as specified in service options
 * @param auditLogger - the audit logger object
 * @returns {Function} - express middleware function
 */
const authenticateWithCallback = (passport, strategy, auditLogger) => {
  return (req, res, next) => {
    const cb = (err, user, info) => {
      if (err) {
        auditLogger.logUnauthorized(_getUserAndIpFromRequest(req))

        // err.status is http error code from passport
        res.status(err.statusCode || err.status || 500)

        _add401Challenge(res, info)

        return res.send(_error(err))
      }

      if (!user) {
        auditLogger.logUnauthorized(_getUserAndIpFromRequest(req))

        res.status(401)

        _add401Challenge(res, info)

        return res.send(_error(getError(401)))
      }

      req.user = _user(user, info)
      req.authInfo = info || {}
      next()
    }

    passport.authenticate(strategy, { session: false, failWithError: true }, cb)(req, res, next)
  }
}

module.exports = authenticateWithCallback
