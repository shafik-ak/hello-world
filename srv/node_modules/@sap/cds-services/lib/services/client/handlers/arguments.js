const cds = require('../../../cds')

/**
 * Loosely convert type in a best effort.
 * @param type
 * @param value
 * @returns {*}
 * @private
 */
const _convertType = (type, value) => {
  switch (type) {
    case 'string':
    case 'Integer':
      return value ? String(value) : ''
    case 'number':
      return Number(value)
    case 'boolean':
      return Boolean(value)
    case 'date':
      return new Date(value || 0).toISOString()
    default:
      return value
  }
}

/**
 * Parse given arguments according to definition.
 * Drops non relevant instead of throwing errors.
 * @param element {Object}
 * @param [entity] {Object} Entity in case the action/function is bound.
 * @returns {Function}
 */
module.exports = (element, entity) => {
  // Add ID(s) as first arg(s) in case of bound action/function
  const params = entity ? Object.assign({}, entity.keys, element.params) : Object.assign({}, element.params)

  // If not defined, drop the args
  if (Object.keys(params).length === 0) {
    return () => {
      return {}
    }
  }

  return args => {
    const data = {}
    const keys = Object.keys(params)

    for (let i = 0, length = keys.length; i < length; i++) {
      const type = cds.builtin.types[params[keys[i]].type]
      data[keys[i]] = type ? _convertType(type.type, args[i]) : args[i]
    }

    return data
  }
}
