const { getScenario } = require('./handlerUtils')
const {
  events: { CUD, CUD_DRAFT, CRUD, RO, UD, CU, CD, RJ_DRAFT, BEFORE_DRAFT, ON_DRAFT, PR_AC_DRAFT }
} = require('./constants')
const INSERT_ONLY = [...RO, ...UD]

const _getDraftAdminDataHandlers = () => {
  return new Map([
    [
      '@readonly',
      {
        before: new Map([]),
        on: new Map([['READ', 'onReadDraft']]),
        reject: CUD
      }
    ],
    [
      '@insertonly',
      {
        before: new Map([]),
        on: new Map([]),
        reject: CRUD
      }
    ],
    [
      'default',
      {
        before: new Map([]),
        on: new Map([['READ', 'onReadDraft']]),
        reject: CUD
      }
    ]
  ])
}

const _getDraftEnabledEntityHandlersOnlyAnnot = isRoot => {
  return new Map([
    [
      '@readonly',
      {
        before: new Map([]),
        on: new Map([['READ', 'onReadDraft']]),
        reject: CUD_DRAFT
      }
    ],
    [
      '@insertonly',
      {
        before: new Map([
          ['NEW', 'beforeCreateDraft'],
          ['PATCH', 'beforeUpdateDraft'],
          ['CANCEL', 'beforeDeleteOrCancelDraft']
        ]),
        on: new Map([
          ['CREATE', 'onCreateDraft'],
          ['PATCH', 'onPatchDraft'],
          ['NEW', 'onCreateDraft'],
          ['CANCEL', 'onCancelDraft'],
          ...(isRoot ? PR_AC_DRAFT : [])
        ]),
        reject: isRoot ? INSERT_ONLY : [...RJ_DRAFT, ...INSERT_ONLY]
      }
    ]
  ])
}

const _getDraftEnabledEntityHandlersCapabAnnot = isRoot => {
  return new Map([
    [
      'NotInsertable',
      {
        before: new Map([...BEFORE_DRAFT, ['DELETE', 'beforeDeleteOrCancelDraft']]),
        on: new Map([
          ...ON_DRAFT,
          ['DELETE', 'onDeleteDraft'],
          ...(isRoot ? [...PR_AC_DRAFT, ['EDIT', 'onDraftEdit']] : [])
        ]),
        reject: isRoot ? ['NEW'] : RJ_DRAFT
      }
    ],
    [
      'NotUpdatable',
      {
        before: new Map([...BEFORE_DRAFT, ['NEW', 'beforeCreateDraft'], ['DELETE', 'beforeDeleteOrCancelDraft']]),
        on: new Map([
          ...ON_DRAFT,
          ['NEW', 'onCreateDraft'],
          ['DELETE', 'onDeleteDraft'],
          ...(isRoot ? PR_AC_DRAFT : [])
        ]),
        reject: isRoot ? ['EDIT'] : RJ_DRAFT
      }
    ],
    [
      'NotDeletable',
      {
        before: new Map([...BEFORE_DRAFT, ['NEW', 'beforeCreateDraft']]),
        on: new Map([
          ...ON_DRAFT,
          ['NEW', 'onCreateDraft'],
          ...(isRoot ? [...PR_AC_DRAFT, ['EDIT', 'onDraftEdit']] : [])
        ]),
        reject: isRoot ? ['DELETE'] : RJ_DRAFT
      }
    ],
    [
      'NotInsertableUpdatable',
      {
        before: new Map([...BEFORE_DRAFT, ['DELETE', 'beforeDeleteOrCancelDraft']]),
        on: new Map([...ON_DRAFT, ['DELETE', 'onDeleteDraft'], ...(isRoot ? PR_AC_DRAFT : [])]),
        reject: isRoot ? ['NEW', 'EDIT'] : RJ_DRAFT
      }
    ],
    [
      'NotInsertableDeletable',
      {
        before: new Map(BEFORE_DRAFT),
        on: new Map([...ON_DRAFT, ...(isRoot ? [...PR_AC_DRAFT, ['EDIT', 'onDraftEdit']] : [])]),
        reject: isRoot ? ['NEW', 'DELETE'] : RJ_DRAFT
      }
    ],
    [
      'NotUpdatableDeletable',
      {
        before: new Map([...BEFORE_DRAFT, ['NEW', 'beforeCreateDraft']]),
        on: new Map([...ON_DRAFT, ['NEW', 'onCreateDraft'], ...(isRoot ? PR_AC_DRAFT : [])]),
        reject: isRoot ? ['EDIT', 'DELETE'] : RJ_DRAFT
      }
    ],
    [
      'NotInsertableUpdatableDeletable',
      {
        before: new Map(BEFORE_DRAFT),
        on: new Map([...ON_DRAFT, ...(isRoot ? PR_AC_DRAFT : [])]),
        reject: isRoot ? [] : RJ_DRAFT
      }
    ]
  ])
}
const _getDraftEnabledEntityHandlers = isRoot => {
  return new Map([
    ..._getDraftEnabledEntityHandlersOnlyAnnot(isRoot),
    ..._getDraftEnabledEntityHandlersCapabAnnot(isRoot),
    [
      'default',
      {
        before: new Map([...BEFORE_DRAFT, ['NEW', 'beforeCreateDraft'], ['DELETE', 'beforeDeleteOrCancelDraft']]),
        on: new Map([
          ...ON_DRAFT,
          ['NEW', 'onCreateDraft'],
          ['DELETE', 'onDeleteDraft'],
          ...(isRoot ? [...PR_AC_DRAFT, ['EDIT', 'onDraftEdit']] : [])
        ]),
        reject: isRoot ? [] : RJ_DRAFT
      }
    ]
  ])
}

const _getDefaultHandlersOnlyAnnot = isDraftEnabledService => {
  return new Map([
    [
      '@readonly',
      {
        before: new Map([]),
        on: new Map([['READ', isDraftEnabledService ? 'onReadOverDraft' : 'onRead']]),
        reject: CUD
      }
    ],
    [
      '@insertonly',
      {
        before: new Map([]),
        on: new Map([['CREATE', 'onCreate']]),
        reject: INSERT_ONLY
      }
    ]
  ])
}

const _getDefaultHandlersCapabAnnot = isDraftEnabledService => {
  return new Map([
    [
      'NotInsertable',
      {
        before: new Map([]),
        on: new Map([
          ['READ', isDraftEnabledService ? 'onReadOverDraft' : 'onRead'],
          ['UPDATE', 'onUpdate'],
          ['DELETE', 'onDelete']
        ]),
        reject: ['CREATE']
      }
    ],
    [
      'NotUpdatable',
      {
        before: new Map([]),
        on: new Map([
          ['READ', isDraftEnabledService ? 'onReadOverDraft' : 'onRead'],
          ['CREATE', 'onCreate'],
          ['DELETE', 'onDelete']
        ]),
        reject: ['UPDATE']
      }
    ],
    [
      'NotDeletable',
      {
        before: new Map([]),
        on: new Map([
          ['READ', isDraftEnabledService ? 'onReadOverDraft' : 'onRead'],
          ['CREATE', 'onCreate'],
          ['UPDATE', 'onUpdate']
        ]),
        reject: ['DELETE']
      }
    ],
    [
      'NotInsertableUpdatable',
      {
        before: new Map([]),
        on: new Map([['READ', isDraftEnabledService ? 'onReadOverDraft' : 'onRead'], ['DELETE', 'onDelete']]),
        reject: CU
      }
    ],
    [
      'NotInsertableDeletable',
      {
        before: new Map([]),
        on: new Map([['READ', isDraftEnabledService ? 'onReadOverDraft' : 'onRead'], ['UPDATE', 'onUpdate']]),
        reject: CD
      }
    ],
    [
      'NotUpdatableDeletable',
      {
        before: new Map([]),
        on: new Map([['READ', isDraftEnabledService ? 'onReadOverDraft' : 'onRead'], ['CREATE', 'onCreate']]),
        reject: UD
      }
    ],
    [
      'NotInsertableUpdatableDeletable',
      {
        before: new Map([]),
        on: new Map([['READ', isDraftEnabledService ? 'onReadOverDraft' : 'onRead']]),
        reject: CUD
      }
    ]
  ])
}
const _getDefaultHandlers = isDraftEnabledService => {
  return new Map([
    ..._getDefaultHandlersOnlyAnnot(isDraftEnabledService),
    ..._getDefaultHandlersCapabAnnot(isDraftEnabledService),
    [
      'default',
      {
        before: new Map([]),
        on: new Map([
          ['READ', isDraftEnabledService ? 'onReadOverDraft' : 'onRead'],
          ['CREATE', 'onCreate'],
          ['UPDATE', 'onUpdate'],
          ['DELETE', 'onDelete']
        ]),
        reject: []
      }
    ]
  ])
}

const getDefaultHandlers = (isDraftEnabledService, isDraftEnabledEntity, isDraftRoot, entityName) => {
  if (isDraftEnabledService) {
    if (entityName.endsWith('DraftAdministrativeData')) {
      return _getDraftAdminDataHandlers()
    }

    if (isDraftEnabledEntity) {
      return _getDraftEnabledEntityHandlers(isDraftRoot)
    }
  }

  return _getDefaultHandlers(isDraftEnabledService)
}

const _renameData = (query, data) => {
  if (query.SELECT && query.SELECT.columns) {
    for (const col of query.SELECT.columns) {
      if (typeof col === 'object' && col.ref && col.as && col.ref[0] !== col.as) {
        if (data[col.as]) {
          data[col.ref[0]] = data[col.as]
          delete data[col.as]
        }
      }
    }
  }
}

const getTargetData = (target, data) => {
  if (target.query) {
    _renameData(target.query, data)

    if (target.query.target) {
      return getTargetData(target.query.target, data)
    }

    if (!target.query.from || target.query.from.length > 1 || target.query.where) {
      const error = new Error('Insert or Update on views with join|union|where is not supported')
      error.statusCode = 501
      throw error
    }

    return { target: target.query.from[0].absolute, data }
  }

  return { target, data }
}

const resolveCqnIfView = context => {
  const data_ = context.query.INSERT ? context.query.INSERT.entries[0] : context.query.UPDATE.data
  const { target, data } = getTargetData(context.target, Object.assign({}, data_))

  if (target === context.target) {
    return context.query
  }

  if (context.query.INSERT) {
    return context.statements.INSERT.into(target).entries(data)
  }

  const update = context.statements.UPDATE(target).where(context.query.UPDATE.where)
  update.UPDATE.data = data
  return update
}

module.exports = { getDefaultHandlers, getScenario, resolveCqnIfView, getTargetData }
