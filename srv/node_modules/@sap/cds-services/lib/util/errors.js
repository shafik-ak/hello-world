const CONTEXT_ERROR = 'sap.cds.CONTEXT_ERROR'

const getModelNotDefinedError = modelName => {
  return new Error(`No valid model provided. Invalid model: ${JSON.stringify(modelName)}`)
}

const filename = model => {
  if (!model) return ''
  let srv = model.find('service')
  return (srv && srv.$location && `${srv.$location.file}`) || ''
}

const getNotInModelAssociationError = (service, model, event, entityPath, association, entityName) => {
  return new Error(
    `Invalid event handler registration to '${service}' in the model '${filename(
      model
    )}': '${event}', '${entityPath}'.\n Didnâ€™t find association '${association}' in entity definition '${entityName}'.`
  )
}

const getMissingTargetAssociationError = (service, model, event, association, entityName) => {
  return new Error(
    `Invalid event handler registration to '${service}' in the model '${filename(
      model
    )}': '${event}'.\n Missing target for association '${association}' in entity definition '${entityName}'.`
  )
}

const getNotInModelEntityError = (service, event, entity, model) => {
  if (typeof entity === 'string') {
    entity = entity.startsWith(service) ? entity.substr(service.length + 1) : entity
  }
  return new Error(
    `Invalid event handler registration to '${service}': '${event}'.\n Specified entity '${entity}' is not defined in the model '${filename(
      model
    )}'.`
  )
}

const getNotInModelStringNameEntityError = (service, event, entity, model) => {
  return new Error(
    `Invalid event handler registration to '${service}' in the model '${filename(
      model
    )}': '${event}'.\n Specified CSN entity doesn't have a name of type 'String'.`
  )
}

const getNotInModelKindEntityError = (service, event, entity, model) => {
  return new Error(
    `Invalid event handler registration to '${service}' in the model '${filename(
      model
    )}': '${event}'.\n Specified CSN entity doesn't have a kind of type 'entity'.`
  )
}

const getInvalidEntityPathError = (service, event, entityPath, model) => {
  return new Error(
    `Invalid event handler registration to '${service}' in the model '${filename(
      model
    )}': '${event}'.\n Invalid entity path '${entityPath}'. The path should not start with '/'.`
  )
}

const getNotInModelBoundActionError = (service, event, entity, model) => {
  return new Error(
    `Invalid event handler registration to '${service}': '${event}'.\n Specified bound custom operation '${event}' is not defined within the provided entity '${entity}' in the model '${filename(
      model
    )}'.`
  )
}

const getNotInModelEventError = (service, event, model) => {
  return new Error(
    `Invalid event handler registration to '${service}': '${event}'.\n Specified event '${event}' is not defined in the model '${filename(
      model
    )}'.`
  )
}

const getFeatureNotSupportedError = message => {
  const error = new Error(`Feature is not supported: ${message}`)
  error.statusCode = 501
  return error
}

const getAuditLogNotWrittenError = (rootCauseError, phase, event) => {
  const errorMessage =
    !phase || event === 'READ' ? 'Audit log could not be written' : `Audit log could not be written ${phase}`
  const error = new Error(errorMessage)
  error.rootCause = rootCauseError
  return error
}

const combineErrors = errors => {
  if (errors.length === 0) {
    return
  }

  if (errors.length === 1) {
    errors[0][Symbol.for(CONTEXT_ERROR)] = true
    return errors[0]
  }

  const err = new Error('Some errors occurred. Please see the details for more information')
  err.details = errors
  // For now we take the first statusCode as general statusCode
  err.statusCode = errors[0].statusCode

  err[Symbol.for(CONTEXT_ERROR)] = true
  return err
}

const handleErrorLog = (entry, context, contextSymbol) => {
  if (process.env.NODE_ENV !== 'production' && !entry.handler.isDefault && !contextSymbol) {
    context.log.error(
      `Error while executing custom handler: ${entry.event} ${entry.entity ? 'on ' + entry.entity : ''}`
    )
  }
}

module.exports = {
  getModelNotDefinedError,
  getFeatureNotSupportedError,
  getAuditLogNotWrittenError,
  getNotInModelAssociationError,
  getNotInModelEntityError,
  getNotInModelEventError,
  getInvalidEntityPathError,
  getNotInModelBoundActionError,
  getMissingTargetAssociationError,
  getNotInModelKindEntityError,
  getNotInModelStringNameEntityError,
  combineErrors,
  handleErrorLog,
  CONTEXT_ERROR
}
