const _errorCodes = {
  400: 'Bad Request',
  401: 'Unauthorized',
  403: 'Forbidden',
  404: 'Not Found', // alternatively: The server has not found a resource matching the Data Services Request URI.
  405: 'Method Not Allowed',
  406: 'Not Acceptable',
  407: 'Proxy Authentication Required',
  408: 'Request Timeout',
  409: 'Conflict',
  410: 'Gone',
  411: 'Length Required',
  412: 'Precondition Failed',
  413: 'Payload Too Large',
  414: 'URI Too Long',
  415: 'Unsupported Media Type',
  416: 'Range Not Satisfiable',
  417: 'Expectation Failed',
  424: 'Failed Dependency',
  428: 'Precondition Required',
  429: 'Too Many Requests',
  431: 'Request Header Fields Too Large',
  451: 'Unavailable For Legal Reasons',
  500: 'Server Error',
  501: 'The server does not support the functionality required to fulfill the request',
  502: 'Bad Gateway',
  503: 'Service Unavailable',
  504: 'Gateway Timeout'
}

/**
 * Filters the error code for known ones.
 * Fallback to 500 if unknown.
 * @param code
 * @returns {number}
 * @private
 */
const _getErrorCode = code => {
  return _errorCodes[code] ? code : 500
}

const _addFlagIfCodeShouldKept = err => {
  if (err && typeof err === 'object' && 'code' in err) {
    err._keepCodeProperty = true
  }
}

/**
 * @param error
 * @returns {Error}
 * @private
 */
const _getErrorObject = error => {
  return typeof error === 'object' && 'message' in error && 'stack' in error ? error : new Error(error)
}

/**
 * Get error customized for @sap/odata-server as the default Error object will be treated as internal server error.
 * @param {number|Error|string} statusCode - Status code. If unknown to @sap/odata-server, will be overwritten with 500.
 * @param {Error|string} [err] - Error given by the app developer.
 * @param {String} [target] - Element of entity to which the error relates.
 * @returns {Error}
 */
const getError = (statusCode, err, target) => {
  // usage without a status code should work as well.
  if (statusCode && typeof statusCode !== 'number') {
    return getError(undefined, statusCode, err)
  }

  _addFlagIfCodeShouldKept(err)

  const code = _getErrorCode(statusCode)
  const error = err || _errorCodes[code]

  const errorObject = _getErrorObject(error)
  errorObject.statusCode = errorObject.statusCode || code

  if (target) {
    errorObject.target = target
  }

  return errorObject
}

module.exports = getError
