
const extend = exports.extend = (target=this) => ({
    with (...aspects) {
        for (let each of aspects) {
            const aspect = each.prototype || each
            for (let p of Reflect.ownKeys(aspect)) {
                p in {constructor:1,prototype:1} || Reflect.defineProperty (
                    target, p, Reflect.getOwnPropertyDescriptor (aspect,p)
                )
            }
        }
        return target
    }
})

const lazify = exports.lazify = (x) => {
    if (x.exports) { // is it a Node.js module?
        extend(x).with ({ set exports(x) { extend(this).with ({ exports: lazify(x) }) } })
        return id => lazy => x.require(id)  // eslint-disable-line
    }
    for (let p of Reflect.ownKeys(x)) {
        let v = Reflect.getOwnPropertyDescriptor(x,p).value
        if (typeof v === 'function' && /^\(?lazy[,)\t =]/.test(v)) Reflect.defineProperty(x,p,{configurable:1,
            set:v => Reflect.defineProperty (x,p,{value:v, writable:1}),
            get:() => x[p] = v(p,x),
        })
    }
    return x
}
